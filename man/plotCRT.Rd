% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotCRT.R
\name{plotCRT}
\alias{plotCRT}
\title{Graphical displays of the geography of a CRT}
\usage{
plotCRT(
  object,
  map = FALSE,
  fill = "arms",
  showLocations = FALSE,
  showClusterBoundaries = TRUE,
  showClusterLabels = FALSE,
  showContamination = FALSE,
  cpalette = NULL,
  maskbuffer = 0.2,
  labelsize = 4,
  legend.position = NULL
)
}
\arguments{
\item{object}{object of class \code{'CRTanalysis'} produced by \code{CRTanalysis()}}

\item{map}{logical: indicator of whether a map is required}

\item{fill}{fill layer of map
\tabular{ll}{
\code{'cluster'} \tab cluster assignment \cr
\code{'arms'}   \tab arm assignment \cr
\code{'distance'} \tab distance to the nearest discordant location\cr
\code{'prediction'}\tab model prediction of the outcome \cr
\code{'none'}\tab No fill \cr
}}

\item{showLocations}{logical: determining whether locations are shown}

\item{showClusterBoundaries}{logical: determining whether cluster boundaries are shown}

\item{showClusterLabels}{logical: determining whether the cluster numbers are shown}

\item{showContamination}{logical: determining whether the estimated contamination range should be mapped}

\item{cpalette}{colour palette (to use different colours for clusters must be at
least as long as the number of clusters, defaults to \code{rainbow())}}

\item{maskbuffer}{radius of buffer drawn around inhabited areas (km)}

\item{labelsize}{size of cluster number labels}

\item{legend.position}{(using \code{ggplot2::themes} syntax)}
}
\value{
graphics object produced by the \code{ggplot2} package
}
\description{
\code{plotCRT} returns graphical displays of the geography of a CRT
\code{plotCRT} creates graphics displaying the geographical showing the results of statistical analysis of a CRT
}
\details{
If \code{map = TRUE} a plot corresponding to the value of \code{fill} is generated.
\itemize{
\item \code{fill = 'clusters'} or leads to thematic map showing the locations of the clusters
\item \code{fill = 'arms'} leads to a thematic map showing the geography of the randomization
\item \code{fill = 'distance'} leads to a raster plot of the distance to the nearest discordant location.
\item \code{fill = 'prediction'} leads to a raster plot of predictions from an \code{'INLA'} model.
}
If \code{showContamination = TRUE} the map is overlaid with a grey transparent layer showing showing which
areas are within the contamination zone estimated by an \code{'INLA'} model.\cr
If \code{map = FALSE} and the input is a trial data frame or a \code{CRTsp} object, containing a randomisation
to arms, a stacked bar chart of the the outcome grouped by distance from the boundary is produced.\cr
If \code{map = FALSE} and the input is a \code{CRTanalysis} object plot of the
estimated contamination function is generated.
The fitted contamination function is plotted as a continuous blue line against the distance
from the nearest discordant location.Using the same axes, data summaries are plotted for
ten categories of distance from the boundary. Both the
average of the outcome and confidence intervals are plotted. \cr
For analyses with logit link function the outcome is plotted as a proportion. \cr
For analyses with log link function the outcome is plotted on a scale of the Williams' mean
(mean of exp(log(x + 1))) - 1) \cr
}
\examples{
#Plot of data by distance
plotCRT(readdata('exampleCRT.csv'))
#Map of locations only
plotCRT(readdata('exampleCRT.csv'), map = TRUE, fill = 'none', showLocations = TRUE,
           showClusterBoundaries=FALSE, maskbuffer=0.2)
#show cluster boundaries and number clusters
plotCRT(readdata('exampleCRT.csv'), map = TRUE, fill ='none', showClusterBoundaries=TRUE,
           showClusterLabels=TRUE, maskbuffer=0.2, labelsize = 2)
#show clusters in colour
plotCRT(readdata('exampleCRT.csv'), map = TRUE, fill = 'clusters', showClusterLabels = TRUE,
          labelsize=2, maskbuffer=0.2)
#show arms
plotCRT(readdata('exampleCRT.csv'), map = TRUE,
        fill = 'arms', maskbuffer=0.2, legend.position=c(0.2,0.8))
#contamination plot
analysis <- CRTanalysis(readdata('exampleCRT.csv')); plotCRT(analysis, map = FALSE)

}
