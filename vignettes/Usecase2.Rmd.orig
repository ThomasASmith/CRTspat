---
title: "Use Case 2"
output:
  rmarkdown::html_vignette:
  toc: true
vignette: >
  %\VignetteIndexEntry{Use Case 2: Simulation of trials with spillover effects}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---
<!--To build the vignette
# since the vignette takes a long time to run, it is not run with every build
# as suggested here https://ropensci.org/blog/2019/12/08/precompute-vignettes/
# to Knit this vignette without this time consuming step being part of the default build
knitr::knit("vignettes/Usecase2.Rmd.orig", output = "vignettes/Usecase2.Rmd")
rmarkdown.html_vignette.check_title = FALSE
devtools::install(build_vignettes = TRUE)
-->
### Use Case 2: Simulation of trials with spillover effects

Trials can be simulated using the `Simulate_CRT` function, which augments a `trial` data frame with simulated outcome data.  The input `trial` object can be one created externally or by using package functions. It should contain location information and both cluster and arm assignments as shown in Figure 1.  The degree of spillover is specified either as a contamination range with the `theta_inp` parameter, or as the standard deviation of the normal kernel assumed to describe mosquito movement, `sd`. Information about the underlying spatial pattern of exposure to malaria is also required in the form of the `infectiousness_proxy` variable which takes a positive real value for each location. This can be:

+ provided as an externally generated set of values, derived by the user either from field data, or as either a stochastic or deterministic function of the co-ordinates.
+	derived from baseline data in the form of proportions (specified by assigning the name of the numerator as `baselineNumerator` and of the denominator as `baselineDenominator` in the input to  `Simulate_CRT`). `infectiousness_proxy` is then generated by kernel smoothing of these proportions.
+ generated by `Simulate_CRT` making use of user provided values of the overall initial prevalence `initialPrevalence` and of the intracluster correlation coefficient, `ICC_inp`. Kernel smoothers are used to generate an inhomogeneous `infectiousness_proxy` surface. This surface is used to generate a simulated set of baseline proportions. The process is repeated with iterative adjustments to the bandwidth of the kernels until a surface with approximately the correct intracluster correlation coefficient is obtained.

#### Example with baseline data provided as proportions
```{r example2.r, fig.path=('vignettes/'),echo=TRUE}
set.seed(1234)
#   use co-ordinates, cluster and arm assignments, and baseline data from `test5`
test6b = Simulate_CRT(trial= test5,
                    efficacy=0.4,
                    initialPrevalence = 0.5,
                    generateBaseline=FALSE,
                    baselineNumerator='base_num',
                    baselineDenominator='base_denom',
                    ICC_inp=NULL,
                    theta_inp=0.8)

results6b=Analyse_CRT(trial=test6b,method='SPDE',inlaMesh = inlaMeshTest)
Plot_Contamination(analysis=results6b)
Plot_CRTmap(analysis=results6b,trial=test6b,showProportion = TRUE)
```

#### Example with infectiousness proxy surface generated externally
```{r example3.r, fig.path=('vignettes/'),echo=TRUE}
set.seed(1234)
#   use co-ordinates, cluster and arm assignments from `test5` but ignore pre-existing baseline
test5a = test5[ , !(names(test5) %in% c("base_num","base_denom"))]
#   infectiousness proxy surface generated as an arbitrary linear function of x co-ordinate
test5a$infectiousness_proxy = 0.5*test5a$x - min(test5a$x)+1
test6a = Simulate_CRT(trial= test5a,
                    efficacy=0.4,
                    initialPrevalence = 0.5,
                    generateBaseline=TRUE,
                    ICC_inp=NULL,
                    theta_inp=0.5)
results6a = Analyse_CRT(trial=test6a,method='SPDE',inlaMesh = inlaMeshTest)
Plot_CRTmap(trial=test6a,analysis=results6a,showProportion = TRUE)
```

#### Example with baseline generated from user-provided values of the overall initial prevalence and ICC
```{r example4.r, fig.path=('vignettes/'),echo=TRUE}
set.seed(1234)
#   use co-ordinates, cluster and arm assignments, and baseline data from `test5`
test6c = Simulate_CRT(trial= test5,
                    efficacy=0.4,
                    initialPrevalence = 0.6,
                    generateBaseline=TRUE,
                    baselineNumerator='base_num',
                    baselineDenominator='base_denom',
                    ICC_inp=0.08,
                    theta_inp=0.2)

results6c=Analyse_CRT(trial=test6c,method='GEE')
```
