switch(b, 'rabbit' = 'Eugen', "sdfaf")
b <- 'rabbit'
switch(b, 'rabbit' = 'Eugen', "sdfaf")
object <- examples_klm
if (object$options$cfunc %in% c("L", "P", "S", "R")) {
cat("Measure of distance or surround: ", switch(object$options$measure,
"nearestDiscord" = "Nearest discordant location \n",
"disc" = paste0("disc of radius ", round(object$options$radius, digits = 3), " km \n"),
"hdep" = "Tukey's half-depth \n",
"sdep" = "Simplicial depth\n",
paste0(object$options$measure,\n)))
cat("Measure of distance or surround: ", switch(object$options$measure,
"nearestDiscord" = "Nearest discordant location \n",
"disc" = paste0("disc of radius ", round(object$options$radius, digits = 3), " km \n"),
"hdep" = "Tukey's half-depth \n",
"sdep" = "Simplicial depth\n",
object$options$measure)))
cat("Measure of distance or surround: ", switch(object$options$measure,
"nearestDiscord" = "Nearest discordant location \n",
"disc" = paste0("disc of radius ", round(object$options$radius, digits = 3), " km \n"),
"hdep" = "Tukey's half-depth \n",
"sdep" = "Simplicial depth\n",
defaulttext = defaulttext))
cat("Measure of distance or surround: ", switch(object$options$measure,
"nearestDiscord" = "Nearest discordant location \n",
"disc" = paste0("disc of radius ", round(object$options$radius, digits = 3), " km \n"),
"hdep" = "Tukey's half-depth \n",
"sdep" = "Simplicial depth\n",
#                        defaulttext = paste0(defaulttext,\n))
paste0(object$options$measure,"\n")))
library(CRTspat)
summary(examples_klmopt)
summary(examples_disc)
library(CRTspat)
plotCRT(trial, measure = 'klmopt')
plotCRT(trial, measure = 'klmopt')
plotCRT(trial, measure = 'klmopt')
plotCRT(trial, measure = 'klmopt')
library(CRTspat)
plotCRT(trial, measure = 'klmopt')
plotCRT(trial, measure = 'klmopt')
xaxistext
measure
xaxistext <-  switch(measure,
"nearestDiscord" = "Distance to nearest discordant location (km)",
"disc" = paste0("disc (radius ", round(radius, digits = 3), " km)"),
"hdep" = "Tukey's half-depth",
"sdep" = "Simplicial depth",
measure = measure)
xaxistext
measure == measure
rat <- measure
xaxistext <-  switch(measure,
"nearestDiscord" = "Distance to nearest discordant location (km)",
"disc" = paste0("disc (radius ", round(radius, digits = 3), " km)"),
"hdep" = "Tukey's half-depth",
"sdep" = "Simplicial depth",
rat = measure)
xaxistext
rat
xaxistext <-  switch(measure,
"nearestDiscord" = "Distance to nearest discordant location (km)",
"disc" = paste0("disc (radius ", round(radius, digits = 3), " km)"),
"hdep" = "Tukey's half-depth",
"sdep" = "Simplicial depth",
"klmopt" = measure)
xaxistext
xaxistext <-  switch(measure,
"nearestDiscord" = "Distance to nearest discordant location (km)",
"disc" = paste0("disc (radius ", round(radius, digits = 3), " km)"),
"hdep" = "Tukey's half-depth",
"sdep" = "Simplicial depth",
measure)
xaxistext
library(CRTspat)
plotCRT(trial, measure = 'klmopt')
plotCRT(trial, measure = 'klmopt')
xaxistext
library(CRTspat)
plotCRT(trial, measure = 'klmopt')
plotCRT(examples_klmopt)
# compute kernel-like measure
get_klm <- function (trial, beta, arm = 'intervention'){
dist_trial <- as.matrix(dist(cbind(trial$x, trial$y), method = "euclidean"))
klm <- colSums(dnorm(dist_trial, mean = 0, sd = beta) *
matrix(data = (trial$arm == arm), nrow = nrow(trial), ncol = nrow(trial)))
klm <- ifelse(trial$arm == arm, klm - dnorm(0, mean = 0, sd = beta), klm)
return(klm)
}
# compute kernel-like measure
get_klm <- function (trial, beta, arm = 'intervention'){
dist_trial <- as.matrix(dist(cbind(trial$x, trial$y), method = "euclidean"))
klm <- colSums(dnorm(dist_trial, mean = 0, sd = beta) *
matrix(data = (trial$arm == arm), nrow = nrow(trial), ncol = nrow(trial)))
#klm <- ifelse(trial$arm == arm, klm - dnorm(0, mean = 0, sd = beta), klm)
return(klm)
}
trial$klm_opt1 <- get_klm(trial, beta= 0.078, arm = 'intervention')
examples_opt1 <- CRTanalysis(trial, method = "LME4", link= "log", measure = "klm_opt1", cfunc = "R")
summary(examples_opt1)
with(trial, plot(klm_opt, klm_opt1))
with(trial, plot(klmopt, klm_opt1))
examples_optp <- CRTanalysis(trial, method = "LME4", link= "log", personalProtection = TRUE, measure = "klm_opt", cfunc = "R")
examples_optp <- CRTanalysis(trial, method = "LME4", link= "log", personalProtection = TRUE, measure = "klm_opt", cfunc = "R")
head(trial)
examples_optp <- CRTanalysis(trial, method = "LME4", link= "log", personalProtection = TRUE, measure = "klm_opt", cfunc = "R")
examples_optp <- CRTanalysis(trial, method = "LME4", link= "log", personalProtection = TRUE, measure = "klmopt", cfunc = "R")
summary(examples_optp)
plotCRT(examples_optp)
summary(examples_optp$model_object)
examples_optp$contamination$FittedCurve
library(CRTspat)
examples_optp <- CRTanalysis(trial, method = "LME4", link= "log", personalProtection = TRUE, measure = "klmopt", cfunc = "R")
limits
par0
par1
intervention_curve <- invlink(link, FUN1(trial = data.frame(measure = d), par = par1))
intervention_curve <- invlink(link, FUN1(trial = data.frame(measure = d), par = par1))
par0
par1
examples_optp <- CRTanalysis(trial, method = "LME4", link= "log", personalProtection = TRUE, measure = "klmopt", cfunc = "R")
limits0
limits1
library(CRTspat)
examples_optp <- CRTanalysis(trial, method = "LME4", link= "log", personalProtection = TRUE, measure = "klmopt", cfunc = "R")
library(CRTspat)
examples_optp <- CRTanalysis(trial, method = "LME4", link= "log", personalProtection = TRUE, measure = "klmopt", cfunc = "R")
x
limits
limits <- matrix(x[["controlY"]], nrow = 2, ncol = 2)
limits
if(!is.null(x[["interventionY"]])) limits[ ,2] <- x[["interventionY"]]
limits
if(!is.null(x[["interventionY"]])) limits[ ,2] <- x[["interventionY"]]
limits
limits[ ,2]
if(!is.null(x[["interventionY"]])) limits[ ,2] <- rep(x[["interventionY"]],2)
limits[ ,2]
if(!is.null(x[["interventionY"]])) limits[ ,2] <- rep(x[["interventionY"]], times = 2)
limits[ ,2]
rep(x[["interventionY"]], times = 2)
limits[ ,2] <-  rep(x[["interventionY"]], times = 2)
limits
x
x[["interventionY"]]
is.null(x[["interventionY"]])
if(!is.null(x[["interventionY"]])) limits[ ,2] <-  rep(x[["interventionY"]], times = 2)
limits
invlink(link,c(20,-20))
limits <- invlink(link,c(20,-20))
limits
limits <- invlink(link,matrix(c(20,-20, 20, -20), nrow = 2, ncol = 2))
limits
limits <- invlink(link, matrix(c(20,20, -20, -20), nrow = 2, ncol = 2))
limits <- invlink(link, matrix(c(20,20, -20, -20), nrow = 2, ncol = 2))
limits <- matrix(x[["controlY"]], nrow = 2, ncol = 2)
if(!is.null(x[["interventionY"]])) limits[ ,2] <-  rep(x[["interventionY"]], times = 2)
if(is.na(limits[2])) limits[ , 2] <- x[["controlY"]]
x[["arm"]]
is.null(x[["rabbit"]])
is.null(x[["arm"]])
limits <- matrix(x[["controlY"]], nrow = 2, ncol = 2)
if(!is.null(x[["interventionY"]])) limits[ ,2] <-  rep(x[["interventionY"]], times = 2)
if(is.na(x[["interventionY"]])) limits[ , 2] <- rep(x[["controlY"]], times = 2)
if (!is.na(personal_protection)) {
limits[1, 2] <- invlink(link, x[["arm"]] + x[["pvar"]])
limits[2, 1] <- invlink(link, x[["int"]] + x[["arm"]])
}
x
limits <- matrix(x[["controlY"]], nrow = 2, ncol = 2)
if(!is.null(x[["interventionY"]])) limits[ ,2] <-  rep(x[["interventionY"]], times = 2)
if(is.na(x[["interventionY"]])) limits[ , 2] <- rep(x[["controlY"]], times = 2)
if (!is.na(x[["personal_protection"]])) {
limits[1, 2] <- invlink(link, x[["arm"]] + x[["pvar"]])
limits[2, 1] <- invlink(link, x[["int"]] + x[["arm"]])
}
limits <- matrix(x[["controlY"]], nrow = 2, ncol = 2)
if(!is.null(x[["interventionY"]])) limits[ ,2] <-  rep(x[["interventionY"]], times = 2)
if(is.na(x[["interventionY"]])) limits[ , 2] <- rep(x[["controlY"]], times = 2)
if (!is.na(x[["personal_protection"]])) {
limits[1, 2] <- invlink(link, x[["arm"]] + x[["pvar"]])
limits[2, 1] <- invlink(link, x[["int"]] + x[["arm"]])
}
limits
library(CRTspat)
examples_optp <- CRTanalysis(trial, method = "LME4", link= "log", personalProtection = TRUE, measure = "klmopt", cfunc = "R")
library(CRTspat)
examples_optp <- CRTanalysis(trial, method = "LME4", link= "log", personalProtection = TRUE, measure = "klmopt", cfunc = "R")
examples_optp <- CRTanalysis(trial, method = "LME4", link= "log", personalProtection = TRUE, measure = "klmopt", cfunc = "R")
x[["arm"]] + x[["pvar"]]
invlink(link, x[["arm"]] + x[["pvar"]])
invlink(link, x[["arm"]] + x[["pvar"]])
examples_optp <- CRTanalysis(trial, method = "LME4", link= "log", personalProtection = TRUE, measure = "klmopt", cfunc = "R")
analysis$pt_ests
x
library(CRTspat)
examples_optp <- CRTanalysis(trial, method = "LME4", link= "log", personalProtection = TRUE, measure = "klmopt", cfunc = "R")
plotCRT(examples_optp)
summary(examples_optp)
library(CRTspat)
summary(examples_optp)
examples_optp <- CRTanalysis(trial, method = "LME4", link= "log", personalProtection = TRUE, measure = "klmopt", cfunc = "R")
summary(examples_optp)
plotCRT(examples_optp)
examples_x <- CRTanalysis(trial, method = "LME4", link= "log", personalProtection = TRUE, measure = "nearestDiscord", cfunc = "X")
plotCRT(examples_x)
plotCRT(examples_x$pt_ests
plotCRT(examples_x$pt_ests)
examples_x$pt_ests
library(CRTspat)
plotCRT(examples_x)
plotCRT(examples_x)
summary(examples_x)
plotCRT(examples_x)
examples_x <- CRTanalysis(trial, method = "LME4", link= "log", personalProtection = TRUE, measure = "nearestDiscord", cfunc = "X")
limits
limits
limits
cfunc
limits
plotCRT(examples_x)
examples_x <- CRTanalysis(trial, method = "LME4", link= "log", personalProtection = TRUE, measure = "nearestDiscord", cfunc = "P")
examples_p <- CRTanalysis(trial, method = "LME4", link= "log", personalProtection = TRUE, measure = "nearestDiscord", cfunc = "P")
plotCRT(examples_p)
plotCRT(examples_x)
library(CRTspat)
examples_x <- CRTanalysis(trial, method = "LME4", link= "log", personalProtection = TRUE, measure = "nearestDiscord", cfunc = "P")
examples_x <- CRTanalysis(trial, method = "LME4", link= "log", personalProtection = TRUE, measure = "nearestDiscord", cfunc = "X")
plotCRT(examples_x)
library(CRTspat)
plotCRT(examples_x)
plotCRT(examples_x)
knitr::knit("vignettes/Usecase5.Rmd.orig", output = "vignettes/Usecase5.Rmd")
library(CRTspat)
knitr::opts_chunk$set(error=FALSE)
knitr::knit("vignettes/Usecase5.Rmd.orig", output = "vignettes/Usecase5.Rmd")
getwd()
knitr::knit("vignettes/Usecase5.Rmd.orig", output = "vignettes/Usecase5.Rmd")
library(CRTspat)
example <- readdata("exampleCRT.txt")
analysisT <- CRTanalysis(example, method = "T")
summary(analysisT)
analysisT$model_object
analysisLME4_Z <- CRTanalysis(example, method = "LME4", cfunc = "Z")
library(CRTspat)
analysisLME4_Z <- CRTanalysis(example, method = "LME4", cfunc = "Z")
analysisLME4_Z <- CRTanalysis(example, method = "LME4", cfunc = "Z")
summary(analysisLME4_Z)
x
if(!is.null(x[["interventionY"]])) {
limits[ ,2] <-  rep(x[["interventionY"]], times = 2)
} else if(is.na(x[["interventionY"]])) {
limits[ , 2] <- rep(x[["controlY"]], times = 2)
}
if (!is.na(x[["personal_protection"]])) {
limits[1, 2] <- invlink(link, x[["int"]] + x[["pvar"]])
limits[2, 1] <- invlink(link, x[["int"]] + x[["arm"]])
}
if (identical(cfunc, 'X')) {
limits[1, 2] <- limits[1, 1]
limits[2, 1] <- limits[2, 2]
}
contamination_par <- x[["contamination_par"]]
# Trap cases with extreme effect: TODO: a different criterion may be needed for continuous data
pars <- link_tr(link,limits)
if (abs(pars[1] - pars[2]) > 10000) {
limits <- invlink(link, matrix(c(20,20, -20, -20), nrow = 2, ncol = 2))
}
range_d <- max(trial$measure) -
min(trial$measure)
d <- min(trial$measure) + range_d * (seq(1:1001) - 1)/1000
if (identical(limits[1, ], limits[2, ])) {
control_curve <- intervention_curve <- rep(limits[1],1001)
} else {
par0 <- c(link_tr(link, limits[1, 1]),
link_tr(link, limits[1, 2]) - link_tr(link, limits[1, 1]),
contamination_par)
par1 <- c(
link_tr(link, limits[2, 1]),
link_tr(link, limits[2, 2]) - link_tr(link, limits[2, 1]),
contamination_par
)
# trap extreme cases with undefined, flat or very steep curves
if (!identical(cfunc, "R")) {
if (is.null(contamination_par)) {
cfunc <- "X"
} else if (is.na(contamination_par) |
contamination_par < 0.01 |
contamination_par > 100  |
(abs(pars[1] - pars[2]) > 10000)) {
cfunc <- "X"
}
}
FUN1 <- get_FUN(cfunc, variant = 1)
intervention_curve <- invlink(link, FUN1(trial = data.frame(measure = d), par = par1))
control_curve <- invlink(link, FUN1(trial = data.frame(measure = d), par = par0))
# if the trial arm corresponds to the sign of d then:
if(min(d) < 0) {
control_curve[d > 0] <- NA
intervention_curve[d < 0] <- NA
}
}
c
analysisLME4_Z <- CRTanalysis(example, method = "LME4", cfunc = "Z")
summary(analysisLME4_Z)
analysisLME4_Z <- CRTanalysis(example, method = "LME4", cfunc = "Z")
summary(analysisLME4_Z)
analysisLME4_Z <- CRTanalysis(example, method = "LME4", cfunc = "Z")
summary(analysisLME4_Z)
is.null(x[["interventionY"]])
(is.null(rabbit) | is.na(rabbit))
(is.null(rabbit) | is.na(rabbit))
rabbit <- NULL
(is.null(rabbit) | is.na(rabbit))
(!is.null(rabbit))
(is.null(rabbit))
library(CRTspat)
analysisLME4_Z <- CRTanalysis(example, method = "LME4", cfunc = "Z")
library(CRTspat)
example <- readdata("exampleCRT.txt")
analysisT <- CRTanalysis(example, method = "T")
summary(analysisT)
analysisT$model_object
analysisLME4_Z <- CRTanalysis(example, method = "LME4", cfunc = "Z")
summary(analysisLME4_Z)
analysisLME4_X <- CRTanalysis(example, method = "LME4", cfunc = "X")
summary(analysisLME4_X)
analysisLME4_P <- CRTanalysis(example, method = "LME4", cfunc = "P")
summary(analysisLME4_P)
analysisLME4_L <- CRTanalysis(example, method = "LME4", cfunc = "L")
summary(analysisLME4_L)
analysisLME4_S <- CRTanalysis(example, method = "LME4", cfunc = "S")
summary(analysisLME4_S)
analysisLME4_R <- CRTanalysis(example, method = "LME4", cfunc = "R")
summary(analysisLME4_R)
p0 <- plotCRT(analysisLME4_Z, map = FALSE)
p1 <- plotCRT(analysisLME4_X, map = FALSE)
p2 <- plotCRT(analysisLME4_P, map = FALSE)
p3 <- plotCRT(analysisLME4_L, map = FALSE)
p4 <- plotCRT(analysisLME4_S, map = FALSE)
p5 <- plotCRT(analysisLME4_R, map = FALSE)
library(cowplot)
plot_grid(p0, p1, p2, p3, p4, p5, labels = c('Z', 'X', 'P', 'L', 'S', 'R'), label_size = 10, ncol = 2)
analysisLME4_P <- CRTanalysis(example, method = "LME4", cfunc = "P")
x
limits
library(CRTspat)
analysisLME4_P <- CRTanalysis(example, method = "LME4", cfunc = "P")
summary(analysisLME4_P)
plotCRT(analysisLME4_P)
analysisLME4_P <- CRTanalysis(example, method = "LME4", personalProtection = TRUE, cfunc = "P")
plotCRT(analysisLME4_P)
summary(analysisLME4_P)
analysisLME4_P <- CRTanalysis(example, method = "LME4", personalProtection = TRUE, cfunc = "P")
limits
x
invlink(link, x[["int"]] + x[["arm"]] + x[["pvar"]] )
analysisLME4_P <- CRTanalysis(example, method = "LME4", personalProtection = TRUE, cfunc = "P")
library(CRTspat)
analysisLME4_P <- CRTanalysis(example, method = "LME4", personalProtection = TRUE, cfunc = "P")
Q
analysisLME4_P <- CRTanalysis(example, method = "LME4", personalProtection = TRUE, cfunc = "P")
summary(analysisLME4_P)
plotCRT(analysisLME4_P)
analysisLME4_L <- CRTanalysis(example, method = "LME4", personalProtection = TRUE, cfunc = "L")
plotCRT(analysisLME4_L)
analysisLME4_L <- CRTanalysis(example, method = "LME4", personalProtection = TRUE, cfunc = "L")
limits
abs(limits[1, 1] - curve[1000])
thetaL
0.025 * abs(limits[1, 1] - limits[1, 2])
thetaL <- d[min(
which(
abs(limits[1, 1] - curve) >
0.025 * abs(limits[1, 1] - limits[1, 2])
)
)]
thetaL
abs(limits[2, 2] - curve[1000]
)
thetaU <- d[min(
which(
abs(limits[2, 2] - curve) <
0.025 * abs(limits[2, 1] - limits[2, 2])
)
)]
thetaU
thetaU <- d[max(
which(
abs(limits[2, 2] - curve) <
0.025 * abs(limits[2, 1] - limits[2, 2])
)
)]
thetaU
thetaU <- d[max(
which(
abs(limits[2, 2] - curve) >
0.025 * abs(limits[2, 1] - limits[2, 2])
)
)]
thetaU
analysisLME4_L <- CRTanalysis(example, method = "LME4", personalProtection = TRUE, cfunc = "L")
plotCRT(analysisLME4_L)
library(CRTspat)
analysisLME4_L <- CRTanalysis(example, method = "LME4", personalProtection = TRUE, cfunc = "L")
plotCRT(analysisLME4_L)
analysisLME4_Z <- CRTanalysis(example, method = "LME4", cfunc = "Z")
summary(analysisLME4_Z)
analysisLME4_X <- CRTanalysis(example, method = "LME4", cfunc = "X")
summary(analysisLME4_X)
analysisLME4_P <- CRTanalysis(example, method = "LME4", cfunc = "P")
summary(analysisLME4_P)
analysisLME4_L <- CRTanalysis(example, method = "LME4", cfunc = "L")
summary(analysisLME4_L)
analysisLME4_S <- CRTanalysis(example, method = "LME4", cfunc = "S")
summary(analysisLME4_S)
analysisLME4_R <- CRTanalysis(example, method = "LME4", cfunc = "R")
summary(analysisLME4_R)
p0 <- plotCRT(analysisLME4_Z, map = FALSE)
p1 <- plotCRT(analysisLME4_X, map = FALSE)
p2 <- plotCRT(analysisLME4_P, map = FALSE)
p3 <- plotCRT(analysisLME4_L, map = FALSE)
p4 <- plotCRT(analysisLME4_S, map = FALSE)
p5 <- plotCRT(analysisLME4_R, map = FALSE)
library(cowplot)
plot_grid(p0, p1, p2, p3, p4, p5, labels = c('Z', 'X', 'P', 'L', 'S', 'R'), label_size = 10, ncol = 2)
analysisLME4_X <- CRTanalysis(example, method = "LME4", cfunc = "X")
plot(curve,d)
plot(d,fittedCurve$control_curve)
plot(d,fittedCurve$intervention_curve)
trial <- analysis$trial
link <- analysis$options$link
cfunc <- analysis$options$cfunc
limits <- matrix(x[["controlY"]], nrow = 2, ncol = 2)
if(!is.null(x[["interventionY"]])) {
limits[ ,2] <-  rep(x[["interventionY"]], times = 2)
} else {
limits[ , 2] <- rep(x[["controlY"]], times = 2)
}
library(CRTspat)
analysisLME4_X <- CRTanalysis(example, method = "LME4", cfunc = "X")
limits
par0 <- c(link_tr(link, limits[1, 1]),
link_tr(link, limits[1, 2]) - link_tr(link, limits[1, 1]),
contamination_par)
par1 <- c(
link_tr(link, limits[2, 1]),
link_tr(link, limits[2, 2]) - link_tr(link, limits[2, 1]),
contamination_par
)
# trap extreme cases with undefined, flat or very steep curves
if (!identical(cfunc, "R")) {
if (is.null(contamination_par)) {
cfunc <- "X"
} else if (is.na(contamination_par) |
contamination_par < 0.01 |
contamination_par > 100  |
(abs(pars[1] - pars[2]) > 10000)) {
cfunc <- "X"
}
}
par0
par1
if (is.null(contamination_par)) {
cfunc <- "X"
} else if (is.na(contamination_par) |
contamination_par < 0.01 |
contamination_par > 100  |
(abs(pars[1] - pars[2]) > 10000)) {
cfunc <- "X"
}
FUN1 <- get_FUN(cfunc, variant = 1)
intervention_curve <- invlink(link, FUN1(trial = data.frame(measure = d), par = par1))
control_curve <- invlink(link, FUN1(trial = data.frame(measure = d), par = par0))
plot(intervention_curve)
plot(control_curve)
library(CRTspat)
analysisLME4_X <- CRTanalysis(example, method = "LME4", cfunc = "X")
analysisLME4_X <- CRTanalysis(example, method = "LME4", cfunc = "X")
plotCRT(analysisLME4_X)
plotCRT(analysisLME4_X)
trial$measure
analysisLME4_X <- CRTanalysis(example, method = "LME4", cfunc = "X")
min(trial$measure)
analysisLME4_X <- CRTanalysis(example, method = "LME4", cfunc = "X")
library(CRTspat)
analysisLME4_X <- CRTanalysis(example, method = "LME4", cfunc = "X")
plotCRT(analysisLME4_X)
example$trial$nearestDiscord <- NULL
analysisLME4_X <- CRTanalysis(example, method = "LME4", cfunc = "X")
plotCRT(analysisLME4_X)
summary(analysisLME4_X)
analysisLME4_Z <- CRTanalysis(example, method = "LME4", cfunc = "Z")
summary(analysisLME4_Z)
analysisLME4_X <- CRTanalysis(example, method = "LME4", cfunc = "X")
summary(analysisLME4_X)
analysisLME4_P <- CRTanalysis(example, method = "LME4", cfunc = "P")
summary(analysisLME4_P)
analysisLME4_L <- CRTanalysis(example, method = "LME4", cfunc = "L")
summary(analysisLME4_L)
analysisLME4_S <- CRTanalysis(example, method = "LME4", cfunc = "S")
summary(analysisLME4_S)
analysisLME4_R <- CRTanalysis(example, method = "LME4", cfunc = "R")
summary(analysisLME4_R)
p0 <- plotCRT(analysisLME4_Z, map = FALSE)
p1 <- plotCRT(analysisLME4_X, map = FALSE)
p2 <- plotCRT(analysisLME4_P, map = FALSE)
p3 <- plotCRT(analysisLME4_L, map = FALSE)
p4 <- plotCRT(analysisLME4_S, map = FALSE)
p5 <- plotCRT(analysisLME4_R, map = FALSE)
library(cowplot)
plot_grid(p0, p1, p2, p3, p4, p5, labels = c('Z', 'X', 'P', 'L', 'S', 'R'), label_size = 10, ncol = 2)
