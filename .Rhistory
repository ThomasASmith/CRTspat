return(value)
}
apply(k_vec, 1, fun = CRTscenario, CRT = example_aggregated, buffer.width = 0.2)
lapply(k_vec, fun = CRTscenario, CRT = example_aggregated, buffer.width = 0.2)
lapply(k_vec, CRTscenario, CRT = example_aggregated, buffer.width = 0.2)
df <- lapply(k_vec, CRTscenario, CRT = example_aggregated, buffer.width = 0.2)
df <- invisible(lapply(k_vec, CRTscenario, CRT = example_aggregated, buffer.width = 0.2))
library(CRTspat)
source("~/.active-rstudio-document")
# Plot map of locations
plot(example_aggregated, map = TRUE, showLocations = TRUE, maskbuffer = 0.5)
source("~/.active-rstudio-document")
plot(example_clustered, map = TRUE, showClusterLabels = TRUE, maskbuffer = 0.5)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
plot(example_randomized, map = TRUE, maskbuffer=0.5, legend.position=c(0.2,0.8))
example_locations <- readdata("example_baseline.csv")
example_locations$base_denom <- 1
example <- latlong_as_xy(example_locations) %>%
aggregate(auxiliaries = c("RDT_test_result", "base_denom"))
library(dplyr)
example_locations <- readdata("example_baseline.csv")
example_locations$base_denom <- 1
example <- latlong_as_xy(example_locations) %>%
aggregate(auxiliaries = c("RDT_test_result", "base_denom"))
summary(example)
library(ggplot2)
set.seed(7)
example6 <- specify.clusters(example, k = 6, algo = "kmeans") %>%
randomizeCRT() %>%
specify.buffer(buffer.width = 0.5)
plot(example6, map = TRUE, showClusterBoundaries = TRUE, showClusterLabels = TRUE)
example40 <- specify.clusters(example, k = 40, algo = "kmeans") %>%
randomizeCRT() %>%
specify.buffer(buffer.width = 0.5)
plot(example40, map = TRUE, showClusterBoundaries = TRUE, showClusterLabels = TRUE,
labelsize = 2)
devtools::document()
library(CRTspat)
library(CRTspat)
knitr::opts_chunk$set(error=FALSE)
knitr::knit("vignettes/CRTspat.Rmd.orig", output = "vignettes/CRTspat.Rmd")
knitr::knit("vignettes/Usecase1.Rmd.orig", output = "vignettes/Usecase1.Rmd")
knitr::knit("vignettes/Usecase4.Rmd.orig", output = "vignettes/Usecase4.Rmd")
rmarkdown.html_vignette.check_title = FALSE
devtools::install(build_vignettes = TRUE)
# to build package website
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
devtools::install(build_vignettes = TRUE)
library(CRTspat)
knitr::opts_chunk$set(error=FALSE)
rmarkdown.html_vignette.check_title = FALSE
devtools::install(build_vignettes = TRUE)
library(CRTspat)
library(CRTspat)
rmarkdown.html_vignette.check_title = FALSE
devtools::install(build_vignettes = TRUE)
# to build package website
usethis::use_pkgdown()
pkgdown::build_site()
library(CRTspat)
source("~/.active-rstudio-document")
# use the same dataset as for Use Case 1.
library(CRTspat)
example_locations <- readdata("example_baseline.csv")
example_locations$base_denom <- 1
library(dplyr)
example <- latlong_as_xy(example_locations) %>%
aggregate(auxiliaries = c("RDT_test_result", "base_denom"))
summary(example)
# randomly sample an array of numbers of clusters
set.seed(5)
k_vec <- round(runif(20, min = 6, max = 150))
CRTscenario3 <- function(k, CRT) {
ex <- specify.clusters(CRT, k = k, algo = "kmeans") %>%
randomizeCRT()
sink(file = "output.log", type = "output")
GEEanalysis <- CRTanalysis(ex, method = "GEE", baselineOnly = TRUE, excludeBuffer = FALSE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom")
sink()
locations <- GEEanalysis$description$locations
ICC <- GEEanalysis$pt.ests$ICC
value <- c(k = k, ICC = ICC, mean_h = locations/k)
return(value)
}
results <- t(sapply(k_vec, FUN = CRTscenario3, simplify = "array", CRT = example) %>%
library(ggplot2)
)
results <- t(sapply(k_vec, FUN = CRTscenario3, simplify = "array", CRT = example) %>% data.frame()
results <- t(sapply(k_vec, FUN = CRTscenario3, simplify = "array", CRT = example)) %>% data.frame()
results <- t(sapply(k_vec, FUN = CRTscenario3, simplify = "array", CRT = example)) %>% data.frame()
library(ggplot2)
theme_set(theme_bw(base_size = 14))
ggplot(data = results, aes(x = mean_h, y = ICC)) + geom_smooth() + xlab("Mean locations per cluster") +
ylab("Intracluster correlation")
source("~/.active-rstudio-document")
ggplot(data = results, aes(x = mean_h, y = ICC)) + geom_smooth() + xlab("Mean locations per cluster") +
ylab("Intracluster correlation")
source("~/.active-rstudio-document")
library(ggplot2)
theme_set(theme_bw(base_size = 14))
ggplot(data = results, aes(x = mean_h, y = ICC)) + geom_smooth() + xlab("Mean locations per cluster") +
ylab("Intracluster correlation")
ggplot(data = results[results$mean_h > 5,], aes(x = mean_h, y = ICC)) + geom_smooth() + xlab("Mean locations per cluster") +
ylab("Intracluster correlation")
theme_set(theme_bw(base_size = 14))
ggplot(data = results[results$mean_h > 10,], aes(x = mean_h, y = ICC)) + geom_smooth() + xlab("Mean locations per cluster") +
ylab("Intracluster correlation")
ggplot(data = results, aes(x = mean_h, y = ICC)) + geom_smooth() + xlab("Mean locations per cluster") +
ylab("Intracluster correlation")
ggplot(data = results, aes(x = mean_h, y = ICC)) + geom_smooth() + xlab("Mean locations per cluster") +
ylab("Intracluster correlation") + ylim(0.05, 0.20)
ggplot(data = results, aes(x = mean_h, y = ICC)) + geom_smooth() + xlab("Mean locations per cluster") +
ylab("Intracluster correlation") + ylim(0.1, 0.16)
ggplot(data = results, aes(x = mean_h, y = ICC)) + geom_smooth() + xlab("Mean locations per cluster") +
ylab("Intracluster correlation") + ylim(0.1, 0.15) + xlim(10, 600)
ggplot(data = results, aes(x = mean_h, y = ICC)) + geom_smooth() + xlab("Mean locations per cluster") +
ylab("Intracluster correlation") + ylim(0.08, 0.15) + xlim(10, 600)
View(results)
write.csv(results, file = "C:/git_repos/trialdesign/vignette_data/vignette3.csv")
library(CRTspat)
knitr::knit("vignettes/Usecase3.Rmd.orig", output = "vignettes/Usecase3.Rmd")
knitr::knit("vignettes/Usecase4.Rmd.orig", output = "vignettes/Usecase4.Rmd")
rmarkdown.html_vignette.check_title = FALSE
devtools::install(build_vignettes = TRUE)
# to build package website
usethis::use_pkgdown()
pkgdown::build_site()
knitr::knit("vignettes/Usecase1.Rmd.orig", output = "vignettes/Usecase1.Rmd")
rmarkdown.html_vignette.check_title = FALSE
devtools::install(build_vignettes = TRUE)
library(CRTspat)
rmarkdown.html_vignette.check_title = FALSE
devtools::install(build_vignettes = TRUE)
# to build package website
usethis::use_pkgdown()
pkgdown::build_site()
library(CRTspat)
knitr::opts_chunk$set(error=FALSE)
knitr::knit("vignettes/CRTspat.Rmd.orig", output = "vignettes/CRTspat.Rmd")
knitr::knit("vignettes/Usecase1.Rmd.orig", output = "vignettes/Usecase1.Rmd")
knitr::knit("vignettes/Usecase2.Rmd.orig", output = "vignettes/Usecase2.Rmd")
knitr::knit("vignettes/Usecase3.Rmd.orig", output = "vignettes/Usecase3.Rmd")
knitr::knit("vignettes/Usecase4.Rmd.orig", output = "vignettes/Usecase4.Rmd")
rmarkdown.html_vignette.check_title = FALSE
devtools::install(build_vignettes = TRUE)
# to build package website
usethis::use_pkgdown()
pkgdown::build_site()
library(CRTspat)
library(CRTspat)
? dplyr::across
library(CRTspat)
inla_mesh <- readdata("testmesh100.txt")
analysis <- CRTanalysis(trial=CRT,
method = 'INLA', link='logit', cfunc='P',
localisedEffects = TRUE, clusterEffects= TRUE,
requireMesh = FALSE, inla_mesh = inla_mesh)
plot(analysis)
analysis <- CRTanalysis(trial=CRT,
method = 'INLA', link='logit', cfunc='P',
localisedEffects = TRUE, clusterEffects= TRUE,
requireMesh = FALSE, inla_mesh = inla_mesh)
analysis <- CRTanalysis(trial=CRT,
method = 'INLA', link='logit', cfunc='P',
localisedEffects = TRUE, clusterEffects= TRUE,
requireMesh = TRUE, inla.mesh = inla_mesh)
CRT <- readdata("testCRT.csv")
inla_mesh <- readdata("testmesh100.txt")
analysis <- CRTanalysis(trial=CRT,
method = 'INLA', link='logit', cfunc='P',
localisedEffects = TRUE, clusterEffects= TRUE,
requireMesh = TRUE, inla.mesh = inla_mesh)
inla_mesh <- readdata("testmesh100.txt")
library(Matrix)
inla_mesh <- readdata("testmesh100.txt")
analysis <- CRTanalysis(trial=CRT,
method = 'INLA', link='logit', cfunc='P',
localisedEffects = TRUE, clusterEffects= TRUE,
requireMesh = TRUE, inla.mesh = inla_mesh)
plot(analysis)
plot(analysis, map=TRUE)
plot(analysis, map=TRUE, fill = 'prediction')
analysis$method
summary(analysis)
library(CRTspat)
library(CRTspat)
plot(analysis, map=TRUE, fill = 'prediction')
mesh <- new_mesh(trial = CRT, pixel = 0.1)
analysis <- CRTanalysis(trial=CRT,
method = 'INLA', link='logit', cfunc='P',
localisedEffects = TRUE, clusterEffects= TRUE,
requireMesh = TRUE, inla.mesh = mesh)
plot(analysis, map=TRUE, fill = 'prediction')
analysis <- CRTanalysis(trial=CRT,
method = 'INLA', link='logit', cfunc='P',
spatialEffects= TRUE,
requireMesh = TRUE, inla.mesh = mesh)
library(CRTspat)
example_locations <- readdata("example_baseline.csv")
View(example_aggregated)
library(CRTspat)
example_locations <- readdata("example_baseline.csv")
example_locations$base_denom <- 1
library(dplyr)
example <- latlong_as_xy(example_locations) %>%
aggregate(auxiliaries = c("RDT_test_result", "base_denom"))
summary(example)
analysis <- CRTanalysis(trial=CRT,
method = 'INLA', link='logit', baselineOnly = TRUE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom",
clusterEffects = FALSE, spatialEffects = TRUE,
requireMesh = TRUE, inla.mesh = mesh)
analysis <- CRTanalysis(trial=CRT,
method = 'INLA', link='logit', baselineOnly = TRUE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom",
clusterEffects = FALSE, spatialEffects = TRUE,
requireMesh = TRUE, inla.mesh = mesh)
analysis <- CRTanalysis(trial=CRT,
method = 'INLA', link='logit', baselineOnly = TRUE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom",
clusterEffects = FALSE, spatialEffects = TRUE,
requireMesh = TRUE, inla.mesh = mesh)
trial[[baselineNumerator]]
trial[[baselineDenominator]]
trial[[baselineNumerator]]
trial$RDT_test_result
analysis <- CRTanalysis(trial=example,
method = 'INLA', link='logit', baselineOnly = TRUE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom",
clusterEffects = FALSE, spatialEffects = TRUE,
requireMesh = TRUE, inla.mesh = mesh)
analysis <- CRTanalysis(trial=example,
method = 'INLA', link='logit', baselineOnly = TRUE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom",
clusterEffects = FALSE, spatialEffects = TRUE,
requireMesh = TRUE, inla.mesh = mesh)
analysis <- CRTanalysis(trial=example,
method = 'INLA', link='logit', baselineOnly = TRUE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom",
clusterEffects = FALSE, spatialEffects = TRUE,
requireMesh = TRUE, inla.mesh = mesh)
View(trial)
library(CRTspat)
analysis <- CRTanalysis(trial=example,
method = 'INLA', link='logit', baselineOnly = TRUE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom",
clusterEffects = FALSE, spatialEffects = TRUE,
requireMesh = TRUE, inla.mesh = mesh)
analysis <- CRTanalysis(trial=example,
method = 'INLA', link='logit', baselineOnly = TRUE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom",
clusterEffects = FALSE, spatialEffects = TRUE,
requireMesh = TRUE, inla.mesh = mesh)
analysis <- CRTanalysis(trial=example,
method = 'INLA', link='logit', baselineOnly = TRUE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom",
clusterEffects = FALSE, spatialEffects = TRUE,
requireMesh = TRUE, inla.mesh = mesh)
formula()
formula
fterms
"b1" %in% fterms
"b0" %in% fterms
spde <- inla.mesh$spde
df = data.frame(
b0 = rep(1, nrow(trial)),
id = trial$id)
if ("b1" %in% fterms) df$b1 = ifelse(trial$arm == "intervention", 1, 0)
if ("cluster" %in% fterms) df$cluster = trial$cluster
effectse <- list(df = df, s = inla.mesh$indexs)
dfp = data.frame(
b0 = rep(1, nrow(inla.mesh$prediction)),
id = inla.mesh$prediction$id)
if ("b1" %in% fterms) dfp$b1 = ifelse(inla.mesh$prediction$arm == "intervention", 1, 0)
if ("cluster" %in% fterms) dfp$cluster = inla.mesh$prediction$cluster
effectsp <- list(df = dfp, s = inla.mesh$indexs)
lc <- NULL
beta <- NA
if (cfunc %in% c("L", "P"))
{
if (identical(Sys.getenv("TESTTHAT"), "true")) {
beta <- 2.0
} else {
cat("Estimating scale parameter for contamination range", "\n")
beta <- stats::optimize(
f = estimateContamination, interval = c(-10, 10),
trial = trial, FUN = FUN, inla.mesh = inla.mesh, formula = formula,
tol = 0.1, link = link)$minimum
}
x <- trial$nearestDiscord * exp(beta)
trial$pvar <- eval(parse(text = FUN))
effectse$df$pvar <- trial$pvar
x <- inla.mesh$prediction$nearestDiscord * exp(beta)
inla.mesh$prediction$pvar <- eval(parse(text = FUN))
effectsp$df$pvar <- inla.mesh$prediction$pvar
# set up linear contrasts (not required for cfunc='X' or 'Z')
if (grepl("pvar", options$ftext, fixed = TRUE))
{
lc <- INLA::inla.make.lincomb(b0 = 1, pvar = 1)
if (grepl("b1", options$ftext, fixed = TRUE))
{
lc <- INLA::inla.make.lincomb(b0 = 1, pvar = 1, b1 = 1)
}
} else if (grepl("b1", options$ftext, fixed = TRUE))
{
lc <- INLA::inla.make.lincomb(b0 = 1, b1 = 1)
}
}
# stack for estimation stk.e
stk.e <- INLA::inla.stack(
tag = "est", data = list(y1 = trial$y1, y_off = trial$y_off),
A = list(1, A = inla.mesh$A),
effects = effectse
)
library(CRTspat)
"f(cluster, model = \"iid\")"
library(CRTspat)
mesh <- new_mesh(trial = example, pixel = 0.1)
mesh100 <- new_mesh(trial = example, pixel = 0.1)
mesh100 <- new_mesh(trial = example, pixel = 0.1)
mesh100 <- new_mesh(trial = example, pixel = 0.1)
idP <- trial$id[nearestNeighbour]
library(CRTspat)
mesh100 <- new_mesh(trial = example, pixel = 0.1)
mesh100 <- new_mesh(trial = example, pixel = 0.1)
mesh100 <- new_mesh(trial = example, pixel = 0.1)
# create buffer around area of points
trial.coords <- base::matrix(
c(trial$x, trial$y),
ncol = 2
)
tr <- sf::st_as_sf(trial, coords = c("x","y"))
buf1 <- sf::st_buffer(tr, maskbuffer)
buf2 <- sf::st_union(buf1)
library(CRTspat)
mesh100 <- new_mesh(trial = example, pixel = 0.1)
warnings()
library(CRTspat)
mesh100 <- new_mesh(trial = example, pixel = 0.1)
analysis <- CRTanalysis(trial=example,
method = 'INLA', link='logit', baselineOnly = TRUE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom",
clusterEffects = FALSE, spatialEffects = TRUE,
requireMesh = TRUE, inla.mesh = mesh100)
plot(analysis, fill='prediction')
plot(analysis, fill='predictions')
rlang::last_error()
plot(analysis, map= TRUE, fill='predictions')
library(CRTspat)
plot(analysis, map= TRUE, fill='predictions')
plot(analysis, map= TRUE, fill='prediction')
plot(analysis)
analysis$contamination$contamination.limits
View(analysis)
View(analysis)
example_locations <- readdata('example_baseline.csv')
ex <- anonymize.site(example_locations)
example_xy <- latlong_as_xy(example_locations)
summary(example_xy)
anonymize.site(example_locations)
anonymize.site(example_locations)
anonymize.site(examplexy)
anonymize.site(example_xy)
transformedTestlocations <- anonymize.site(trial =  readdata("testCRT.csv"))
transformedTestlocations <- anonymize.site(trial =  readdata("testCRT.csv"))
example_trial <- anonymize.site(example_xy)
write.csv(example_trial,row.names=FALSE,file = 'inst/extdata/example.trial.csv')
write.csv(example_trial$trial,row.names=FALSE,file = 'inst/extdata/example.trial.csv')
plot(example_trial)
plot(example_trial, map = TRUE)
plot(example_trial)
write.csv(example_trial$trial,row.names=FALSE,file = 'inst/extdata/example.trial.csv')
set.seed(1234)
example_trial <- anonymize.site(example_xy)
write.csv(example_trial$trial,row.names=FALSE,file = 'inst/extdata/example.trial.csv')
write.csv(example_trial$trial,row.names=FALSE,file = 'inst/extdata/example.site.csv')
transformedTestlocations <- anonymize.site(trial =  readdata("example.site.csv"))
write.csv(example_trial$trial,row.names=FALSE,file = 'inst/extdata/example.site.csv')
write.csv(example_trial$trial,row.names=FALSE,file = 'inst/extdata/example_site.csv')
library(CRTspat)
example_locations <- readdata('example_site.csv')
# assign the denominator to the baseline data
example_locations$base_denom <- 1
# convert to Euclidean coordinates
example_xy <- latlong_as_xy(example_locations)
junk <- readdata("Solarmal_baseline.csv")
trial <- junk$trial
trial$dummy <- runif(0,8)
head(trial)
head(junk)
junk$RDT_test_result <- NULL
trial$dummy <- runif(0,8)
trial <- trial[seq(1:50),]
junk$dummy <- runif(0,8)
junk <- junk[seq(1:50),]
junk$dummy <- runif(50,0,8)
junk
write.csv(junk,row.names=FALSE,file = 'inst/extdata/testlatlong.csv')
# Aggregate data for multiple observations for the same location Only the (x,y) co-ordinates and numerical
# auxiliary variables
example_aggregated <- aggregate(example_locations, auxiliaries = c("RDT_test_result", "base_denom"))
# assign the denominator to the baseline data
example_locations$base_denom <- 1
# Aggregate data for multiple observations for the same location Only the (x,y) co-ordinates and numerical
# auxiliary variables
example_aggregated <- aggregate(example_locations, auxiliaries = c("RDT_test_result", "base_denom"))
class(example_locations)
example_locations <- readdata('example_site.csv')
# assign the denominator to the baseline data
example_locations$base_denom <- 1
# Aggregate data for multiple observations for the same location Only the (x,y) co-ordinates and numerical
# auxiliary variables
example_aggregated <- aggregate(example_locations, auxiliaries = c("RDT_test_result", "base_denom"))
# convert to a `CRTspat` object
exampleCRT <- as_CRTspat(example_locations)
# Aggregate data for multiple observations for the same location Only the (x,y) co-ordinates and numerical
# auxiliary variables
example_aggregated <- aggregate(exampleCRT, auxiliaries = c("RDT_test_result", "base_denom"))
# convert to a `CRTspat` object
exampleCRT <- as_CRTspat(example_locations)
summary(exampleCRT)
# Aggregate data for multiple observations for the same location Only the (x,y) co-ordinates and numerical
# auxiliary variables
example_aggregated <- aggregate(exampleCRT, auxiliaries = c("RDT_test_result", "base_denom"))
# convert to a `CRTspat` object
exampleCRT <- as_CRTspat(example_locations)
summary(exampleCRT)
# Aggregate data for multiple observations for the same location Only the (x,y) co-ordinates and numerical
# auxiliary variables
example_aggregated <- aggregate(exampleCRT, auxiliaries = c("RDT_test_result", "base_denom"))
summary(example_aggregated)
# Plot map of locations
plot(example_aggregated, map = TRUE, showLocations = TRUE, maskbuffer = 0.5)
example_locations <- readdata('example_site.csv')
# assign the denominator to the baseline data
example_locations$base_denom <- 1
# convert to a `CRTspat` object
exampleCRT <- as_CRTspat(example_locations)
summary(exampleCRT)
# Aggregate data for multiple observations for the same location Only the (x,y) co-ordinates and numerical
# auxiliary variables
example_aggregated <- aggregate(exampleCRT, auxiliaries = c("RDT_test_result", "base_denom"))
summary(example_aggregated)
# Plot map of locations
plot(example_aggregated, map = TRUE, showLocations = TRUE, maskbuffer = 0.5)
write.csv(transformedlocations$trial,row.names=FALSE,file = 'inst/extdata/example.site.csv')
write.csv(transformedTestlocations$trial,row.names=FALSE,file = 'inst/extdata/example_site.csv')
set.seed(1234)
transformedTestlocations <- anonymize.site(trial =  readdata("Solarmal_baseline.csv"))
write.csv(transformedTestlocations$trial,row.names=FALSE,file = 'inst/extdata/example.site.csv')
example_locations <- readdata('example_site.csv')
# assign the denominator to the baseline data
example_locations$base_denom <- 1
# convert to a `CRTspat` object
exampleCRT <- as_CRTspat(example_locations)
summary(exampleCRT)
# Aggregate data for multiple observations for the same location Only the (x,y) co-ordinates and numerical
# auxiliary variables
example_aggregated <- aggregate(exampleCRT, auxiliaries = c("RDT_test_result", "base_denom"))
summary(example_aggregated)
# Plot map of locations
plot(example_aggregated, map = TRUE, showLocations = TRUE, maskbuffer = 0.5)
library(CRTspat)
example_locations <- readdata('example_site.csv')
# assign the denominator to the baseline data
example_locations$base_denom <- 1
# convert to a `CRTspat` object
exampleCRT <- as_CRTspat(example_locations)
summary(exampleCRT)
# Aggregate data for multiple observations for the same location Only the (x,y) co-ordinates and numerical
# auxiliary variables
example_aggregated <- aggregate(exampleCRT, auxiliaries = c("RDT_test_result", "base_denom"))
summary(example_aggregated)
# Plot map of locations
plot(example_aggregated, map = TRUE, showLocations = TRUE, maskbuffer = 0.5)
# Plot map of locations
plot(exampleCRT, map = TRUE, showLocations = TRUE, maskbuffer = 0.5)
set.seed(1234)
transformedTestlocations <- anonymize.site(trial =  readdata("Solarmal_baseline.csv"))
write.csv(transformedTestlocations$trial,row.names=FALSE,file = 'inst/extdata/example_site.csv')
example_locations <- readdata('example_site.csv')
# assign the denominator to the baseline data
example_locations$base_denom <- 1
# convert to a `CRTspat` object
exampleCRT <- as_CRTspat(example_locations)
summary(exampleCRT)
# Aggregate data for multiple observations for the same location Only the (x,y) co-ordinates and numerical
# auxiliary variables
example_aggregated <- aggregate(exampleCRT, auxiliaries = c("RDT_test_result", "base_denom"))
summary(example_aggregated)
# Plot map of locations
plot(exampleCRT, map = TRUE, showLocations = TRUE, maskbuffer = 0.5)
library(CRTspat)
example_locations <- readdata('example_site.csv')
# assign the denominator to the baseline data
example_locations$base_denom <- 1
# convert to a `CRTspat` object
exampleCRT <- as_CRTspat(example_locations)
summary(exampleCRT)
# Aggregate data for multiple observations for the same location Only the (x,y) co-ordinates and numerical
# auxiliary variables
example_aggregated <- aggregate(exampleCRT, auxiliaries = c("RDT_test_result", "base_denom"))
summary(example_aggregated)
# Plot map of locations
plot(exampleCRT, map = TRUE, showLocations = TRUE, maskbuffer = 0.5)
example_locations <- readdata('example_site.csv')
# assign the denominator to the baseline data
example_locations$base_denom <- 1
library(CRTspat)
