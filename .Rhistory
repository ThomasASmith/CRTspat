baselineanalysis <- CRTanalysis(trial=example_clustered,
method = 'INLA', link='logit', baselineOnly = TRUE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom",
clusterEffects = FALSE, spatialEffects = TRUE,
requireMesh = TRUE, inla_mesh = examplemesh100)
inla_mesh$measure
analysis$options$measure
library(CRTspat)
baselineanalysis <- CRTanalysis(trial=example_clustered,
method = 'INLA', link='logit', baselineOnly = TRUE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom",
clusterEffects = FALSE, spatialEffects = TRUE,
requireMesh = TRUE, inla_mesh = examplemesh100)
trial[["rabbit"]]
trial$rabbit
library(CRTspat)
baselineanalysis <- CRTanalysis(trial=example_clustered,
method = 'INLA', link='logit', baselineOnly = TRUE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom",
clusterEffects = FALSE, spatialEffects = TRUE,
requireMesh = TRUE, inla_mesh = examplemesh100)
baselineanalysis <- CRTanalysis(trial=example_clustered,
method = 'INLA', link='logit', baselineOnly = TRUE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom",
clusterEffects = FALSE, spatialEffects = TRUE,
requireMesh = TRUE, inla_mesh = examplemesh100)
inla_mesh$measure
analysis$options$measure
baselineanalysis <- CRTanalysis(trial=example_clustered,
method = 'INLA', link='logit', baselineOnly = TRUE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom",
clusterEffects = FALSE, spatialEffects = TRUE,
requireMesh = TRUE, inla_mesh = examplemesh100)
baselineanalysis <- CRTanalysis(trial=example_clustered,
method = 'INLA', link='logit', baselineOnly = TRUE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom",
clusterEffects = FALSE, spatialEffects = TRUE,
requireMesh = TRUE, inla_mesh = examplemesh100)
baselineanalysis <- CRTanalysis(trial=example_clustered,
method = 'INLA', link='logit', baselineOnly = TRUE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom",
clusterEffects = FALSE, spatialEffects = TRUE,
requireMesh = TRUE, inla_mesh = examplemesh100)
baselineanalysis <- CRTanalysis(trial=example_clustered,
method = 'INLA', link='logit', baselineOnly = TRUE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom",
clusterEffects = FALSE, spatialEffects = TRUE,
requireMesh = TRUE, inla_mesh = examplemesh100)
library(CRTspat)
baselineanalysis <- CRTanalysis(trial=example_clustered,
method = 'INLA', link='logit', baselineOnly = TRUE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom",
clusterEffects = FALSE, spatialEffects = TRUE,
requireMesh = TRUE, inla_mesh = examplemesh100)
source("C:/git_repos/CRTspat/vignettes/runVignette.R")
library(CRTspat)
example <- readdata("exampleCRT.txt")
analysisLME4_Z <- CRTanalysis(example, method = "LME4", cfunc = "Z")
analysisLME4_Z <- CRTanalysis(example, method = "LME4", cfunc = "Z")
control_curve <- intervention_curve <- rep(limits[1],1001)
fittedCurve <- list(d = d, control_curve = control_curve, intervention_curve = intervention_curve,
limits0 = limits0, limits1 = limits1)
source("C:/git_repos/CRTspat/vignettes/runVignette.R")
library(CRTspat)
knitr::knit("vignettes/Usecase5.Rmd.orig", output = "vignettes/Usecase5.Rmd")
source("C:/git_repos/CRTspat/vignettes/runVignette.R")
example <- readdata("exampleCRT.txt")
analysisLME4_Z <- CRTanalysis(example, method = "LME4", cfunc = "Z")
summary(analysisLME4_Z)
analysisLME4_X <- CRTanalysis(example, method = "LME4", cfunc = "X")
summary(analysisLME4_X)
analysisLME4_P <- CRTanalysis(example, method = "LME4", cfunc = "P")
summary(analysisLME4_P)
analysisLME4_L <- CRTanalysis(example, method = "LME4", cfunc = "L")
summary(analysisLME4_L)
analysisLME4_S <- CRTanalysis(example, method = "LME4", cfunc = "S")
summary(analysisLME4_S)
p1 <- plotCRT(analysisLME4_X, map = FALSE)
p2 <- plotCRT(analysisLME4_P, map = FALSE)
p3 <- plotCRT(analysisLME4_L, map = FALSE)
p4 <- plotCRT(analysisLME4_S, map = FALSE)
p1
p2
p2
analysisLME4_P$contamination$contamination_limits
analysisLME4_P$contamination$contamination_limit0
analysisLME4_P$contamination$contamination_limits
analysisLME4_X$contamination$contamination_limits
analysisLME4_L$contamination$contamination_limit0
analysisLME4_X$contamination$contamination_limit0
library(CRTspat)
p1 <- plotCRT(analysisLME4_X, map = FALSE)
p2 <- plotCRT(analysisLME4_P, map = FALSE)
p3 <- plotCRT(analysisLME4_L, map = FALSE)
p4 <- plotCRT(analysisLME4_S, map = FALSE)
library(cowplot)
plot_grid(p1, p2, p3, p4, labels = c('X', 'P', 'L', 'S'), label_size = 12, ncol = 2)
library(CRTspat)
p1 <- plotCRT(analysisLME4_X, map = FALSE)
p2 <- plotCRT(analysisLME4_P, map = FALSE)
p3 <- plotCRT(analysisLME4_L, map = FALSE)
p4 <- plotCRT(analysisLME4_S, map = FALSE)
library(CRTspat)
p1 <- plotCRT(analysisLME4_X, map = FALSE)
plot_grid(p1, p2, p3, p4, labels = c('X', 'P', 'L', 'S'), label_size = 12, ncol = 2)
library(CRTspat)
p1 <- plotCRT(analysisLME4_X, map = FALSE)
p2 <- plotCRT(analysisLME4_P, map = FALSE)
p3 <- plotCRT(analysisLME4_L, map = FALSE)
p4 <- plotCRT(analysisLME4_S, map = FALSE)
plot_grid(p1, p2, p3, p4, labels = c('X', 'P', 'L', 'S'), label_size = 12, ncol = 2)
p3 <- plotCRT(analysisLME4_L, map = FALSE, legend.position = c(0.2,0.2))
plotCRT(analysisLME4_L, map = FALSE, legend.position = c(0.2,0.2))
plotCRT(analysisLME4_L, map = FALSE, legend.position = c(0.1,0.2))
library(CRTspat)
plotCRT(analysisLME4_L, map = FALSE, legend.position = c(0.1,0.2))
plotCRT(analysisLME4_L, map = FALSE, legend.position = NULL)
library(CRTspat)
plotCRT(analysisLME4_L, map = FALSE, legend.position = NULL)
plotCRT(analysisLME4_L, map = FALSE, legend.position = NULL)
library(CRTspat)
plotCRT(example)
library(CRTspat)
plotCRT(example)
plotCRT(example, legend.position = c(0.8,0.8))
source("C:/git_repos/CRTspat/vignettes/runVignette.R")
library(CRTspat)
example <- readdata("exampleCRT.txt")
analysisLME4_Z <- CRTanalysis(example, method = "LME4", cfunc = "Z")
summary(analysisLME4_Z)
analysisLME4_X <- CRTanalysis(example, method = "LME4", cfunc = "X")
summary(analysisLME4_X)
analysisLME4_P <- CRTanalysis(example, method = "LME4", cfunc = "P")
summary(analysisLME4_P)
analysisLME4_L <- CRTanalysis(example, method = "LME4", cfunc = "L")
summary(analysisLME4_L)
analysisLME4_S <- CRTanalysis(example, method = "LME4", cfunc = "S")
summary(analysisLME4_S)
p1 <- plotCRT(analysisLME4_X, map = FALSE)
p2 <- plotCRT(analysisLME4_P, map = FALSE)
p3 <- plotCRT(analysisLME4_L, map = FALSE)
p4 <- plotCRT(analysisLME4_S, map = FALSE)
library(cowplot)
plot_grid(p1, p2, p3, p4, labels = c('X', 'P', 'L', 'S'), label_size = 12, ncol = 2)
library(CRTspat)
plotCRT(example, legend.position = c(0.8,0.8))
plotCRT(example, measure = "hdep", legend.position = c(0.8,0.8))
example_hdep <- calculate_distance(example, measure = "hdep")
example_hdep <- compute_distance(example, measure = "hdep")
plotCRT(example_hep, measure = "hdep", legend.position = c(0.8,0.8))
plotCRT(example_hdep, measure = "hdep", legend.position = c(0.8,0.8))
with(example_hdep, plot(nearestDiscord, hdep)
)
example_hdep <- compute_distance(example_hep, measure = "nearestDiscord")
example_hdep <- compute_distance(example_hdep, measure = "nearestDiscord")
with(example_hdep, plot(nearestDiscord, hdep)
)
with(example_hdep$trial, plot(nearestDiscord, hdep)
)
library(CRTspat)
plotCRT(example_hdep, measure = "hdep", legend.position = c(0.8,0.8))
devtools::document()
temp <- tempfile()
download.file("https://onlinelibrary.wiley.com/action/downloadSupplement?doi=10.1111%2Fbiom.13316&file=biom13316-sup-0001-SuppMat.zip",temp)
temp <- tempfile()
download.file("https://onlinelibrary.wiley.com/action/downloadSupplement?doi=10.1111%2Fbiom.13316&file=biom13316-sup-0001-SuppMat.zip",temp)
data <- read.table(unz(temp, "R functions/Trujillo.txt"))
unlink(temp)
trujillo <- read.csv(file =
"C:/Users/smith/Documents/documents/Current Projects/Multerer/biom13316-sup-0001-suppmat/R functions/Trujillo.txt")
View(trujillo)
trujillo <- read.table(file =
"C:/Users/smith/Documents/documents/Current Projects/Multerer/biom13316-sup-0001-suppmat/R functions/Trujillo.txt")
trial <- with(trujillo, data.frame(cluster = CLUSTER, pair = PAIR)
)
trial <- with(trujillo, data.frame(cluster = CLUSTER, pair = PAIR))
table(trujillo$L)
trial$num <- trujillo$y
trial$arm <- ifelse(trujillo$t == 1,'intervention','control')
trial$x <- trujillo$EASTING/mean(trujillo$EASTING)
trial$y <- trujillo$NORTHING/mean(trujillo$NORTHING)
trial$denom <- trujillo$L
head(trial)
trial$y <- (trujillo$NORTHING - mean(trujillo$NORTHING))
trial$x <- trujillo$EASTING - mean(trujillo$EASTING)
trial <- with(trujillo, data.frame(x = EASTING - mean(EASTING), cluster = CLUSTER, pair = PAIR, denom = L,
y = NORTHING - mean(NORTHING)))
trial$num <- trujillo$y
trial$arm <- ifelse(trujillo$t == 1,'intervention','control')
CRT <- CRTsp(trial)
library(CRTspat)
library(CRTspat)
CRT <- CRTsp(trial)
example <- CRTsp(trial)
summary(example)
exampleLME4 <- CRTanalysis(example, method = "LME4", measure = "hdep", cfunc = "R")
plotCRT(exampleLME4, map=F)
exampleLME4 <- CRTanalysis(example, method = "LME4", measure = "hdep", cfunc = "R")
exampleLME4 <- CRTanalysis(example, method = "LME4", measure = "hdep", cfunc = "R")
exampleLME4 <- CRTanalysis(example, method = "LME4", measure = "hdep", cfunc = "R")
exampleLME4 <- CRTanalysis(example, method = "LME4", measure = "hdep", cfunc = "R")
exampleLME4 <- CRTanalysis(example, method = "LME4", measure = "hdep", cfunc = "R")
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "hdep", cfunc = "R")
plotCRT(exampleLME4, map=F)
View(exampleLME4)
summary(exampleLME4)
plotCRT(example, map=F)
example <- compute_distance(trial = trial, measure = "hdep")
plotCRT(example, map=F)
plotCRT(example, measure = 'hdep', map=F)
plot(exampleLME4$contamination$FittedCurve)
with(exampleLME4$contamination$FittedCurve, plot(intervention_curve, d))
with(exampleLME4$contamination$FittedCurve, plot(d, intervention_curve))
example <- compute_distance(trial = example, measure = "nearestDiscord")
View(example)
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "nearestDiscord", cfunc = "P")
plotCRT(exampleLME4, map=F)
with(example$trial,plot(hdep,nearestDiscord))
with(example$trial,plot(nearestDiscord, hdep))
summary(exampleLME4)
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "nearestDiscord", cfunc = "X")
summary(exampleLME4)
plotCRT(exampleLME4, map=F)
plotCRT(exampleLME4, map=F)
plotCRT(exampleLME4, map=F)
library(CRTspat)
plotCRT(exampleLME4, map=F)
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "hdep", cfunc = "R")
plotCRT(exampleLME4, map=F)
plotCRT(exampleLME4, map=F)
plotCRT(exampleLME4, map=F)
quantile(groupvar[trial$arm == "control"],
probs = seq(0.2, 1, by = 0.20)
)
breaks
breaks=c(-Inf, quantile(groupvar[trial$arm == "control"],
probs = seq(0.2, 1, by = 0.20)),
999, quantile(groupvar[trial$arm == "intervention"],
probs = seq(0.2, 1, by = 0.20)))
breaks
unique(breaks)
trial$cat <- cut(
groupvar, breaks=unique(breaks),labels = FALSE)
# categorisation of trial data for plotting
if (identical(grouping, "quintiles")) {
groupvar <- ifelse(trial$arm == "intervention", 1000 + trial$measure, trial$measure)
breaks=c(-Inf, quantile(groupvar[trial$arm == "control"],
probs = seq(0.2, 1, by = 0.20)),
999, quantile(groupvar[trial$arm == "intervention"],
probs = seq(0.2, 1, by = 0.20)))
trial$cat <- cut(
groupvar, breaks=unique(breaks),labels = FALSE)
} else {
range_d <- max(trial[[measure]]) - min(trial[[measure]])
trial$cat <- cut(
trial[[measure]], breaks =
c(-Inf, min(trial[[measure]]) + seq(1:9) * range_d/10, Inf),labels = FALSE)
}
library(CRTspat)
plotCRT(exampleLME4, map=F)
plotCRT(exampleLME4, map=F)
plotCRT(exampleLME4, map=F)
library(CRTspat)
plotCRT(exampleLME4, map=F)
library(CRTspat)
plotCRT(exampleLME4, map=F)
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "hdep", cfunc = "R")
plotCRT(exampleLME4, map=F)
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "nearestDiscord", cfunc = "R")
plotCRT(exampleLME4, map=F)
exampleLME4 <- CRTanalysis(example, method = "LME4", measure = "disc", cfunc = "R")
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "nearestDiscord", cfunc = "P")
plotCRT(exampleLME4, map=F)
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "nearestDiscord", cfunc = "S")
plotCRT(exampleLME4, map=F)
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "nearestDiscord", cfunc = "X")
summary(exampleLME4)
plotCRT(exampleLME4, map=F)
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "sdep", cfunc = "R")
summary(exampleLME4)
plotCRT(exampleLME4, map=F)
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "disc", cfunc = "R")
summary(exampleLME4)
plotCRT(exampleLME4, map=F)
plotCRT(exampleLME4, map=F)
plotCRT(exampleLME4, map=F)
library(CRTspat)
plotCRT(exampleLME4, map=F)
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "disc", cfunc = "R", radius = 0.1)
summary(exampleLME4)
plotCRT(example, measure = disc, map=F)
plotCRT(example, measure = "disc", map=F)
head(example)
example <- compute_distance(example, measure = "disc", radius = 0.1)
head(example$trial)
plotCRT(example, measure = "disc", map=F)
library(CRTspat)
plotCRT(example, measure = "disc", map=F)
library(CRTspat)
plotCRT(example, measure = "disc", map=F)
library(CRTspat)
plotCRT(example, measure = "disc", map=F)
c(rep("control", times = length(breaks0)-1), rep("intervention", times = length(breaks1)-1))
breaks0
library(CRTspat)
plotCRT(example, measure = "disc", map=F)
plotCRT(example, measure = "disc", map=F, legend.position = c(0.8,0.8))
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "disc", cfunc = "R", radius = 0.1)
plotCRT(exampleLME4, map=F)
summary(exampleLME4)
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "disc", personalProtection = TRUE, cfunc = "R", radius = 0.1)
summary(exampleLME4)
exp(5)
exp(-5)
head(example$trial)
example1 <- compute_distance(example,measure = 'disc', radius = exp(log_beta))
log_beta
beta = 0.2
log_beta <- log(beta)
example1 <- compute_distance(example,measure = 'disc', radius = exp(log_beta))
plotCRT(example1)
plotCRT(example1)
plotCRT(example1)
measure
breaks =
c(-Inf, min(trial[[measure]]) + seq(1:9) * range_d/10, Inf)
breaks
length(breaks)
data
data$arm <- c(rep("control", times = length(breaks0)-1), rep("intervention", times = length(breaks1)-1))
library(CRTspat)
plotCRT(example1)
plotCRT(example1, link = 'log')
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "disc")
summary(exampleLME4)
plotCRT(exampleLME4)
library(CRTspat)
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "disc")
summary(exampleLME4)
plotCRT(exampleLME4, map=F)
library(CRTspat)
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "disc")
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "disc")
measure
log_beta
log_beta
n
summary(exampleLME4)
library(CRTspat)
summary(exampleLME4)
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "disc")
updated <- compute_distance(trial, measure = 'disc', radius = exp(-2))
mean(updated$trial$disc)
updated <- compute_distance(trial, measure = 'disc', radius = exp(1))
mean(updated$trial$disc)
updated <- compute_distance(trial, measure = 'disc', radius = exp(0.5))
mean(updated$trial$disc)
updated <- compute_distance(trial, measure = 'disc', radius = exp(0.05))
mean(updated$trial$disc)
updated <- compute_distance(trial, measure = 'disc', radius = exp(-4))
mean(updated$trial$disc)
updated <- compute_distance(trial, measure = 'disc', radius = exp(0.3))
mean(updated$trial$disc)
exp(-5)
exp(5)
log(0.3)
updated <- compute_distance(trial, measure = 'disc', radius = exp(0.3))
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "disc")
mean(trial$pvar)
hist(trial$pvar)
hist(trial$pvar)
name <- function(variables) {
}
parse(text = FUN)
hist(x)
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "disc")
log_beta
mean(trial$pvar)
mean(trial$x)
mean(x)
mean(x)
updated <- compute_distance(trial, measure = 'disc', radius = exp(log_beta))
x <- updated$trial$disc
mean(x)
updated <- compute_distance(trial, measure = 'disc', radius = 0.1)
x <- updated$trial$disc
mean(x)
updated <- compute_distance(trial, measure = 'disc', radius = 10)
x <- updated$trial$disc
mean(x)
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "disc")
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "disc")
devtools::document()
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "disc")
devtools::document()
library(CRTspat)
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "disc")
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "disc")
measure
radius
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "disc")
library(CRTspat)
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "disc")
is.null(trial$disc)
is.null(CRT$design$radius)
CRT$design$radius
radius
radius
CRT$design$radius
CRT$design$radius
radius
identical(CRT$design$radius,radius)
identical(NULL,radius)
CRT$design$radius != radius
library(CRTspat)
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "disc")
CRT$design$radius
NULL
CRT$design$radius
CRT$design$radius
radius
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "disc")
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "disc")
radius
library(CRTspat)
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "disc")
summary(exampleLME4)
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "disc")
summary(exampleLME4)
plotCRT(exampleLME4)
library(CRTspat)
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "disc")
plotCRT(exampleLME4)
summary(exampleLME4)
plotCRT(exampleLME4)
plotCRT(exampleLME4)
interval
analysis$contamination
analysis$contamination$contamination_limit0
analysis$contamination$contamination_limit1
analysis$contamination$contamination_limits
data
plotCRT(exampleLME4)
measure
measure
analysis$options
measure
grouping
hist(trial[["measure"]])
analysis$options$radius
trial <- compute_distance(trial, measure = 'disc', radius = 0.1247433)$trial
hist(trial[["measure"]])
trial <- compute_distance(trial, measure = 'disc', radius = 0.05)$trial
hist(trial[["measure"]])
trial <- compute_distance(trial, measure = 'disc', radius = 2)$trial
hist(trial[["measure"]])
hist(trial[["disc"]])
trial <- compute_distance(trial, measure = 'disc', radius = 0.1247433)$trial
hist(trial[["disc"]])
head(exampleLME4$trial)
library(CRTspat)
exampleLME4 <- CRTanalysis(example, method = "LME4", link = 'log', measure = "disc")
plotCRT(exampleLME4)
plotCRT(exampleLME4, legend.position = c(0.8,0.8))
exampleLME4$options$radius
options(digits = 3)
exampleLME4$options$radius
defaultdigits <- getOption("digits")
getOption("digits")
object <- exampleLME4
cat("Measure of distance or surround: ", switch(object$options$measure,
"nearestDiscord" = "Nearest discordant location \n",
"disc" = paste0("disc of radius ", object$options$radius, " km \n"),
"hdep" = "Tukey's half-depth \n",
"sdep" = "Simplicial depth\n"))
cat("Measure of distance or surround: ", switch(object$options$measure,
"nearestDiscord" = "Nearest discordant location \n",
"disc" = paste0("disc of radius ", round(object$options$radius, digits = 3), " km \n"),
"hdep" = "Tukey's half-depth \n",
"sdep" = "Simplicial depth\n"))
devtools::document()
set.seed(1234)
example_locations <- readdata('example_site.csv')
example_locations$base_denom <- 1
library(dplyr)
example_randomized <- CRTsp(example_locations) %>%
aggregateCRT(auxiliaries = c("RDT_test_result", "base_denom")) %>%
specify_clusters(h = 50, algorithm = 'NN') %>%
randomizeCRT(matchedPair = FALSE)
example2a <- simulateCRT(example_randomized,
effect = 0.8,
outcome0 = 0.5,
generateBaseline = FALSE,
baselineNumerator = "RDT_test_result",
baselineDenominator = "base_denom",
ICC_inp = 0.05, theta_inp = 0.8)
# Reading in the inla.mesh functions when run outside the check but not as part of a check
library(Matrix)
inla_mesh <- readdata("examplemesh100.txt")
analysis <- CRTanalysis(trial=example2a,
method = 'INLA', link='logit', cfunc='P',
personalProtection = TRUE, clusterEffects= TRUE,
requireMesh = TRUE, inla_mesh = inla_mesh)
analysis <- CRTanalysis(trial=example2a,
method = 'INLA', link='logit', cfunc='P',
personalProtection = TRUE, clusterEffects= TRUE,
requireMesh = TRUE, inla_mesh = inla_mesh)
inla_mesh$measure
analysis$options$measure
inla_mesh$radius
analysis$options$radius
library(CRTspat)
