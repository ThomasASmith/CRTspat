df3[[vars1[v]]] <- ifelse(df3$especes == 'Aedes aegypti',
df3[[vars_ae[v]]],
NA)
}
df3 <- df3[df3$trap_func == 1, c(vars0, vars1)]
df3$disseque <- df3$pare + df3$nullipare
alldata <- rbind(df, df3)
alldata$total_femelle <- alldata$total - alldata$male
traps <- distinct(alldata, date, semaine, code, lat, long)
traps <- traps[!is.na(traps$code),]
traps$phase <- as.Date(traps$date,'%d/%m/%Y') > as.Date('20/07/2023','%d/%m/%Y')
aedes <- alldata[alldata$especes == "Aedes aegypti", ]
aedes <- merge(traps, aedes, by=c("date", "semaine", "code", "lat", "long"),
all.x = TRUE)
aedes$total_femelle[is.na(aedes$total_femelle)] <- 0
aedes$especes[is.na( aedes$especes)] <- "Aedes aegypti"
culex <- alldata[alldata$especes == "Culex quinquefasciatus", ]
culex <- merge(traps, culex, by=c("date", "semaine", "code", "lat", "long"),
all.x = TRUE)
culex$total_femelle[is.na(culex$total_femelle)] <- 0
culex$especes[is.na(culex$especes)] <- "Culex quinquefasciatus"
return(list(aedes = aedes, culex = culex))}
stats_by_group <- function(data, groupvar) {
data$groupvar <- data[[groupvar]]
tab <- data %>% group_by(groupvar) %>%
summarize(nobs = sum(!is.na(total_femelle)),
mean = mean(total_femelle),
median = quantile(total_femelle, 0.5),
q1 = quantile(total_femelle, 0.25),
q3 = quantile(total_femelle, 0.75),
ppos = mean(total_femelle > 0))
return(tab)}
# Plot means by trial phase (intervention starts 16/07/2023)
means_by_phase <- function(snis) {
plot <- ggplot(data = snis$aedes, aes(x = as.Date(date,'%d/%m/%Y'), y = total_femelle)) +
geom_smooth(colour = 'red') +
geom_smooth(data = snis$culex, colour = 'blue') +
geom_vline(xintercept = as.Date('20/07/2023','%d/%m/%Y')) +
geom_vline(xintercept = as.Date('20/07/2024','%d/%m/%Y')) +
xlab('Date') +
ylab('Mean females per trap')
return(plot)
}
clustercentroids <- function(pixels) {
# compute the cluster centroids
clusters <- pixels %>%
dplyr::group_by(cluster) %>%
dplyr::summarize(lat = mean(lat), long = mean(long))
clusterCRT <- CRTsp(clusters, geometry = 'point') %>% latlong_as_xy()
}
# plots of spatial assignment to clusters
densityplots <- function(CRT){
densitya <- ggplot() + geom_density(data=CRT$trial, aes(x = nearestPixel), fill = "orange", alpha = 0.5) +
xlab('distance (km)') + xlim(c(0, 0.1))
densityb <- ggplot() +
geom_density(data=CRT$trial, aes(x = distanceAssignedCentroid), fill = "green", alpha = 0.3) +
geom_density(data=CRT$trial, aes(x = distanceClusterCentroid), fill = "blue", alpha = 0.3)+
xlab('distance (km)') + xlim(c(0, 0.5))
densityc <- ggplot() +
geom_density(data=CRT$trial, aes(x = distanceClusterCentroid), fill = "red", alpha = 0.3) +
geom_density(data=pixelCRT$trial, aes(x = distanceClusterCentroid), fill = "blue", alpha = 0.3)+
xlab('distance (km)')  + xlim(c(0, 0.5))
plots <- list(densitya = densitya, densityb=densityb, densityc=densityc)
}
plotmaps <- function(CRT) {
toPlot <- CRT$trial[CRT$trial$Site_étude == 'Anono',]
mapc = plotCRT(toPlot, map = TRUE, fill = "clusters", showLocations = TRUE, maskbuffer = 0.1)
toPlot$cluster <- toPlot$clusterAssigned
mapa = plotCRT(toPlot, map = TRUE, fill = "clusters", showLocations = TRUE, maskbuffer = 0.1)
toPlot <- CRT$trial[CRT$trial$Site_étude == 'Gbagba',]
mapd = plotCRT(toPlot, map = TRUE, fill = "clusters", showLocations = TRUE, maskbuffer = 0.1)
toPlot$cluster <- toPlot$clusterAssigned
mapb = plotCRT(toPlot, map = TRUE, fill = "clusters", showLocations = TRUE, maskbuffer = 0.1)
mapabcd <- plot_grid(mapa, mapb, mapc, mapd, labels = c('A', 'B', 'C', 'D'), label_size = 10, ncol = 2)
result <- list(mapa = mapa, mapb = mapb, mapc = mapc, mapabcd = mapabcd)
return(result)
}
# power analysis
get_power <- function(X, CRT = CRTaggregated,
auxiliary = pixelCRT,
cv_percent = baseline_analysis$description$cv_percent) {
# Coerce inputs to be numeric
X[['effect']] <- ifelse(is.null(X[['effect']]), NULL, as.numeric(X[['effect']]))
X[['spillover_interval']] <- ifelse(is.null(X[['spillover_interval']]), NULL, as.numeric(X[['spillover_interval']]))
X[['buffer_width']] <- ifelse(is.null(X[['buffer_width']]), NULL, as.numeric(X[['buffer_width']]))
cat(X, '\n')
auxiliary$trial$bufferZone <- NULL
hypothrandomization <- randomizeCRT(auxiliary)
CRThypothrandomized <- specify_clusters(CRT, auxiliary = hypothrandomization) %>%
compute_distance(auxiliary = hypothrandomization) %>% specify_buffer(buffer_width = X[['buffer_width']])
denominator <- mean(CRT$trial$base_denom)
yC <- sum(CRT$trial$total_femelle)/sum(CRT$trial$base_denom)
power <-  CRTpower(trial = CRThypothrandomized, desiredPower = 0.8,
effect=X[['effect']], yC=yC, outcome_type = 'e', denominator = denominator,
cv_percent = baseline_analysis$description$cv_percent,
spillover_interval = X[['spillover_interval']],
distance_distribution = X[['distance_distribution']])
if(is.null(power$geom_core$mean_h)) power$geom_core$mean_h <- NA
if(is.null(power$geom_core$power)) power$geom_core$power <- NA
if(is.null(power$geom_core$DE)) power$geom_core$DE <- NA
if(is.null(power$geom_core$clustersRequired)) power$geom_core$clustersRequired <- NA
if(is.null(power$geom_core$contaminate_pop_pr)) power$geom_core$contaminate_pop_pr <- NA
if(is.null(power$geom_core$delta)) power$geom_core$delta <- NA
result <- list(
effect = X[['effect']],
spillover_interval = X[['spillover_interval']],
distance_distribution = X[['distance_distribution']],
buffer_width = X[['buffer_width']],
full_locations = power$geom_full$locations,
full_power = power$geom_full$power,
full_DE = power$geom_full$DE,
full_required = power$geom_full$clustersRequired,
full_contaminate_pop_pr = power$geom_full$contaminate_pop_pr,
full_delta = power$geom_full$delta,
core_locations = power$geom_core$locations,
core_mean_h = power$geom_core$mean_h,
core_power = power$geom_core$power,
core_DE = power$geom_core$DE,
core_required = power$geom_core$clustersRequired,
core_contaminate_pop_pr = power$geom_core$contaminate_pop_pr,
core_delta = power$geom_core$delta)
return(result)}
poweranalysis <- function(CRTaggregated, pixelCRT, baseline_analysis) {
set.seed(1234)
scenarios <- data.frame(spillover_interval = rep(seq(from = 0, to = 1, by = 0.05), each = 10),
effect = rep(c(0.2, 0.3, 0.4, 0.5, 0.6), times = 42),
distance_distribution = rep(c('normal', 'empirical'), times = 105),
buffer_width = rep(c(0), times = 210))
power_list <- apply(scenarios, MARGIN = 1, FUN = get_power)
power <- as.data.frame(do.call(rbind, lapply(power_list, as.data.frame)))
scenarios2 <- data.frame(spillover_interval = rep(rep(seq(from = 0, to = 1, by = 0.1), each = 21), times = 5),
effect = rep(c(0.4), times = 1155),
distance_distribution = rep(c('empirical'), times = 1155),
buffer_width = rep(seq(from = 0, to = 1, by = 0.05), times = 55))
power_list2 <- apply(scenarios2, MARGIN = 1, FUN = get_power)
power2 <- as.data.frame(do.call(rbind, lapply(power_list2, as.data.frame)))
power2$core_locations[power2$buffer_width == 0] <- power2$full_locations[power2$buffer_width == 0]
power2$core_power[power2$buffer_width == 0] <- power2$full_power[power2$buffer_width == 0]
power2$core_delta[power2$buffer_width == 0] <- power2$full_delta[power2$buffer_width == 0]
power2$core_clusters <- power2$core_locations/power2$core_mean_h
power2grouped <- power2 %>% dplyr::group_by(spillover_interval, buffer_width) %>%
dplyr::summarize(
power = mean(core_power),
clusters = mean(core_clusters),
locations = mean(core_locations),
delta = mean(core_delta))
# Plots
# degree of separation in hypothetical randomization
set.seed(567)
hypothrandomization <- randomizeCRT(pixelCRT)
CRThypothrandomized <- specify_clusters(CRT, auxiliary = hypothrandomization) %>% compute_distance(auxiliary = hypothrandomization)
CRThypothrandomized$trial$normalApproximation <- 1065/32 *
dnorm(CRThypothrandomized$trial$nearestDiscord, mean=0, sd = 0.140)
p_histogram <- ggplot(data = CRThypothrandomized$trial, aes(x = nearestDiscord)) +
geom_histogram(colour = 'grey') +
geom_vline(xintercept = 0, linewidth = 1) +
geom_smooth(aes(y = normalApproximation), linewidth = 2, colour = 'red') +
xlab('Distance (km)') +
ylab('Number of locations')
nlocations <-  CRTaggregated$geom_full$locations
proportioncore <- ggplot(data = power2[power2$buffer_width < 0.45, ],
aes(x = as.numeric(buffer_width), y = core_locations/nlocations)) +
geom_smooth(se = FALSE, linewidth = 2) +
geom_smooth(aes(y = (nlocations - core_locations)/nlocations)
, colour = 'red', se = FALSE, linewidth = 2) +
xlab('Distance (km)') +
ylab('Proportion of locations') +
scale_x_continuous(limits = c(0, 0.45))
powerplot <- ggplot(data = power,
aes(x = as.numeric(spillover_interval), y = 100*full_power)) +
geom_smooth(aes(colour = factor(effect)), se = FALSE, linewidth = 1) +
xlab('Spillover interval (km)') +
ylab('Power (%)') +
geom_hline(yintercept = c(80, 90), linewidth = 1) +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(0, 100)) +
guides(colour=guide_legend(title='Efficacy (E)')) +
facet_grid(distance_distribution ~ .)
deltaplot <- ggplot(data = power,
aes(x = as.numeric(spillover_interval), y = full_delta)) +
geom_smooth(aes(colour = factor(effect)), se = FALSE, linewidth = 1) +
xlab('Spillover interval (km)') +
ylab('Bias') +
geom_hline(yintercept = 0, linewidth = 1) +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(-0.5, 0)) +
guides(colour=guide_legend(title='Efficacy (E)')) +
facet_grid(distance_distribution ~ .)
pa <- ggplot(data = power2grouped[power2grouped$spillover_interval %in% c("0", "0.2", "0.4", "0.6", "1"), ],
aes(x = as.numeric(buffer_width), y = delta)) +
geom_smooth(aes(colour = factor(spillover_interval)), se = FALSE,
show.legend = TRUE, linewidth = 1) +
theme(legend.position = 'inside',
legend.position.inside = c(0.65, 0.3)) +
geom_point(data = power2[power2$spillover_interval %in% c("0", "0.2", "0.4", "0.6", "1"), ],
aes(colour = factor(spillover_interval), y = core_delta), show.legend = FALSE) +
xlab('Buffer width') +
ylab('Bias') +
geom_hline(yintercept = c(80, 90), linewidth = 1) +
scale_x_continuous(limits = c(0, 0.4)) +
scale_y_continuous(limits = c(-0.4, 0)) +
guides(colour= guide_legend(title='Spillover interval (km)'))
pb <-  ggplot(data = power2grouped[power2grouped$spillover_interval %in% c("0", "0.2", "0.4", "0.6", "1"), ],
aes(x = as.numeric(buffer_width), y = 100*power)) +
geom_smooth(aes(colour = factor(spillover_interval)), show.legend = FALSE,
se = FALSE, linewidth = 1) +
geom_point(data = power2[power2$spillover_interval %in% c("0", "0.2", "0.4", "0.6", "1"), ],
aes(colour = factor(spillover_interval), y = 100*core_power), show.legend = FALSE) +
xlab('Buffer width') +
ylab('Power (%)') +
geom_hline(yintercept = c(80, 90), linewidth = 1) +
scale_x_continuous(limits = c(0, 0.4)) +
scale_y_continuous(limits = c(0, 100))
pab <- plot_grid(pa, pb, labels = c('A', 'B'), label_size = 10, ncol = 2)
result <- list(power=power, power2=power2, power2grouped=power2grouped,
p_histogram = p_histogram, proportioncore = proportioncore, powerplot = powerplot, deltaplot = deltaplot,
pa = pa, pb = pb, pab = pab)
return(result)}
# dummy assignments
dummyrandomization <- function(seed = 123) {
set.seed(seed)
arm1 <- sample(rep(c('LSM', 'AMT', 'LSM & AMT', 'no int.'), times = 5), size = 20)
arm2 <- sample(rep(c('LSM', 'AMT', 'LSM & AMT', 'no int.'), times = 5), size = 20)
arm <- c(arm1, arm2)
code <- c(seq(101,120), seq(201,220))
randomization <- data.frame(code = code, arm = arm)
return(randomization)}
tabulate_grouped <- function(grouped) {
tab <- grouped %>% summarize(traps = sum(!is.na(total_femelle)),
n_female = sum(total_femelle, na.rm = TRUE),
n_dissected = sum(disseque, na.rm = TRUE),
n_parous = sum(pare, na.rm = TRUE),
n_unfed = sum(a_jeun, na.rm = TRUE),
n_fed = sum(gorge, na.rm = TRUE),
n_semi = sum(semi_gravide, na.rm = TRUE),
n_gravid = sum(gravide, na.rm = TRUE))
tab$trapping_rate <- tab$n_female/tab$traps
tab$parous_rate <- tab$n_parous/tab$n_dissected
tab$n_status <- with(tab, n_unfed + n_fed + n_semi + n_gravid)
tab$p_unfed <- tab$n_unfed/tab$n_status
tab$p_fed <- tab$n_fed/tab$n_status
tab$p_semi <- tab$n_semi/tab$n_status
tab$p_gravid <- tab$n_gravid/tab$n_status
tab <- tab[, !(names(tab) %in% c('n_parous', 'n_unfed', 'n_fed', 'n_semi', 'n_gravid', 'n_status'))]
return(tab)}
compute_efficacy <- function(species = 'aedes', numerator = 'total_femelle', denominator = NULL, int = 'AMT', link = 'log'){
trial <- snis[[species]][!is.na(snis[[species]][[numerator]]),]
if(is.null(denominator)) {
trial$denominator <- 1
} else {
trial$denominator <- trial[[denominator]]
}
trial <- trial[trial$denominator > 0, ]
trial <- with(trial, trial[phase, names(trial) %in% c('lat','long','cluster','arm', numerator, 'denominator')])
trial$arm <- ifelse(grepl(int, trial$arm), 'intervention', 'control')
analysis_object <- CRTsp(trial) %>% latlong_as_xy()
analysis <- CRTanalysis(analysis_object, cfunc = 'X', link = link, numerator = numerator, denominator = 'denominator')
return(summary(analysis))
}
# MAIN SCRIPT
snis <- readSNISdata()
write.csv(rbind(snis$aedes, snis$culex), file = 'SNIS_BGtraps_ts.csv')
# tabulations of basic data
table(snis$aedes$phase)
tab <- table(snis$aedes$code, snis$aedes$phase)
summary(tab[,1])
summary(tab[,2])
stats_by_group(snis$aedes, 'phase')
stats_by_group(snis$culex, 'phase')
stats_by_group(snis$aedes, 'especes')
stats_by_group(snis$culex, 'especes')
# plot map of assigned clusters
snis$aedes$cluster <- snis$aedes$code
# construct the list of all pixels and compute xy coordinates
pixels <- read.csv(file = 'C:/Users/smith/Documents/documents/Current Projects/Mueller/snis.dengue.crt.pixels.csv')
pixels$cluster <- with(pixels, factor(ifelse(site == 'Anono', cluster + 100, cluster + 200)))
pixels <- pixels[order(pixels$cluster),]
clusterCRT <- clustercentroids(pixels)
# Analyse only baseline data (for power analysis)
CRT <- CRTsp(snis$aedes[!snis$aedes$phase, ]) %>%
latlong_as_xy() %>%
compute_distance(distance = "distanceAssigned", auxiliary = clusterCRT)
CRT$trial$distanceAssignedCentroid <- CRT$trial$distanceAssigned
pixelCRT <- CRTsp(pixels, geometry = 'square') %>% latlong_as_xy()
CRT <- compute_distance(CRT, distance = "distanceAssigned", auxiliary = pixelCRT)
# reassign the clusters to match the nearest to the recorded location
CRT$trial$clusterAssigned <- CRT$trial$cluster
CRT$trial$cluster <- NULL
CRT$trial$distanceAssigned0 <- CRT$trial$distanceAssigned
CRT <- specify_clusters(CRT, auxiliary = pixelCRT)
CRT <- compute_distance(CRT, distance = "distanceAssigned", auxiliary = clusterCRT)
names(CRT$trial)[names(CRT$trial) == 'distanceAssigned'] <- 'distanceClusterCentroid'
pixelCRT <- compute_distance(pixelCRT, distance = "distanceAssigned", auxiliary = clusterCRT)
names(pixelCRT$trial)[names(pixelCRT$trial) == 'distanceAssigned'] <- 'distanceClusterCentroid'
# Summaries of distributions
summary(CRT$trial$distanceAssigned0)
summary(CRT$trial$nearestPixel)
summary(CRT$trial$distanceAssignedCentroid)
summary(CRT$trial$distanceClusterCentroid)
summary(pixelCRT$trial$distanceClusterCentroid)
# aggregate records for repeated samples of the same locations
CRT$trial$base_denom <- 1
CRTaggregated <- aggregateCRT(CRT, auxiliaries = c('total_femelle', 'base_denom'))
summary(CRTaggregated)
table(CRTaggregated$trial$cluster)
table(CRTaggregated$trial$clusterAssigned)
# statistics on discrepancies and distances
with(CRT$trial, table(cluster != clusterAssigned))
# Check records with locations > 100m from the nearest pixel
CRT$trial[CRT$trial$nearestPixel > 0.1, ]
# analysis of coefficient of variation
CRTaggregated_assigned_clusters <- CRTaggregated
CRTaggregated_assigned_clusters$trial$cluster <- CRTaggregated_assigned_clusters$trial$clusterAssigned
baseline_analysis_assigned_clusters <- CRTanalysis(CRTaggregated_assigned_clusters, baselineOnly = TRUE, link = 'log', baselineNumerator = 'total_femelle')
summary(baseline_analysis_assigned_clusters)
baseline_analysis <- CRTanalysis(CRTaggregated, baselineOnly = TRUE, link = 'log', baselineNumerator = 'total_femelle')
summary(baseline_analysis)
plots <- list(means_by_phase=means_by_phase(snis))
plots <- c(plots, densityplots(CRT))
plots$densityabc <- with(plots, plot_grid(densitya, densityb, densityc, labels = c('A', 'B', 'C'), label_size = 10, ncol = 1))
library(dplyr)
library(ggplot2)
library(CRTspat)
# FUNCTIONS
readSNISdata <- function() {
vars0 <- c('date','semaine','code', 'lat', 'long', 'especes')
vars1 <- c("male", "gorge", "a_jeun", "semi_gravide", "gravide", "total",
"disseque", "pare", "nullipare")
df <- read.csv(
file = 'C:/Users/smith/Documents/documents/Current Projects/Mueller/Snis_17_06_24_manual_clean_locations.csv')
df$especes[df$especes == "aedes aegypti"] <- "Aedes aegypti"
df <- df[df$etat_pieges == 'Bon', c(vars0, vars1)]
df2 <- read.csv(file =
'C:/Users/smith/Documents/documents/Current Projects/Mueller/FICHE_BG_SENTINELS_SNIS_int_only_cleaned.csv')
df2 <- dplyr::rename(df2, semaine = sem_,
code = code_moust,
lat = gps.Latitude,
long = gps.Longitude)
df3 <- rbind(df2,df2)
df3$especes <- c(rep('Aedes aegypti', times = nrow(df2)),
rep('Culex quinquefasciatus', times = nrow(df2)))
# *********** Check that q2 is females and q1 is males ************
vars_ae <- c("q1ae", "numb_fed", "numb_unfed", "numb_half_gravid", "numb_gravid", "sum_q1ae_q2ae",
"aedes_disseq", "numb_pare", "numb_nullip")
vars_cuq <- c("q1cuq", "numb_fed.2", "numb_unfed.2", "numb_half_gravid.2", "numb_gravid.2", "sum_q1cuq_q2cuq")
for(v in 1:6) {
df3[[vars1[v]]] <- ifelse(df3$especes == 'Aedes aegypti',
df3[[vars_ae[v]]],
df3[[vars_cuq[v]]])
}
for(v in 7:9) {
df3[[vars1[v]]] <- ifelse(df3$especes == 'Aedes aegypti',
df3[[vars_ae[v]]],
NA)
}
df3 <- df3[df3$trap_func == 1, c(vars0, vars1)]
df3$disseque <- df3$pare + df3$nullipare
alldata <- rbind(df, df3)
alldata$total_femelle <- alldata$total - alldata$male
traps <- distinct(alldata, date, semaine, code, lat, long)
traps <- traps[!is.na(traps$code),]
traps$intervention <- as.Date(traps$date,'%d/%m/%Y') > as.Date('20/07/2023','%d/%m/%Y')
aedes <- alldata[alldata$especes == "Aedes aegypti", ]
aedes <- merge(traps, aedes, by=c("date", "semaine", "code", "lat", "long"),
all.x = TRUE)
aedes$total_femelle[is.na(aedes$total_femelle)] <- 0
aedes$especes[is.na( aedes$especes)] <- "Aedes aegypti"
culex <- alldata[alldata$especes == "Culex quinquefasciatus", ]
culex <- merge(traps, culex, by=c("date", "semaine", "code", "lat", "long"),
all.x = TRUE)
culex$total_femelle[is.na(culex$total_femelle)] <- 0
culex$especes[is.na(culex$especes)] <- "Culex quinquefasciatus"
return(list(aedes = aedes, culex = culex))}
# dummy assignments
dummyrandomization <- function(seed = 123) {
set.seed(seed)
arm1 <- sample(rep(c('LSM', 'AMT', 'LSM & AMT', 'no int.'), times = 5), size = 20)
arm2 <- sample(rep(c('LSM', 'AMT', 'LSM & AMT', 'no int.'), times = 5), size = 20)
arm <- c(arm1, arm2)
code <- c(seq(101,120), seq(201,220))
randomization <- data.frame(code = code, arm = arm)
return(randomization)}
assembleCRT <- function(trial, numerator = 'total_femelle', int = 'AMT'){
trial$denom <- 1
trial <- trial[!is.na(trial$lat), ]
trial$cluster <- trial$code
trial <- with(trial, trial[intervention, names(trial) %in% c('lat','long','cluster','arm', numerator, 'denom')])
trial$arm <- ifelse(grepl(int, trial$arm), 'intervention', 'control')
analysis_object <- CRTsp(trial) %>%
latlong_as_xy() %>%
aggregateCRT(auxiliaries = c(numerator,"denom")) %>%
compute_distance()
analysis_object$trial <- analysis_object$trial[analysis_object$trial$nearestDiscord > -5, ]
return(analysis_object)
}
# MAIN SCRIPT
snis <- readSNISdata()
# merge in the arm assignments
snis$aedes <- merge(snis$aedes, dummyrandomization())
snisCRT <- assembleCRT(trial = snis$aedes)
results <- list(CRT = c(), method = c(), link = c(), cfunc = c(),
numerator = c(),  control  = c(), efficacy = c(),
elpd = c(),spillover_interval = c())
add_analysis <- function(CRT, method, link, cfunc, numerator, results){
results$CRT <-c(results$CRT, CRT)
results$method <-c(results$method, method)
results$link <-c(results$link, link)
results$cfunc <-c(results$cfunc, cfunc)
results$numerator <-c(results$numerator, numerator)
analysis <- CRTanalysis(CRT, method = method, link = link, cfunc = cfunc, numerator = numerator)
results$spillover_interval <- c(results$spillover_interval, analysis$pt_ests$spillover_interval)
results$control <- c(results$control, analysis$pt_ests$int)
results$efficacy <-c(results$efficacy, analysis$pt_ests$effect_size)
results$elpd <-c(results$elpd, analysis$pt_ests$elpd)
return(results)
}
results <- add_analysis(CRT = snisCRT, method = "MCMC", link = 'log', cfunc = "D", numerator = "total_femelle", results = results)
results <- add_analysis(CRT = snisCRT, method = "MCMC", link = 'log', cfunc = "D", numerator = "total_femelle", results = results)
results$CRT <- 'snisCRT'
eval('snisCRT')
junk <- get('snisCRT')
add_analysis <- function(CRTname, method, link, cfunc, numerator, results){
results$CRT <-c(results$CRT, CRTname)
results$method <-c(results$method, method)
results$link <-c(results$link, link)
results$cfunc <-c(results$cfunc, cfunc)
results$numerator <-c(results$numerator, numerator)
CRT <- get(CRTname)
analysis <- CRTanalysis(CRT, method = method, link = link, cfunc = cfunc, numerator = numerator)
results$spillover_interval <- c(results$spillover_interval, analysis$pt_ests$spillover_interval)
results$control <- c(results$control, analysis$pt_ests$int)
results$efficacy <-c(results$efficacy, analysis$pt_ests$effect_size)
results$elpd <-c(results$elpd, analysis$pt_ests$elpd)
return(results)
}
results <- add_analysis(CRT = 'snisCRT', method = "MCMC", link = 'log', cfunc = "Z", numerator = "total_femelle", results = results)
results <- add_analysis(CRT = 'snisCRT', method = "MCMC", link = 'log', cfunc = "X", numerator = "total_femelle", results = results)
results <- add_analysis(CRT = 'snisCRT', method = "MCMC", link = 'log', cfunc = "P", numerator = "total_femelle", results = results)
View(results)
results <- list(CRT = c(), method = c(), link = c(), cfunc = c(),
numerator = c(),  control  = c(), efficacy = c(),
elpd = c(),spillover_interval = c())
add_analysis <- function(CRTname, method, link, cfunc, numerator, results){
results$CRT <-c(results$CRT, CRTname)
results$method <-c(results$method, method)
results$link <-c(results$link, link)
results$cfunc <-c(results$cfunc, cfunc)
results$numerator <-c(results$numerator, numerator)
CRT <- get(CRTname)
analysis <- CRTanalysis(CRT, method = method, link = link, cfunc = cfunc, numerator = numerator)
results$spillover_interval <- c(results$spillover_interval, analysis$pt_ests$spillover_interval)
results$control <- c(results$control, analysis$pt_ests$int)
results$efficacy <-c(results$efficacy, ifelse(is.null(analysis$pt_ests$effect_size, NA,
analysis$pt_ests$effect_size)))
results$elpd <-c(results$elpd, analysis$pt_ests$elpd)
return(results)
}
results <- add_analysis(CRT = 'snisCRT', method = "MCMC", link = 'log', cfunc = "D", numerator = "total_femelle", results = results)
add_analysis <- function(CRTname, method, link, cfunc, numerator, results){
results$CRT <-c(results$CRT, CRTname)
results$method <-c(results$method, method)
results$link <-c(results$link, link)
results$cfunc <-c(results$cfunc, cfunc)
results$numerator <-c(results$numerator, numerator)
CRT <- get(CRTname)
analysis <- CRTanalysis(CRT, method = method, link = link, cfunc = cfunc, numerator = numerator)
results$spillover_interval <- c(results$spillover_interval, analysis$pt_ests$spillover_interval)
results$control <- c(results$control, analysis$pt_ests$int)
results$efficacy <-c(results$efficacy, ifelse(is.null(analysis$pt_ests$effect_size[1], NA,
analysis$pt_ests$effect_size)))
results$elpd <-c(results$elpd, analysis$pt_ests$elpd)
return(results)
}
results <- add_analysis(CRT = 'snisCRT', method = "MCMC", link = 'log', cfunc = "D", numerator = "total_femelle", results = results)
add_analysis <- function(CRTname, method, link, cfunc, numerator, results){
results$CRT <-c(results$CRT, CRTname)
results$method <-c(results$method, method)
results$link <-c(results$link, link)
results$cfunc <-c(results$cfunc, cfunc)
results$numerator <-c(results$numerator, numerator)
CRT <- get(CRTname)
analysis <- CRTanalysis(CRT, method = method, link = link, cfunc = cfunc, numerator = numerator)
results$spillover_interval <- c(results$spillover_interval, analysis$pt_ests$spillover_interval)
results$control <- c(results$control, analysis$pt_ests$int)
results$efficacy <-c(results$efficacy, ifelse(is.null(analysis$pt_ests$effect_size), NA,
analysis$pt_ests$effect_size))
results$elpd <-c(results$elpd, analysis$pt_ests$elpd)
return(results)
}
results <- list(CRT = c(), method = c(), link = c(), cfunc = c(),
numerator = c(),  control  = c(), efficacy = c(),
elpd = c(),spillover_interval = c())
add_analysis <- function(CRTname, method, link, cfunc, numerator, results){
results$CRT <-c(results$CRT, CRTname)
results$method <-c(results$method, method)
results$link <-c(results$link, link)
results$cfunc <-c(results$cfunc, cfunc)
results$numerator <-c(results$numerator, numerator)
CRT <- get(CRTname)
analysis <- CRTanalysis(CRT, method = method, link = link, cfunc = cfunc, numerator = numerator)
results$spillover_interval <- c(results$spillover_interval, analysis$pt_ests$spillover_interval)
results$control <- c(results$control, analysis$pt_ests$int)
results$efficacy <-c(results$efficacy, ifelse(is.null(analysis$pt_ests$effect_size), NA,
analysis$pt_ests$effect_size))
results$elpd <-c(results$elpd, analysis$pt_ests$elpd)
return(results)
}
results <- add_analysis(CRT = 'snisCRT', method = "MCMC", link = 'log', cfunc = "D", numerator = "total_femelle", results = results)
results <- add_analysis(CRT = 'snisCRT', method = "MCMC", link = 'log', cfunc = "Z", numerator = "total_femelle", results = results)
results <- add_analysis(CRT = 'snisCRT', method = "MCMC", link = 'log', cfunc = "X", numerator = "total_femelle", results = results)
results <- add_analysis(CRT = 'snisCRT', method = "MCMC", link = 'log', cfunc = "P", numerator = "total_femelle", results = results)
help('pareto-k-diagnostic')
