testdata$trial$num <- with(testdata$trial, sapply(FUN = rbinom(n= 1,size =denom, prob = 1 - (denom-num)* 0.5/denom) ))
testdata$trial$num <- with(testdata$trial, sapply(FUN = function(x) { rbinom(n= 1,size =denom, prob = 1 - (denom-num)* 0.5/denom) )})
testdata$trial$num <- with(testdata$trial, sapply(FUN = function(x) { rbinom(n= 1,size =denom, prob = 1 - (denom-num)* 0.5/denom)})
)
testdata$trial$num <- with(testdata$trial, sapply(FUN = function(x) { seed <- x; rbinom(n= 1,size =denom, prob = 1 - (denom-num)* 0.5/denom)})
)
testdata$trial$num <- with(testdata$trial, sapply(FUN = function(x){ seed <- x; rbinom(n= 1,size =denom, prob = 1 - (denom-num)* 0.5/denom)})
)
testdata$trial$num <- with(testdata$trial, sapply(FUN = function(x) { seed <- x; rbinom(n= 1,size =denom, prob = 1 - (denom-num)* 0.5/denom)})
)
? apply(array, margin, ...)
testdata$trial$num <- with(testdata$trial, sapply(margin = 2,FUN = function(x) { seed <- x; rbinom(n= 1,size =denom, prob = 1 - (denom-num)* 0.5/denom)})
)
usethis::use_importfrom("stats", "vcov")
usethis::use_  ("stats", "vcov")
usethis::use
usethis::use_import_from("stats", "vcov")
analysis <- CRTanalysis(readdata("exampleCRT.csv"),method = 'T',link='identity')
value <- round(analysis$model_object$dic$dic)
library(dplyr)
example_locations <- readdata('example_site.csv')
set.seed(1234)
example_locations <- readdata('example_site.csv')
example_locations$base_denom <- 1
library(dplyr)
example_randomized <- CRTsp(example_locations) %>%
aggregateCRT(auxiliaries = c("RDT_test_result", "base_denom")) %>%
specify_clusters(h = 50, algorithm = 'NN') %>%
randomizeCRT(matchedPair = FALSE)
example2a <- simulateCRT(example_randomized,
effect = 0.8,
outcome0 = 0.5,
generateBaseline = FALSE,
baselineNumerator = "RDT_test_result",
baselineDenominator = "base_denom",
ICC_inp = NULL, theta_inp = 0.8)
# Reading in the inla.mesh functions when run outside the check but not as part of a check
library(Matrix)
inla_mesh <- readdata("examplemesh100.txt")
analysis <- CRTanalysis(trial=example2a,
method = 'INLA', link='logit', cfunc='P',
localisedEffects = TRUE, clusterEffects= TRUE,
requireMesh = TRUE, inla_mesh = inla_mesh)
analysis <- CRTanalysis(trial=example2a,
method = 'INLA', link='logit', cfunc='P',
personalProtection = TRUE, clusterEffects= TRUE,
requireMesh = TRUE, inla_mesh = inla_mesh)
value <- round(analysis$pt_ests$DIC)
value
analysis$pt_ests$DIC
library(CRTspat)
library(CRTspat)
library(CRTspat)
analysis <- CRTanalysis(trial=example2a,
method = 'INLA', link='logit', cfunc='P',
personalProtection = TRUE, clusterEffects= TRUE,
requireMesh = TRUE, inla_mesh = inla_mesh)
set.seed(1234)
example_locations <- readdata('example_site.csv')
example_locations$base_denom <- 1
library(dplyr)
example_randomized <- CRTsp(example_locations) %>%
aggregateCRT(auxiliaries = c("RDT_test_result", "base_denom")) %>%
specify_clusters(h = 50, algorithm = 'NN') %>%
randomizeCRT(matchedPair = FALSE)
example2a <- simulateCRT(example_randomized,
effect = 0.8,
outcome0 = 0.5,
generateBaseline = FALSE,
baselineNumerator = "RDT_test_result",
baselineDenominator = "base_denom",
ICC_inp = NULL, theta_inp = 0.8)
# Reading in the inla.mesh functions when run outside the check but not as part of a check
library(Matrix)
inla_mesh <- readdata("examplemesh100.txt")
analysis <- CRTanalysis(trial=example2a,
method = 'INLA', link='logit', cfunc='P',
personalProtection = TRUE, clusterEffects= TRUE,
requireMesh = TRUE, inla_mesh = inla_mesh)
analysis$pt_ests$DIC
analysis$model_object$dic$dic
library(CRTspat)
analysis <- CRTanalysis(readdata("exampleCRT.csv"),method = 'T',link='identity')
analysis <- CRTanalysis(readdata("exampleCRT.csv"),method = 'T',link='identity')
force(analysis)
View(analysis)
clusterSum <- data.frame(
trial %>%
group_by(cluster) %>%
dplyr::summarize(
y = sum(y1),
total = sum(y_off),
arm = arm[1]
)
)
clusterSum$lp <- switch(link,
"identity" = clusterSum$y/clusterSum$total,
"log" = log(clusterSum$y/clusterSum$total),
"logit" = logit(clusterSum$y/clusterSum$total))
formula <- stats::as.formula("lp ~ arm")
model_object <- stats::t.test(
formula = formula, data = clusterSum, alternative = "two.sided",
conf.level = 1 - alpha, var.equal = TRUE
)
analysis$pt_ests$p.value <- model_object$p.value
analysisC <- stats::t.test(
clusterSum$lp[clusterSum$arm == "control"], conf.level = 1 - alpha)
analysis$pt_ests$controlY <- invlink(link, analysisC$estimate[1])
library(CRTspat)
analysis <- CRTanalysis(readdata("exampleCRT.csv"),method = 'T',link='identity')
summary(analysis)
plotCRT(analysis)
analysis <- CRTanalysis(readdata("exampleCRT.csv"),method = 'GEE',link='identity')
plotCRT(analysis)
summary(analysis)
library(CRTspat)
source("~/.active-rstudio-document")
set.seed(1234)
example_locations <- readdata('example_site.csv')
example_locations$base_denom <- 1
library(dplyr)
example_randomized <- CRTsp(example_locations) %>%
aggregateCRT(auxiliaries = c("RDT_test_result", "base_denom")) %>%
specify_clusters(h = 50, algorithm = 'NN') %>%
randomizeCRT(matchedPair = FALSE)
example2a <- simulateCRT(example_randomized,
effect = 0.8,
outcome0 = 0.5,
generateBaseline = FALSE,
baselineNumerator = "RDT_test_result",
baselineDenominator = "base_denom",
ICC_inp = NULL, theta_inp = 0.8)
# Reading in the inla.mesh functions when run outside the check but not as part of a check
library(Matrix)
inla_mesh <- readdata("examplemesh100.txt")
analysis <- CRTanalysis(trial=example2a,
method = 'INLA', link='logit', cfunc='X',
personalProtection = TRUE, clusterEffects= TRUE,
requireMesh = TRUE, inla_mesh = inla_mesh)
analysis <- CRTanalysis(trial=example2a,
method = 'INLA', link='logit', cfunc='X',
personalProtection = TRUE, clusterEffects= TRUE,
requireMesh = TRUE, inla_mesh = inla_mesh)
analysis <- CRTanalysis(trial=example2a,
method = 'INLA', link='logit', cfunc='X',
personalProtection = TRUE, clusterEffects= TRUE,
requireMesh = TRUE, inla_mesh = inla_mesh)
cfunc %in% c("L", "P", "S")
library(CRTspat)
requireMesh = TRUE, inla_mesh = inla_mesh)
analysis <- CRTanalysis(trial=example2a,
method = 'INLA', link='logit', cfunc='X',
personalProtection = TRUE, clusterEffects= TRUE,
requireMesh = TRUE, inla_mesh = inla_mesh)
summary(analysis)
plotCRT(analysis, map=TRUE, fill='prediction')
library(CRTspat)
analysis <- CRTanalysis(trial=example2a,
method = 'INLA', link='logit', cfunc='X',
personalProtection = TRUE, clusterEffects= TRUE,
requireMesh = TRUE, inla_mesh = inla_mesh)
plotCRT(analysis, map=TRUE, fill='prediction')
library(CRTspat)
plotCRT(readdata('exampleCRT.csv'))
plotCRT(readdata('exampleCRT.csv'))
View(analysis)
class(analysis)
View(analysis)
plotCRT(readdata('exampleCRT.csv'))
plotCRT(readdata('exampleCRT.csv'))
CRTanalysis(trial = object$trial, method = "EMP")
CRTanalysis(trial = object$trial, method = "EMP")
CRTanalysis(trial = example2a, method = "EMP")
library(CRTspat)
CRTanalysis(trial = example2a, method = "EMP")
CRTanalysis(trial = example2a, method = "EMP")
method
CRTanalysis(trial = example2a, method = "EMP")
method
CRTanalysis(trial = example2a, method = "EMP")
CRTanalysis(trial = example2a, method = "EMP")
plotCRT(readdata('exampleCRT.csv'))
library(CRTspat)
set.seed(1234)
example_locations <- readdata('example_site.csv')
example_locations$base_denom <- 1
library(dplyr)
example_randomized <- CRTsp(example_locations) %>%
aggregateCRT(auxiliaries = c("RDT_test_result", "base_denom")) %>%
specify_clusters(h = 50, algorithm = 'NN') %>%
randomizeCRT(matchedPair = FALSE)
summary(example_randomized)
plotCRT(example_randomized, map = TRUE)
example2a <- simulateCRT(example_randomized,
effect = 0.8,
outcome0 = 0.5,
generateBaseline = FALSE,
baselineNumerator = "RDT_test_result",
baselineDenominator = "base_denom",
ICC_inp = NULL, theta_inp = 0.8)
summary(example2a)
library(Matrix)
examplemesh100 <- readdata("examplemesh100.txt")
example2aanalysis <- CRTanalysis(trial=example2a, method = 'T')
summary(example2aanalysis)
CRTanalysis(trial = example2a, method = "MLE4")
CRTanalysis(trial = example2a, method = "LME4")
example2aLME4 <- CRTanalysis(trial = example2a, method = "LME4")
plotCRT(example2aLME4)
write.csv(example2a, file = "inst/extdata/example_buffer.csv", row.names = FALSE)
write.csv(example2a$trial, file = "inst/extdata/example_buffer.csv", row.names = FALSE)
write.csv(example2a$trial, file = "inst/extdata/exampleCRT.csv", row.names = FALSE)
source("C:/git_repos/CRTspat/vignettes/runVignette.R")
mesh <- new_mesh(trial = example2a, pixel = 0.1)
library(Matrix)
dump("mesh",file = "inst/extdata/examplemesh100.txt", evaluate= TRUE)
examplemesh100 <- readdata("examplemesh100.txt")
baselineanalysis <- CRTanalysis(trial=example_clustered,
method = 'INLA', link='logit', baselineOnly = TRUE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom",
clusterEffects = FALSE, spatialEffects = TRUE,
requireMesh = TRUE, inla_mesh = examplemesh100)
View(example2a)
examplemesh100 <- readdata("examplemesh100.txt")
baselineanalysis <- CRTanalysis(trial=example_clustered,
method = 'INLA', link='logit', baselineOnly = TRUE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom",
clusterEffects = FALSE, spatialEffects = TRUE,
requireMesh = TRUE, inla_mesh = examplemesh100)
library(CRTspat)
library(CRTspat)
examplemesh100 <- readdata("examplemesh100.txt")
baselineanalysis <- CRTanalysis(trial=example_clustered,
method = 'INLA', link='logit', baselineOnly = TRUE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom",
clusterEffects = FALSE, spatialEffects = TRUE,
requireMesh = TRUE, inla_mesh = examplemesh100)
formula
fterms
cfunc
if (cfunc != "Z") {
sample <- as.data.frame(MASS::mvrnorm(n = 10000, mu = mu, Sigma = cov))
sample$controlY <- invlink(link, sample$int)
# personal_protection is the proportion of effect due to personal protection proportion
if ("arm" %in% names(mu) & "pvar" %in% names(mu)) {
if (identical(method,"LME4")) sample$lc <- with(sample, int + pvar + arm)
sample$interventionY <- invlink(link, sample$lc)
sample$personal_protection <- with(
sample, (controlY - invlink(link, int + arm))/(controlY -
interventionY))
}
if ("arm" %in% names(mu) & !("pvar" %in% names(mu))) {
sample$interventionY <- invlink(link, sample$int + sample$arm)
sample$personal_protection <- 0
}
if ("pvar" %in% names(mu) & !("arms" %in% names(mu))) {
sample$interventionY <- invlink(link, sample$int + sample$pvar)
sample$personal_protection <- 1
}
sample$effect.size <- 1 - sample$interventionY/sample$controlY
bounds <- (apply(
sample, 2, function(x) {quantile(x, c(alpha/2, 0.5, 1 - alpha/2),
alpha = alpha)}))
} else {
# if there is no comparison of groups
controlY <- unlist(invlink(link,
model_object$summary.fixed["int", c("0.025quant", "0.5quant", "0.975quant")]))
bounds <- data.frame(
controlY = controlY, interventionY = controlY, effect.size = rep(0, 3),
personal_protection = rep(0, 3))
}
library(CRTspat)
examplemesh100 <- readdata("examplemesh100.txt")
baselineanalysis <- CRTanalysis(trial=example_clustered,
method = 'INLA', link='logit', baselineOnly = TRUE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom",
clusterEffects = FALSE, spatialEffects = TRUE,
requireMesh = TRUE, inla_mesh = examplemesh100)
source("C:/git_repos/CRTspat/vignettes/runVignette.R")
set.seed(5)
k_vec <- round(runif(20, min = 6, max = 150))
# a user function randomizes and analyses each simulated trial
CRTscenario3 <- function(k, CRT) {
ex <- specify_clusters(CRT, k = k, algo = "kmeans") %>%
randomizeCRT()
invisible(capture.output(
GEEanalysis <- CRTanalysis(ex, method = "GEE", baselineOnly = TRUE, excludeBuffer = FALSE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom")
))
locations <- GEEanalysis$description$locations
ICC <- GEEanalysis$pt_ests$ICC
value <- c(k = k, ICC = ICC, mean_h = locations/k)
return(value)
}
results <- t(sapply(k_vec, FUN = CRTscenario3, simplify = "array", CRT = example)) %>%
data.frame()
fterms
results <- t(sapply(k_vec, FUN = CRTscenario3, simplify = "array", CRT = example)) %>%
data.frame()
fterms
View(trial)
formula <- stats::as.formula(paste(fterms, collapse = " "))
fterms <- 0
fterms <- "0"
# GEE analysis of cluster effects
fterms <- c(switch(link,
"identity" = "y1/y_off ~ 1",
"log" = "y1 ~ 1 + offset(log(y_off))",
"logit" = "cbind(y1,y0) ~ 1"),
fterms)
formula <- stats::as.formula(paste(fterms, collapse = "+"))
formula
formula
fterms
fterms <- "0"
# GEE analysis of cluster effects
fterms <- c(switch(link,
"identity" = "y1/y_off ~ 1",
"log" = "y1 ~ 1 + offset(log(y_off))",
"logit" = "cbind(y1,y0) ~ 1"),
fterms)
fterms
fterms <- "rabbit"
# GEE analysis of cluster effects
fterms <- c(switch(link,
"identity" = "y1/y_off ~ 1",
"log" = "y1 ~ 1 + offset(log(y_off))",
"logit" = "cbind(y1,y0) ~ 1"),
fterms)
fterms
if (clusterEffects) {
if (identical(method, "INLA")) {
fterms <- c(fterms, "f(cluster, model = \'iid\')")
} else if(identical(method, "GEE")) {
fterms <- fterms
} else {
fterms <- c(fterms, "(1 | cluster)")
}
}
fterms
fterms <- c(fterms,"0")
fterms
fterms <- c(fterms,"rabbit")
fterms <- ""
fterms <- "0"
set.seed(5)
k_vec <- round(runif(20, min = 6, max = 150))
# a user function randomizes and analyses each simulated trial
CRTscenario3 <- function(k, CRT) {
ex <- specify_clusters(CRT, k = k, algo = "kmeans") %>%
randomizeCRT()
invisible(capture.output(
GEEanalysis <- CRTanalysis(ex, method = "GEE", baselineOnly = TRUE, excludeBuffer = FALSE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom")
))
locations <- GEEanalysis$description$locations
ICC <- GEEanalysis$pt_ests$ICC
value <- c(k = k, ICC = ICC, mean_h = locations/k)
return(value)
}
results <- t(sapply(k_vec, FUN = CRTscenario3, simplify = "array", CRT = example)) %>%
data.frame()
paste(fterms, collapse = "+")
paste(fterms, collapse = "+")
junk <- paste(fterms, collapse = "+")
c(NULL,1)
b <- c(NULL,1)
library(CRTspat)
}
set.seed(5)
k_vec <- round(runif(20, min = 6, max = 150))
# a user function randomizes and analyses each simulated trial
CRTscenario3 <- function(k, CRT) {
ex <- specify_clusters(CRT, k = k, algo = "kmeans") %>%
randomizeCRT()
invisible(capture.output(
GEEanalysis <- CRTanalysis(ex, method = "GEE", baselineOnly = TRUE, excludeBuffer = FALSE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom")
))
locations <- GEEanalysis$description$locations
ICC <- GEEanalysis$pt_ests$ICC
value <- c(k = k, ICC = ICC, mean_h = locations/k)
return(value)
}
results <- t(sapply(k_vec, FUN = CRTscenario3, simplify = "array", CRT = example)) %>%
data.frame()
results
View(analysis)
GEEanalysis <- CRTanalysis(ex, method = "GEE", baselineOnly = TRUE, excludeBuffer = FALSE,
+                                    baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom")
ex <- specify_clusters(trial, k = 20, algo = "kmeans") %>% randomizeCRT()
View(trial)
ex <- specify_clusters(trial =trial, k = 20, algo = "kmeans") %>% randomizeCRT()
head(trial)
library(CRTspat)
library(CRTspat)
example_locations <- readdata("example_baseline.csv")
example_locations$base_denom <- 1
library(dplyr)
example <- latlong_as_xy(example_locations) %>%
aggregateCRT(auxiliaries = c("RDT_test_result", "base_denom"))
summary(example)
# randomly sample an array of values of k (use a small sample size for testing
# the plots were produced with n=5000)
set.seed(5)
k_vec <- round(runif(20, min = 6, max = 150))
# a user function randomizes and analyses each simulated trial
CRTscenario3 <- function(k, CRT) {
ex <- specify_clusters(CRT, k = k, algo = "kmeans") %>%
randomizeCRT()
invisible(capture.output(
GEEanalysis <- CRTanalysis(ex, method = "GEE", baselineOnly = TRUE, excludeBuffer = FALSE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom")
))
locations <- GEEanalysis$description$locations
ICC <- GEEanalysis$pt_ests$ICC
value <- c(k = k, ICC = ICC, mean_h = locations/k)
return(value)
}
# The results are collected in a data frame
results <- t(sapply(k_vec, FUN = CRTscenario3, simplify = "array", CRT = example)) %>%
data.frame()
results
ex <- specify_clusters(example, k = 20, algo = "kmeans") %>%
randomizeCRT()
GEEanalysis <- CRTanalysis(ex, method = "GEE", baselineOnly = TRUE, excludeBuffer = FALSE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom")
summary(GEEanalysis)
GEEanalysis <- CRTanalysis(ex, method = "GEE", baselineOnly = TRUE, excludeBuffer = FALSE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom")
formula
summary.fit
summary.fit$corr[1]
View(GEEanalysis)
GEEanalysis <- CRTanalysis(ex, method = "GEE", baselineOnly = TRUE, excludeBuffer = FALSE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom")
pt_ests
pt_ests
pt_ests
pt_ests
pt_ests
pt_ests
library(CRTspat)
GEEanalysis <- CRTanalysis(ex, method = "GEE", baselineOnly = TRUE, excludeBuffer = FALSE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom")
View(GEEanalysis)
summary(GEEanalysis)
source("C:/git_repos/CRTspat/vignettes/runVignette.R")
library(CRTspat)
use_dev_version()
usethis::use_dev_version()
usethis::use_dev_version()
library(CRTspat)
exampleT <- CRTanalysis(readdata("exampleCRT.csv"), method = "T")
example2a <- readdata("exampleCRT.csv")
summary(example2a)
example2a-1 <- CRTanalysis(example2a, method = "LME4",cfunc="P")
example2a-1 <- CRTanalysis(example2a, method = "LME4",cfunc="L")
example2a-1 <- CRTanalysis(example2a, method = "LME4",cfunc="L",clusterEffects= TRUE)
library(CRTspat)
example2a-1 <- CRTanalysis(example2a, method = "LME4",cfunc="L",clusterEffects= TRUE)
fterms
example2a-1 <- CRTanalysis(example2a, method = "LME4",cfunc="L",clusterEffects= TRUE)
example2a-1 <- CRTanalysis(example2a, method = "LME4",cfunc="L",clusterEffects= TRUE)
formula()
formula
mu
mu
class(analysis) <- "CRTanalysis"
analysis$options <- options
example2a_1 <- CRTanalysis(example2a, method = "LME4",cfunc="L",clusterEffects= TRUE)
example2a_1 <- CRTanalysis(example2a, method = "LME4",cfunc="L",clusterEffects= TRUE)
library(CRTspat)
example2a_1 <- CRTanalysis(example2a, method = "LME4",cfunc="L",clusterEffects= TRUE)
summary(example2a_1)
plotCRT(example2a_1)
example2a_2 <- CRTanalysis(example2a, method = "LME4",cfunc="X",clusterEffects= TRUE)
plotCRT(example2a_2)
summary(example2a_2)
example2a_3 <- CRTanalysis(example2a, method = "LME4",cfunc="P",clusterEffects= TRUE)
summary(example2a_3)
plotCRT(example2a_3)
example2a_3 <- CRTanalysis(example2a, method = "LME4",cfunc="P",personalProtection= TRUE)
plotCRT(example2a_3)
summary(example2a_3)
example2a_3 <- CRTanalysis(example2a, method = "LME4",cfunc="L",personalProtection= TRUE)
plotCRT(example2a_3)
library(Matrix)
inla_mesh <- readdata("examplemesh100.txt")
analysis <- CRTanalysis(trial=example2a,
method = 'INLA', link='logit', cfunc='P',
personalProtection = TRUE, clusterEffects= TRUE,
requireMesh = TRUE, inla_mesh = inla_mesh)
plotCRT(analysis, map = TRUE, fill = 'prediction')
plotCRT(analysis, map = TRUE, fill = 'prediction', showContamination = TRUE)
summary(example)
summary(analysis)
analysisL <- CRTanalysis(trial=example2a,
method = 'INLA', link='logit', cfunc='L',
personalProtection = TRUE, clusterEffects= TRUE,
requireMesh = TRUE, inla_mesh = inla_mesh)
analysisL <- CRTanalysis(trial=example2a,
method = 'INLA', link='logit', cfunc='L',
clusterEffects= TRUE,
requireMesh = TRUE, inla_mesh = inla_mesh)
summary(analysisL)
plotCRT(analysisL, map = TRUE, fill = 'prediction', showContamination = TRUE)
plotCRT(analysisL, map = TRUE, fill = 'prediction', showContamination = TRUE)
head(example2a$trial)
plotCRT(analysisL, map = TRUE, fill = 'distance')
plotCRT(analysisL, map = TRUE, fill = 'distance')
plotCRT(analysisL, map = TRUE, fill = 'distance', showContamination = TRUE)
