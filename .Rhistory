View(examplePower)
summary(examplePower)
sloop::otype(examplePower)
sloop::ctype(examplePower)
class(examplePower)
exampleDesign = designCRT(trial = readdata('test_site.csv'),
desiredPower = 0.8, effect=0.4, yC=0.35, outcome.type = 'd', ICC = 0.05,
buffer.width = 0.25, h=100, algorithm = 'kmeans')
summary(exampleDesign)
devtools::document()
devtools::document()
library(CRTspat)
summary(examplePower)
exampleDesign = designCRT(trial = readdata('test_site.csv'),
summary(examplePower)
)
summary(exampleDesign)
library(CRTspat)
exampleDesign = designCRT(trial = readdata('test_site.csv'),
desiredPower = 0.8, effect=0.4, yC=0.35, outcome.type = 'd', ICC = 0.05,
buffer.width = 0.25, h=100, algorithm = 'kmeans')
summary(exampleDesign)
View(exampleDesign)
summary(exampleDesign)
Solarmal_baseline <- readdata("Solarmal_baseline.csv")
summary(Solarmal_baseline)
testLocationsxy <- latlong_as_xy(Solarmal_baseline) #test_site is simulated
summary(testLocationsxy)
3172/80
devtools::document()
exampletrial <- specify.clusters(trial = readdata('test_site.csv'),
h = 40, algorithm = 'kmeans', reuseTSP = FALSE)
library(CRTspat)
exampletrial <- specify.clusters(trial = readdata('test_site.csv'),
h = 40, algorithm = 'kmeans', reuseTSP = FALSE)
library(CRTspat)
View(testLocationsxy)
View(exampleDesign)
levels(exampleDesign$trial$cluster)
nlevels(exampleDesign$trial$cluster)
library(CRTspat)
exampletrial <- specify.clusters(trial = readdata('test_site.csv'))
exampletrial <- specify.clusters(trial = readdata('test_site.csv'),
h = 40, algorithm = 'kmeans', reuseTSP = FALSE)
summary(exampletrial)
summary(exampleDesign)
summary(exampletrial)
plot(exampletrial)
plot(exampletrial)
class(exampletrial)
plot(exampletrial)
plot(exampletrial)
x <- exampletrial
trial <- x$trial
trial <- x$trial
arm <- cluster <- x <- y <- NULL
colourClusters <- identical(fill, "clusters")
showArms <- identical(fill, "arms")
plot(exampletrial)
library(CRTspat)
plot(exampletrial)
plot(exampletrial$trial)
plot(exampletrial)
plot(x =exampletrial)
plot(exampletrial, map = TRUE)
? stop
library(CRTspat)
plot(exampletrial)
plot(exampleDesign)
plot(exampleDesign, map = TRUE)
plot(exampleDesign, map = TRUE, showClusterBoundaries = TRUE)
library(CRTspat)
plot(exampleDesign, map = TRUE, showClusterBoundaries = TRUE)
plot(examplePower, map = TRUE, showClusterBoundaries = TRUE)
nrow(examplePower$trial)
examplePower$trial
library(CRTspat)
plot(examplePower, map = TRUE, showClusterBoundaries = TRUE)
library(CRTspat)
plot(examplePower, map = TRUE, showClusterBoundaries = TRUE)
library(CRTspat)
plot(exampletrial, map = TRUE, showClusterBoundaries = TRUE)
plot(Solarmal_baseline, map = TRUE, showClusterBoundaries = TRUE)
plot(trial, map = TRUE, showClusterBoundaries = TRUE)
summary(examplePower)
summary(examplePower)
summary(exampleDesign)
source("C:/git_repos/CRTspat/vignettes/runVignette.R")
rmarkdown.html_vignette.check_title = FALSE
devtools::install(build_vignettes = TRUE)
# to build package website
usethis::use_pkgdown()
pkgdown::build_site()
example_locations
summary(example_locations)
summary(example_xy)
summary(example_locations)
typeof(example_xy)
typeof(testLocationsxy)
typeof(as_CRTspat(testLocationsxy))
library(CRTspat)
typeof(as_CRTspat(testLocationsxy))
typeof(as_CRTspat(testLocationsxy))
typeof(testLocationsxy)
library(CRTspat)
library(CRTspat)
typeof(testLocationsxy)
as_CRTspat(testLocationsxy)
summary(as_CRTspat(testLocationsxy))
#  use the same dataset as for Use Case 1.
example_locations <- readdata('example_baseline.csv')
example_locations$base_denom <- 1
example_xy <- latlong_as_xy(example_locations)
example_aggregated <- aggregate(example_xy, auxiliaries = c("RDT_test_result", "base_denom"))
summary(example_aggregated)
#   use co-ordinates, and baseline data from `test5`
k = 10
test7a = specify.clusters(example_aggregated, k=k, algo='kmeans')
#   use co-ordinates, and baseline data from `test5`
buffer.width <- 0.5
k <- 10
ex_clustered <- specify.clusters(example_aggregated, k=k, algo='kmeans')
ex_ buffered <- specify.buffer(ex_clustered, buffer.width = buffer.width)
ex_buffered <- specify.buffer(ex_clustered, buffer.width = buffer.width)
View(ex_clustered)
ex_buffered <- specify.buffer(ex_clustered, buffer.width = buffer.width)
ex_buffered <- specify.buffer(ex_clustered, buffer.width = buffer.width)
View(trial)
specify
ex_buffered <- specify.buffer(ex_clustered, buffer.width = buffer.width)
library(CRTspat)
ex_randomized <- randomizeCRT(ex_clustered)
ex_buffered <- specify.buffer(ex_randomized, buffer.width = buffer.width)
GEEanalysis <- CRTanalysis(ex_buffered, method='GEE', baselineOnly = TRUE)
GEEanalysis <- CRTanalysis(ex_buffered, method='GEE', baselineOnly = TRUE)
View(ex_randomized)
table("ex_randomized$trial$base_denom")
table(ex_randomized$trial$base_denom)
table(ex_randomized$trial$RDT_test_result)
example_aggregated <- aggregate(example_xy, auxiliaries = c("RDT_test_result", "base_denom"))
View(trial1)
table(trial1$sumVar)
trial1 <- trial %>% group_by(x, y) %>% summarize(sumVar = sum(get(varName),
na.rm = TRUE), .groups = "drop")
trial1 <- trial %>% group_by(x, y) %>% summarize(sumVar = sum(get(auxiliaries),
na.rm = TRUE), .groups = "drop")
get(auxiliaries)
eval(auxiliaries)
trial1 <- trial %>% group_by(x, y) %>% across(sumVar = sum(get(auxiliaries),
na.rm = TRUE), .groups = "drop")
auxiliaries
trial1 <- trial %>% group_by(x, y) %>% across(auxiliaries, sum)
trial1 <- trial %>% group_by(x, y) %>% dplyr::across(auxiliaries, sum)
trial1 <- trial %>% group_by(x, y) across(auxiliaries, sum)
trial1 <- trial %>% group_by(x, y) %>% summarise(across(auxiliaries, sum))
trial1 <- trial %>% group_by(x, y) %>% summarize(across(auxiliaries, sum))
View(trial1)
View(trial1)
library(CRTspat)
example_aggregated <- aggregate(example_xy, auxiliaries = c("RDT_test_result", "base_denom"))
View(example_xy)
example_aggregated <- aggregate(example_xy, auxiliaries = c("RDT_test_result", "base_denom"))
View(example_aggregated)
summary(example_aggregated)
library(CRTspat)
example_aggregated <- aggregate(example_xy, auxiliaries = c("RDT_test_result", "base_denom"))
example_aggregated <- aggregate(example_xy, auxiliaries = c("RDT_test_result", "base_denom"))
example_aggregated <- aggregate(example_xy, auxiliaries = c("RDT_test_result", "base_denom"))
library(CRTspat)
example_aggregated <- aggregate(example_xy, auxiliaries = c("RDT_test_result", "base_denom"))
View(trial1)
typeof(trial1)
typeof(as.data.frame(trial1))
typeof(data.frame(trial1))
View(trial1)
View(CRT)
CRT <- updateCRT(CRT = CRT, trial = data.frame(trial1))
library(CRTspat)
example_aggregated <- aggregate(example_xy, auxiliaries = c("RDT_test_result", "base_denom"))
ex_clustered <- specify.clusters(example_aggregated, k=k, algo='kmeans')
ex_randomized <- randomizeCRT(ex_clustered)
GEEanalysis <- CRTanalysis(ex_buffered, method='GEE', baselineOnly = TRUE)
GEEanalysis <- CRTanalysis(ex_buffered, method='GEE', baselineOnly = TRUE, baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom")
GEEanalysis <- CRTanalysis(ex_buffered, method='GEE', baselineOnly = TRUE, baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom")
force(trial)
View(trial)
GEEanalysis <- CRTanalysis(ex_buffered, method='GEE', baselineOnly = TRUE, baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom")
sum(trial$y1)
sum.numerators = sum(trial$y1)
sum.denominators = sum(trial$y_off)
description <- list(
sum.numerators = sum.numerators,
sum.denominators = sum.denominators,
controlY = sum.numerators/sum.denominators,
interventionY = NULL,
effect.size = NULL,
nclusters = max(as.numeric(as.character(trial$cluster))),
locations = nrow(trial)
)
library(CRTspat)
GEEanalysis <- CRTanalysis(ex_buffered, method='GEE', baselineOnly = TRUE, baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom")
GEEanalysis
GEEanalysis <- GEEanalysis <- CRTanalysis(ex_buffered,
method='GEE',
baselineOnly = TRUE,
excludeBuffer = TRUE,
baselineNumerator = "RDT_test_result",
baselineDenominator = "base_denom")
GEEanalysis$pt.ests$ICC
? calculateCRTpower
summary(ex_buffered)
ex_buffered$geom.core
summary(GEEanalysis)
library(CRTspat)
GEEanalysis <- GEEanalysis <- CRTanalysis(ex_buffered,
method='GEE',
baselineOnly = TRUE,
excludeBuffer = TRUE,
baselineNumerator = "RDT_test_result",
baselineDenominator = "base_denom")
summary(GEEanalysis)
GEEanalysis$description
GEEanalysis$pt.ests
library(CRTspat)
GEEanalysis <- GEEanalysis <- CRTanalysis(ex_buffered,
method='GEE',
baselineOnly = TRUE,
excludeBuffer = TRUE,
baselineNumerator = "RDT_test_result",
baselineDenominator = "base_denom")
summary(GEEanalysis)
sum(ex_buffered$base_denom)
View(ex_buffered)
sum(ex_buffered$trial$base_denom)
example_aggregated <- aggregate(example_xy, auxiliaries = c("RDT_test_result", "base_denom"))
View(trial1)
View(example_aggregated)
ex_clustered <- specify.clusters(example_aggregated, k = k, algo='kmeans')
ex_randomized <- randomizeCRT(ex_clustered)
ex_buffered <- specify.buffer(ex_randomized, buffer.width = buffer.width)
View(ex_buffered)
GEEanalysis <- CRTanalysis(ex_buffered,
method='GEE',
baselineOnly = TRUE,
excludeBuffer = TRUE,
baselineNumerator = "RDT_test_result",
baselineDenominator = "base_denom")
summary(GEEanalysis)
locations = GEEanalysis$description$locations
powerCalculations = calculateCRTpower(locations = locations,
alpha = 0.05,
desiredPower = 0.8,
effect = 0.3,
yC = GEEanalysis$pt.ests$controlY,
outcome.type = 'p',
N = GEEanalysis$description$sum.denominators/locations,
ICC = GEEanalysis$pt.ests$ICC,
k = k,
sd_h = ex_buffered$geom.core$sd_h)
View(powerCalculations)
summary(powerCalculations)
k_vec <- round(runif(20, min=6, max=60)))
k_vec <- round(runif(20, min=6, max=60))
ICC <- power <- c()
for (k in kvec){
ex_clustered <- specify.clusters(example_aggregated, k = k, algo='kmeans')
ex_randomized <- randomizeCRT(ex_clustered)
ex_buffered <- specify.buffer(ex_randomized, buffer.width = buffer.width)
GEEanalysis <- CRTanalysis(ex_buffered,
method='GEE',
baselineOnly = TRUE,
excludeBuffer = TRUE,
baselineNumerator = "RDT_test_result",
baselineDenominator = "base_denom")
locations <- GEEanalysis$description$locations
ICC_i <- GEEanalysis$pt.ests$ICC
powerCalculations <- calculateCRTpower(
locations = locations,
alpha = 0.05,
desiredPower = 0.8,
effect = 0.3,
yC = GEEanalysis$pt.ests$controlY,
outcome.type = 'p',
N = GEEanalysis$description$sum.denominators/locations,
ICC = ICC_i,
k = k,
sd_h = ex_buffered$geom.core$sd_h)
ICC <- c(ICC, ICC_i)
power <- c(power, powerCalculations$geom_full$power)
}
for (k in k_vec){
ex_clustered <- specify.clusters(example_aggregated, k = k, algo='kmeans')
ex_randomized <- randomizeCRT(ex_clustered)
ex_buffered <- specify.buffer(ex_randomized, buffer.width = buffer.width)
GEEanalysis <- CRTanalysis(ex_buffered,
method='GEE',
baselineOnly = TRUE,
excludeBuffer = TRUE,
baselineNumerator = "RDT_test_result",
baselineDenominator = "base_denom")
locations <- GEEanalysis$description$locations
ICC_i <- GEEanalysis$pt.ests$ICC
powerCalculations <- calculateCRTpower(
locations = locations,
alpha = 0.05,
desiredPower = 0.8,
effect = 0.3,
yC = GEEanalysis$pt.ests$controlY,
outcome.type = 'p',
N = GEEanalysis$description$sum.denominators/locations,
ICC = ICC_i,
k = k,
sd_h = ex_buffered$geom.core$sd_h)
ICC <- c(ICC, ICC_i)
power <- c(power, powerCalculations$geom_full$power)
}
plot(ICC,k_vec)
plot(k_vec, ICC)
plot(k_vec, power)
power
ICC <- powerEstimate <- c()
for (k in k_vec){
ex_clustered <- specify.clusters(example_aggregated, k = k, algo='kmeans')
ex_randomized <- randomizeCRT(ex_clustered)
ex_buffered <- specify.buffer(ex_randomized, buffer.width = buffer.width)
GEEanalysis <- CRTanalysis(ex_buffered,
method='GEE',
baselineOnly = TRUE,
excludeBuffer = TRUE,
baselineNumerator = "RDT_test_result",
baselineDenominator = "base_denom")
locations <- GEEanalysis$description$locations
ICC_i <- GEEanalysis$pt.ests$ICC
powerCalculations <- calculateCRTpower(
locations = locations,
alpha = 0.05,
desiredPower = 0.8,
effect = 0.3,
yC = GEEanalysis$pt.ests$controlY,
outcome.type = 'p',
N = GEEanalysis$description$sum.denominators/locations,
ICC = ICC_i,
k = k,
sd_h = ex_buffered$geom.core$sd_h)
ICC <- c(ICC, ICC_i)
powerEstimate <- c(powerEstimate, powerCalculations$geom_full$power)
}
powerCalculations$geom_full$power
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
library(CRTspat)
source("~/.active-rstudio-document")
View(powerCalculations)
source("~/.active-rstudio-document")
plot(power,k_vec)
plot(powerEstimate,k_vec)
plot(k_vec,powerEstimate)
source("~/.active-rstudio-document")
plot(k_vec,powerEstimate)
source("~/.active-rstudio-document")
plot(k_vec,powerEstimate)
plot(k_vec,ICC)
ggplot(data=df, aes(x=k_vec,y=ICC)) + geom_smooth()
ggplot2::ggplot(data=df, aes(x=k_vec,y=ICC)) + geom_smooth()
df = cbind(k_vec,powerEstimate,ICC)
ggplot2::ggplot(data=df, aes(x=k_vec,y=ICC)) + geom_smooth()
library(ggplot2)
library(ggplot2)
df = cbind(k_vec,powerEstimate,ICC)
ggplot2::ggplot(data=df, aes(x=k_vec,y=ICC)) + geom_smooth()
df = data.frame(cbind(k_vec=k_vec,powerEstimate=powerEstimate,ICC=ICC))
ggplot2::ggplot(data=df, aes(x=k_vec,y=ICC)) + geom_smooth()
source("~/.active-rstudio-document")
df = data.frame(cbind(k_vec=k_vec,powerEstimate=powerEstimate,ICC=ICC))
ggplot2::ggplot(data=df, aes(x=k_vec,y=ICC)) + geom_smooth()
ggplot2::ggplot(data=df, aes(x=k_vec,y=powerEstimate)) + geom_smooth()
df = data.frame(cbind(k_vec=k_vec,powerEstimate=powerEstimate,ICC=ICC))
ggplot2::ggplot(data=df, aes(x=k_vec,y=powerEstimate)) + geom_smooth()
ggplot2::ggplot(data=df, aes(x=k_vec,y=powerEstimate)) + geom_point()
source("~/.active-rstudio-document")
devtools::load_all(".")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
df = data.frame(cbind(k_vec=k_vec,powerEstimate=powerEstimate,ICC=ICC))
ggplot2::ggplot(data=df, aes(x=k_vec,y=powerEstimate)) + geom_point()
ggplot2::ggplot(data=df, aes(x=k_vec,y=powerEstimate)) + ggplot2::geom_smooth()
ggplot2::ggplot(data=df, aes(x=k_vec,y=ICC)) + ggplot2::geom_smooth()
ggplot2::ggplot(data=df, aes(x=k_vec,y=powerEstimate)) + ggplot2::geom_smooth()
View(df)
CRTscenario <- function(k, CRT, buffer.width){
ex_clustered <- specify.clusters(example_aggregated, k = k, algo='kmeans')
ex_randomized <- randomizeCRT(ex_clustered)
ex_buffered <- specify.buffer(ex_randomized, buffer.width = buffer.width)
GEEanalysis <- CRTanalysis(ex_buffered,
method='GEE',
baselineOnly = TRUE,
excludeBuffer = TRUE,
baselineNumerator = "RDT_test_result",
baselineDenominator = "base_denom")
locations <- GEEanalysis$description$locations
ICC <- GEEanalysis$pt.ests$ICC
powerCalculations <- calculateCRTpower(
locations = locations,
alpha = 0.05,
desiredPower = 0.8,
effect = 0.3,
yC = GEEanalysis$pt.ests$controlY,
outcome.type = 'p',
N = GEEanalysis$description$sum.denominators/locations,
ICC = ICC,
k = k,
sd_h = ex_buffered$geom.core$sd_h)
value = list(
power = powerCalculations$geom.full$power
locations = locations,
CRTscenario <- function(k, CRT, buffer.width){
ex_clustered <- specify.clusters(example_aggregated, k = k, algo='kmeans')
ex_randomized <- randomizeCRT(ex_clustered)
ex_buffered <- specify.buffer(ex_randomized, buffer.width = buffer.width)
GEEanalysis <- CRTanalysis(ex_buffered,
method='GEE',
baselineOnly = TRUE,
excludeBuffer = TRUE,
baselineNumerator = "RDT_test_result",
baselineDenominator = "base_denom")
locations <- GEEanalysis$description$locations
ICC <- GEEanalysis$pt.ests$ICC
powerCalculations <- calculateCRTpower(
locations = locations,
alpha = 0.05,
desiredPower = 0.8,
effect = 0.3,
yC = GEEanalysis$pt.ests$controlY,
outcome.type = 'p',
N = GEEanalysis$description$sum.denominators/locations,
ICC = ICC,
k = k,
sd_h = ex_buffered$geom.core$sd_h)
value = list(
power = powerCalculations$geom.full$power,
locations = locations,
ICC = ICC)
return(value)
}
CRTscenario <- function(k, CRT, buffer.width){
ex_clustered <- specify.clusters(CRT, k = k, algo='kmeans')
ex_randomized <- randomizeCRT(ex_clustered)
ex_buffered <- specify.buffer(ex_randomized, buffer.width = buffer.width)
GEEanalysis <- CRTanalysis(ex_buffered,
method='GEE',
baselineOnly = TRUE,
excludeBuffer = TRUE,
baselineNumerator = "RDT_test_result",
baselineDenominator = "base_denom")
locations <- GEEanalysis$description$locations
ICC <- GEEanalysis$pt.ests$ICC
powerCalculations <- calculateCRTpower(
locations = locations,
alpha = 0.05,
desiredPower = 0.8,
effect = 0.3,
yC = GEEanalysis$pt.ests$controlY,
outcome.type = 'p',
N = GEEanalysis$description$sum.denominators/locations,
ICC = ICC,
k = k,
sd_h = ex_buffered$geom.core$sd_h)
value = c(
power = powerCalculations$geom.full$power,
locations = locations,
ICC = ICC)
return(value)
}
k_vec <- round(runif(10, min=6, max=60))
apply(k_vec, 1, fun = CRTscenario, CRT = example_aggregated, buffer.width = 0.2)
CRTscenario <- function(k, CRT, buffer.width){
ex_clustered <- specify.clusters(CRT, k = k, algo='kmeans')
ex_randomized <- randomizeCRT(ex_clustered)
ex_buffered <- specify.buffer(ex_randomized, buffer.width = buffer.width)
GEEanalysis <- CRTanalysis(ex_buffered,
method='GEE',
baselineOnly = TRUE,
excludeBuffer = TRUE,
baselineNumerator = "RDT_test_result",
baselineDenominator = "base_denom")
locations <- GEEanalysis$description$locations
ICC <- GEEanalysis$pt.ests$ICC
powerCalculations <- calculateCRTpower(
locations = locations,
alpha = 0.05,
desiredPower = 0.8,
effect = 0.3,
yC = GEEanalysis$pt.ests$controlY,
outcome.type = 'p',
N = GEEanalysis$description$sum.denominators/locations,
ICC = ICC,
k = k,
sd_h = ex_buffered$geom.core$sd_h)
value = c(
power = powerCalculations$geom.full$power,
locations = locations,
ICC = ICC)
return(value)
}
apply(k_vec, 1, fun = CRTscenario, CRT = example_aggregated, buffer.width = 0.2)
lapply(k_vec, fun = CRTscenario, CRT = example_aggregated, buffer.width = 0.2)
lapply(k_vec, CRTscenario, CRT = example_aggregated, buffer.width = 0.2)
df <- lapply(k_vec, CRTscenario, CRT = example_aggregated, buffer.width = 0.2)
df <- invisible(lapply(k_vec, CRTscenario, CRT = example_aggregated, buffer.width = 0.2))
