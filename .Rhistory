library(Matrix); exampleMesh=new_mesh(trial = readdata('exampleCRT.csv'), pixel = 0.5)
library(Matrix); exampleMesh=new_mesh(trial = readdata('exampleCRT.csv'), pixel = 0.5)
library(CRTspat)
source("C:/git_repos/CRTspat/vignettes/runVignette.R")
# to build package website
usethis::use_pkgdown()
pkgdown::build_site()
summary(analysis)
? summary.CRTanalysis
summary.CRTanalysis(analysis)
summary.CRTanalysis(analysis)
summary.CRTanalysis(analysis)
library(CRTspat)
summary.CRTanalysis(analysis)
summary(analysis)
summary(example_clustered)
summary.CRTanalysis(analysis)
#' Summary of the results of a statistical analysis of a CRT
#'
#' \code{summary.CRTanalysis} generates a summary of a \code{CRTanalysis} including the main results
#' @param object an object of class \code{"CRTanalysis"}
#' @param ... other arguments used by summary
#'
summary.CRTanalysis <- function(object, ...) {
cat("=====================CLUSTER RANDOMISED TRIAL ANALYSIS =================\n")
cat(
"Analysis method: ", object$options$method, "\nLink function: ", object$options$link, "\n"
)
if (!is.null(object$options$ftext))
cat("Model formula: ", object$options$ftext, "\n")
cat(switch(object$options$cfunc,
Z = "No comparison of arms \n",
X = "No modelling of contamination \n",
S = "Piecewise linear function for contamination\n",
P = "Error function model for contamination\n",
L = "Sigmoid (logistic) function for contamination\n"))
CLtext <- paste0(" (", 100 * (1 - object$options$alpha), "% CL: ")
cat(
"Estimates:     Control: ", object$pt.ests$controlY,
CLtext, unlist(object$int.ests$controlY),
")\n"
)
if (!is.null(object$pt.ests$effect.size))
{
if (!is.null(object$pt.ests$interventionY))
{
cat(
"          Intervention: ", object$pt.ests$interventionY,
CLtext, unlist(object$int.ests$interventionY),
")\n"
)
effect.measure <- ifelse(object$options$link == 'identity', "Effect size: ","  Efficacy:  ")
cat("          ",
effect.measure, object$pt.ests$effect.size, CLtext, unlist(object$int.ests$effect.size),
")\n"
)
}
if (!is.na(object$pt.ests$pr.contaminated))
{
cat(
"Proportion of effect subject to contamination: ", object$pt.ests$pr.contaminated,
CLtext, unlist(object$int.ests$pr.contaminated),")\n"
)
}
}
if (!is.null(object$pt.ests$ICC))
{
cat(
"Intracluster correlation (ICC): ", object$pt.ests$ICC,
CLtext, unlist(object$int.ests$ICC),")\n"
)
}
if (!is.na(object$pt.ests$contamination.interval))
{
cat(
"Contamination Range: ", object$pt.ests$contamination.interval,"\n"
)
}
if (!is.null(object$model.object$dic$dic) &
object$options$cfunc %in% c("L", "P"))
{
cat(
"DIC: ", object$model.object$dic$dic, " including penalty for the contamination scale parameter\n"
)
} else if (!is.null(object$model.object$dic$dic))
{
cat("DIC: ", object$model.object$dic$dic, "\n")
}
if (!is.null(object$model.object$p.value)){
cat("P-value (2-sided): ", object$model.object$p.value, "\n")
}
}
summary.CRTanalysis(analysis)
summary(analysis)
library(CRTspat)
summary(analysis)
summary.CRTanalysis(analysis)
summary(analysis)
summary(example_clustered)
summary(example_clustered)
library(CRTspat)
summary(example_clustered)
object <- example_clustered
cat("===============================CLUSTER RANDOMISED TRIAL ===========================\n")
output <- matrix("  ", nrow = 22, ncol = 2)
rownames(output) <- paste0("row ", 1:nrow(output))
rownames(output)[1] <- "Locations and Clusters\n----------------------                                "
output[1, 1] <- "-"
rownames(output)[2] <- "Coordinate system            "
if (!identical(object$trial$x,numeric(0)) & !identical(object$trial$y,numeric(0))) {
output[2, 1] <- "(x, y)"
} else if(!is.null(object$trial$lat)) {
output[2, 1] <- "Lat-Long"
} else {
output[2, 1] <- "No coordinates in dataset"
}
if (identical(unname(output[2, 1]),"(x, y)")) {
cat("\nSummary of coordinates\n----------------------\n")
coordinate.summary <- with(object$trial, summary(cbind(x, y)))
rownames(coordinate.summary) <- substr(coordinate.summary[, 1], 1, 8)
coordinate.summary[, ] <- substr(coordinate.summary[, ], 9, 13)
print(t(coordinate.summary))
xycoords <- data.frame(cbind(x=object$trial$x,y=object$trial$y))
tr <- sf::st_as_sf(xycoords, coords = c("x","y"))
buf1 <- sf::st_buffer(tr, maskbuffer)
buf2 <- sf::st_union(buf1)
area <- sf::st_area(buf2)
cat("Total area (within ", maskbuffer,"km of a location) : ", format(area, digits = 3), "sq.km\n\n")
}
maskbuffer = 0.2
cat("===============================CLUSTER RANDOMISED TRIAL ===========================\n")
output <- matrix("  ", nrow = 22, ncol = 2)
rownames(output) <- paste0("row ", 1:nrow(output))
rownames(output)[1] <- "Locations and Clusters\n----------------------                                "
output[1, 1] <- "-"
rownames(output)[2] <- "Coordinate system            "
if (!identical(object$trial$x,numeric(0)) & !identical(object$trial$y,numeric(0))) {
output[2, 1] <- "(x, y)"
} else if(!is.null(object$trial$lat)) {
output[2, 1] <- "Lat-Long"
} else {
output[2, 1] <- "No coordinates in dataset"
}
if (identical(unname(output[2, 1]),"(x, y)")) {
cat("\nSummary of coordinates\n----------------------\n")
coordinate.summary <- with(object$trial, summary(cbind(x, y)))
rownames(coordinate.summary) <- substr(coordinate.summary[, 1], 1, 8)
coordinate.summary[, ] <- substr(coordinate.summary[, ], 9, 13)
print(t(coordinate.summary))
xycoords <- data.frame(cbind(x=object$trial$x,y=object$trial$y))
tr <- sf::st_as_sf(xycoords, coords = c("x","y"))
buf1 <- sf::st_buffer(tr, maskbuffer)
buf2 <- sf::st_union(buf1)
area <- sf::st_area(buf2)
cat("Total area (within ", maskbuffer,"km of a location) : ", format(area, digits = 3), "sq.km\n\n")
}
rownames(output)[5] <- "Available clusters (across both arms)                 "
View(object)
if (identical(object$geom_full$locations, 0)) {
output[5, 1] <- "Not assigned"
} else {
clustersAvailableFull <- with(object$geom_full, floor(locations/mean_h))
output[5, 1] <- clustersAvailableFull
rownames(output)[6] <- "  Per cluster mean number of points                   "
output[6, 1] <- round(object$geom_full$mean_h, digits = 1)
rownames(output)[7] <- "  Per cluster s.d. number of points                   "
if (!is.null(object$geom_full$sd_h))
output[7, 1] <- round(object$geom_full$sd_h, digits = 1)
}
output
View(object)
object <- CRTsp(object)
View(geom)
summary(example_locations)
summary(example_clustered)
summary(example_randomized)
summary(example_simulated)
summary(example_simulated_CRT)
summary(example2a)
summary(example2aanalysis)
summary(example2aINLA)
summary(example2b)
summary(example40)
summary(example6)
devtools::document()
source("C:/git_repos/CRTspat/vignettes/runVignette.R")
View(example_clustered)
library(CRTspat)
sink()
```r
CRTscenario <- function(k, CRT, buffer.width) {
ex <- specify_clusters(CRT, k = k, algo = "kmeans") %>%
randomizeCRT() %>%
specify_buffer(buffer.width = buffer.width)
sink()
GEEanalysis <- CRTanalysis(ex, method = "GEE", baselineOnly = TRUE, excludeBuffer = TRUE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom")
sink()
locations <- GEEanalysis$description$locations
ex_power <- CRTpower(trial = ex, effect = 0.3, yC = GEEanalysis$pt.ests$controlY,
outcome_type = "p", N = GEEanalysis$description$sum.denominators/locations, k = k,
ICC = GEEanalysis$pt.ests$ICC)
value <- c(k_full = k, k_core = ex_power$geom_core$k, clustersRequired = ex_power$geom_full$clustersRequired,
power = ex_power$geom_full$power, mean_h = ex_power$geom_full$mean_h,
locations = locations, ICC = GEEanalysis$pt.ests$ICC)
return(value)
}
```r
```r
library(CRTspat)
example_locations <- readdata('example_site.csv')
example_locations$base_denom <- 1
exampleCRT <- CRTsp(example_locations)
example <- aggregateCRT(exampleCRT,
auxiliaries = c("RDT_test_result", "base_denom"))
# randomly sample an array of numbers of clusters to allocate
set.seed(5)
k_vec <- round(runif(20, min = 6, max = 60))
CRTscenario <- function(k, CRT, buffer.width) {
ex <- specify_clusters(CRT, k = k, algo = "kmeans") %>%
randomizeCRT() %>%
specify_buffer(buffer.width = buffer.width)
sink()
GEEanalysis <- CRTanalysis(ex, method = "GEE", baselineOnly = TRUE, excludeBuffer = TRUE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom")
sink()
locations <- GEEanalysis$description$locations
ex_power <- CRTpower(trial = ex, effect = 0.3, yC = GEEanalysis$pt.ests$controlY,
outcome_type = "p", N = GEEanalysis$description$sum.denominators/locations, k = k,
ICC = GEEanalysis$pt.ests$ICC)
value <- c(k_full = k, k_core = ex_power$geom_core$k, clustersRequired = ex_power$geom_full$clustersRequired,
power = ex_power$geom_full$power, mean_h = ex_power$geom_full$mean_h,
locations = locations, ICC = GEEanalysis$pt.ests$ICC)
return(value)
}
results <- t(sapply(k_vec, FUN = CRTscenario, simplify = "array", CRT = example,
buffer.width = 0.5)) %>%
data.frame()
library(CRTspat)
example_locations <- readdata('example_site.csv')
example_locations$base_denom <- 1
exampleCRT <- CRTsp(example_locations)
example <- aggregateCRT(exampleCRT,
auxiliaries = c("RDT_test_result", "base_denom"))
# randomly sample an array of numbers of clusters to allocate
set.seed(5)
k_vec <- round(runif(20, min = 6, max = 60))
CRTscenario <- function(k, CRT, buffer.width) {
ex <- specify_clusters(CRT, k = k, algo = "kmeans") %>%
randomizeCRT() %>%
specify_buffer(buffer.width = buffer.width)
invisible(capture.output(
GEEanalysis <- CRTanalysis(ex, method = "GEE", baselineOnly = TRUE, excludeBuffer = TRUE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom")
))
locations <- GEEanalysis$description$locations
ex_power <- CRTpower(trial = ex, effect = 0.3, yC = GEEanalysis$pt.ests$controlY,
outcome_type = "p", N = GEEanalysis$description$sum.denominators/locations, k = k,
ICC = GEEanalysis$pt.ests$ICC)
value <- c(k_full = k, k_core = ex_power$geom_core$k, clustersRequired = ex_power$geom_full$clustersRequired,
power = ex_power$geom_full$power, mean_h = ex_power$geom_full$mean_h,
locations = locations, ICC = GEEanalysis$pt.ests$ICC)
return(value)
}
results <- t(sapply(k_vec, FUN = CRTscenario, simplify = "array", CRT = example,
buffer.width = 0.5)) %>%
data.frame()
View(results)
source("C:/git_repos/CRTspat/vignettes/runVignette.R")
set.seed(1234)
# Simulate a site with 2000 locations
new_site <- CRTsp(geoscale = 2, locations=2000, kappa=3, mu=40)
library(CRTspat)
set.seed(1234)
# Simulate a site with 2000 locations
new_site <- CRTsp(geoscale = 2, locations=2000, kappa=3, mu=40)
# propensity surface generated as an arbitrary linear function of x the co-ordinate
new_site$propensity <- 0.5*new_site$trial$x - min(new_site$trial$x)+1
library(dplyr)
invisible(capture.output(
example2b<- CRTsp(new_site) %>%
specify_clusters(h = 40, algorithm = 'NN') %>%
randomizeCRT(matchedPair = FALSE) %>%
simulateCRT(example_simulated,
effect = 0.8,
outcome0 = 0.5,
generateBaseline = TRUE,
ICC_inp = 0.05,
theta_inp = 0.5)
))
summary(example2b)
results2b <- CRTanalysis(example2b, method = 'GEE')
summary(results2b)
plot(example, map = TRUE, showLocations = TRUE, maskbuffer = 0.2)
plot(results2b)
plot(example, map = TRUE, fill = 'clusters' = TRUE, maskbuffer = 0.2)
plot(example, map = TRUE, fill = 'clusters', maskbuffer = 0.2)
plot(example, map = TRUE, fill = 'cluster', maskbuffer = 0.2)
plot(example2b, map = TRUE, fill = 'cluster', maskbuffer = 0.2)
plot(example2b, map = TRUE, fill = 'cluster', maskbuffer = 0.5)
library(CRTspat)
plot(example2b, map = TRUE, fill = 'clusters', maskbuffer = 0.5)
plot(example2b, map = TRUE, fill = 'clusters', showClusterLabels = TRUE, maskbuffer = 0.5)
library(CRTspat)
source("C:/git_repos/CRTspat/vignettes/runVignette.R")
summary(example2aanalysis)
library(CRTspat)
summary(example2aanalysis)
library(CRTspat)
formatR::tidy_file("R/plotCRT.R",arrow = TRUE, width.cutoff = 72)
library(CRTspat)
exampleGEE = CRTanalysis(readdata("exampleCRT.csv"), method = "GEE")
summary(exampleGEE)
summary.CRTanalysis(exampleGEE)
library(CRTspat)
summary.CRTanalysis(exampleGEE)
#' Summary of the results of a statistical analysis of a CRT
#'
#' \code{summary.CRTanalysis} generates a summary of a \code{CRTanalysis} including the main results
#' @param object an object of class \code{"CRTanalysis"}
#' @param ... other arguments used by summary
#'
summary.CRTanalysis <- function(object, ...) {
cat("=====================CLUSTER RANDOMISED TRIAL ANALYSIS =================\n")
cat(
"Analysis method: ", object$options$method, "\nLink function: ", object$options$link, "\n"
)
if (!is.null(object$options$ftext))
cat("Model formula: ", object$options$ftext, "\n")
cat(switch(object$options$cfunc,
Z = "No comparison of arms \n",
X = "No modelling of contamination \n",
S = "Piecewise linear function for contamination\n",
P = "Error function model for contamination\n",
L = "Sigmoid (logistic) function for contamination\n"))
CLtext <- paste0(" (", 100 * (1 - object$options$alpha), "% CL: ")
cat(
"Estimates:     Control: ", object$pt_ests$controlY,
CLtext, unlist(object$int_ests$controlY),
")\n"
)
if (!is.null(object$pt_ests$effect.size))
{
if (!is.null(object$pt_ests$interventionY))
{
cat(
"          Intervention: ", object$pt_ests$interventionY,
CLtext, unlist(object$int_ests$interventionY),
")\n"
)
effect.measure <- ifelse(object$options$link == 'identity', "Effect size: ","  Efficacy:  ")
cat("          ",
effect.measure, object$pt_ests$effect.size, CLtext, unlist(object$int_ests$effect.size),
")\n"
)
}
if (!is.na(object$pt_ests$pr.contaminated))
{
cat(
"Proportion of effect subject to contamination: ", object$pt_ests$pr.contaminated,
CLtext, unlist(object$int_ests$pr.contaminated),")\n"
)
}
}
if (!is.null(object$pt_ests$ICC))
{
cat(
"Intracluster correlation (ICC): ", object$pt_ests$ICC,
CLtext, unlist(object$int_ests$ICC),")\n"
)
}
if (!is.na(object$pt_ests$contamination.interval))
{
cat(
"Contamination Range: ", object$pt_ests$contamination.interval,"\n"
)
}
if (!is.null(object$model_object$dic$dic) &
object$options$cfunc %in% c("L", "P"))
{
cat(
"DIC: ", object$model_object$dic$dic, " including penalty for the contamination scale parameter\n"
)
} else if (!is.null(object$model_object$dic$dic))
{
cat("DIC: ", object$model_object$dic$dic, "\n")
}
if (!is.null(object$model_object$p.value)){
cat("P-value (2-sided): ", object$model_object$p.value, "\n")
}
}
summary.CRTanalysis(exampleGEE)
library(CRTspat)
exampleGEE = CRTanalysis(readdata("exampleCRT.csv"), method = "GEE")
summary.CRTanalysis(exampleGEE)
exampleGEE = CRTanalysis(readdata("exampleCRT.csv"), method = "T")
exampleT = CRTanalysis(readdata("exampleCRT.csv"), method = "T")
exampleGEE = CRTanalysis(readdata("exampleCRT.csv"), method = "GEE")
library(CRTspat)
library(CRTspat)
devtools::document()
source("C:/git_repos/CRTspat/vignettes/runVignette.R")
devtools::document()
library(CRTspat)
source("C:/git_repos/CRTspat/vignettes/runVignette.R")
library(CRTspat)
set.seed(1234)
example_locations <- readdata('example_site.csv')
example_locations$base_denom <- 1
library(dplyr)
example_randomized <- CRTsp(example_locations) %>%
aggregateCRT(auxiliaries = c("RDT_test_result", "base_denom")) %>%
specify_clusters(h = 50, algorithm = 'NN') %>%
randomizeCRT(matchedPair = FALSE)
summary(example_randomized)
example2a <- simulateCRT(example_randomized,
effect = 0.8,
outcome0 = 0.5,
generateBaseline = FALSE,
baselineNumerator = "RDT_test_result",
baselineDenominator = "base_denom",
ICC_inp = NULL, theta_inp = 0.8)
summary(example2a)
library(Matrix)
examplemesh100 <- readdata("examplemesh100.txt")
example2aanalysis <- CRTanalysis(trial=example2a, method = 'T')
summary(example2aanalysis)
example2aINLA <- CRTanalysis(trial=example2a,
method = 'INLA', link='logit', cfunc = 'X',
clusterEffects = TRUE,
requireMesh = TRUE, inla_mesh = examplemesh100)
example2aINLA <- CRTanalysis(trial=example2a,
method = 'INLA', link='logit', cfunc = 'X',
clusterEffects = TRUE,
requireMesh = FALSE)
example2aINLA <- CRTanalysis(trial=example2a,
method = 'INLA', link='logit', cfunc = 'X',
clusterEffects = TRUE,
requireMesh = FALSE)
library(CRTspat)
library(Matrix); exampleMesh=new_mesh(trial = readdata('exampleCRT.csv'), pixel = 0.5)
View(exampleMesh)
library(CRTspat)
requireMesh = FALSE)
library(Matrix); exampleMesh=new_mesh(trial = readdata('exampleCRT.csv'), pixel = 0.5)
example2aINLA <- CRTanalysis(trial=example2a,
method = 'INLA', link='logit', cfunc = 'X',
clusterEffects = TRUE,
requireMesh = FALSE)
library(CRTspat)
example2aINLA <- CRTanalysis(trial=example2a,
method = 'INLA', link='logit', cfunc = 'X',
clusterEffects = TRUE,
requireMesh = FALSE)
if ("f(cluster, model = \'iid\')" %in% fterms) df$cluster = trial$cluster
effectse <- list(df = df, s = inla_mesh$indexs)
library(CRTspat)
summary(baselineanalysis)
summary(example_randomized
)
summary(example40)
devtools::document()
source("C:/git_repos/CRTspat/vignettes/runVignette.R")
library(CRTspat)
source("C:/git_repos/CRTspat/vignettes/runVignette.R")
library(CRTspat)
source("C:/git_repos/CRTspat/vignettes/runVignette.R")
detach("package:CRTspat", unload = TRUE)
# knitr::knit("vignettes/Usecase5.Rmd.orig", output = "vignettes/Usecase5.Rmd")
rmarkdown.html_vignette.check_title = FALSE
devtools::install(build_vignettes = TRUE)
detach("package:CRTspat", unload = TRUE)
# knitr::knit("vignettes/Usecase5.Rmd.orig", output = "vignettes/Usecase5.Rmd")
rmarkdown.html_vignette.check_title = FALSE
devtools::install(build_vignettes = TRUE)
# knitr::knit("vignettes/Usecase5.Rmd.orig", output = "vignettes/Usecase5.Rmd")
rmarkdown.html_vignette.check_title = FALSE
devtools::install(build_vignettes = TRUE)
library(CRTspat)
update(rlang)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
devtools::install(build_vignettes = TRUE)
remove.packages(rlang)
remove.packages(rlang)
install.packages(rlang)
install.packages("https://cran.r-project.org/src/contrib/Archive/rlang/rlang_1.1.0.tar.gz", repo=NULL, type="source")
remove.packages(rlang)
? update
library(CRTspat)
install.packages("rlang")
library(CRTspat)
remove.packages("spatstat.geom")
remove.packages("spatstat.random")
detach.packages("Matrix")
detach.package("Matrix")
detach_packages("Matrix")
? packages.detach("Matrix")
? package.detach("Matrix")
detach(package:Matrix,unload=TRUE)
detach(package:spatstat.data,unload=TRUE)
detach(package:spatstat,unload=TRUE)
detach("package:spatstat.data",unload=TRUE)
detach("package:spatstat",unload=TRUE)
detach("spatstat",unload=TRUE)
detach("spatstat.geom",unload=TRUE)
detach("package:stats", unload = TRUE)
detach("package:utils", unload = TRUE)
detach("CRTspat",unload=TRUE)
detach("package:CRTspat",unload=TRUE)
detach(package:CRTspat,unload=TRUE)
