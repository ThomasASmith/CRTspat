y = sum(y1),
total = sum(y_off),
arm = arm[1],
unadjusted_expectation = sum(fitted),
adjusted_expectation = sum(adjusted_expectation)
)
)
clusterSum
clusterSum$adjusted_y <- with(clusterSum, y * adjusted_expectation/unadjusted_expectation)
clusterSum$outcome <- switch(link,
"identity" = clusterSum$adjusted_y/clusterSum$total,
"log" = log(clusterSum$adjusted_y/clusterSum$total),
"logit" = logit(clusterSum$adjusted_y/clusterSum$total))
clusterSum
identical(CRT$design$disc$scale_par, 1)
identical(CRT$design$disc$scale_par, NA)
identical(CRT$design$disc$scale_par, NULL)
CRT_new <- randomizeCRT(trial = CRT, matchedPair = FALSE)
library(CRTspat)
? stats::sd
usethis::use_import_from('stats',sd)
usethis::use_import_from('stats','sd')
test_locationsLatLong <- readdata("example_latlong.csv")
testLocationsxy <- latlong_as_xy(test_locationsLatLong)
test_buffered <- CRTsp(testLocationsxy) %>%
specify_clusters(h = 50, algorithm = 'NN') %>%
randomizeCRT(matchedPair = FALSE) %>%
specify_buffer(buffer_width = 0.05)
test_buffered <- CRTsp(testLocationsxy) %>%
specify_clusters(h = 50, algorithm = 'NN')
test_buffered <- CRTsp(testLocationsxy) %>%
specify_clusters(h = 50, algorithm = 'NN') %>%
randomizeCRT(matchedPair = FALSE)
test_buffered <- CRTsp(testLocationsxy) %>%
specify_clusters(h = 50, algorithm = 'NN') %>%
randomizeCRT(matchedPair = FALSE)
test_buffered <- CRTsp(testLocationsxy) %>%
specify_clusters(h = 50, algorithm = 'NN') %>%
randomizeCRT(matchedPair = FALSE)
test_buffered <- CRTsp(testLocationsxy) %>%
specify_clusters(h = 50, algorithm = 'NN') %>%
randomizeCRT(matchedPair = FALSE)
test_buffered <- CRTsp(testLocationsxy) %>%
specify_clusters(h = 50, algorithm = 'NN') %>%
randomizeCRT(matchedPair = FALSE) %>%
specify_buffer(buffer_width = 0.05)
aov <- summary(aov(data = trial, formula = formula))
aov(data = trial, formula = formula)
head(trial)
is.factor(trial$cluster)
test_buffered <- CRTsp(testLocationsxy) %>%
specify_clusters(h = 50, algorithm = 'NN') %>%
randomizeCRT(matchedPair = FALSE) %>%
specify_buffer(buffer_width = 0.05)
head(trial)
table(trial$cluster,trial$arm)
head(testLocationsxy)
head(testLocationsxy$trial)
nrows(testLocationsxy$trial)
nrow(testLocationsxy$trial)
readdata("example_design.txt")
null_distribution <- c()
for(randomisation in 1:10) {
CRT_new <- randomizeCRT(trial = CRT, matchedPair = FALSE)
counterfactual <- CRTanalysis(trial = CRT_new, method = "LME4", distance = "kern", cfunc = 'E')
null_distribution <- c(null_distribution, counterfactual$pt_ests$effect_size)
}
null_distribution
plot(null_distribution)
table(CRT$trial$cluster)
table(CRT_new$trial$cluster)
CRT_new$trial$cluster <- NULL
table(CRT$trial$cluster)
CRT_new <- randomizeCRT(trial = CRT, matchedPair = FALSE)
table(CRT$trial$cluster,CRT_new$trial$cluster)
table(CRT$trial$kern,CRT_new$trial$kern)
CRT_new <- randomizeCRT(trial = CRT, matchedPair = FALSE)
counterfactual <- CRTanalysis(trial = CRT_new, method = "LME4", distance = "kern", cfunc = 'E')
analysis <- CRTanalysis(trial = CRT, method = "LME4", distance = "kern", cfunc = 'E')
plot(counterfactual$trial$kern,analysis$trial$kern)
corr(counterfactual$trial$kern,analysis$trial$kern)
correlation(counterfactual$trial$kern,analysis$trial$kern)
cor(counterfactual$trial$kern,analysis$trial$kern)
counterfactual$pt_ests
analysis$pt_ests
df <- read.table(file = "C:/Users/smith/Documents/documents/Current Projects/Multerer/biom13316-sup-0001-suppmat/R functions/Trujillo.txt")
trujillo <- with(df, data.frame(num = y, denom = L, x = EASTING - mean(EASTING), cluster = CLUSTER, pair = PAIR))
trujillo$y <- df$NORTHING - mean(df$NORTHING)
trujillo$arm <- ifelse(df$t == 1, "intervention","control")
trujillo <- CRTsp(trujillo)
null_distribution <- c()
for(randomisation in 1:10) {
CRT_new <- randomizeCRT(trial = trujillo, matchedPair = FALSE)
counterfactual <- CRTanalysis(trial = CRT_new, method = "LME4", distance = "kern", cfunc = 'E')
null_distribution <- c(null_distribution, counterfactual$pt_ests$effect_size)
}
for(randomisation in 1:10) {
CRT_new <- randomizeCRT(trial = trujillo, matchedPair = FALSE)
counterfactual <- CRTanalysis(trial = CRT_new, link = "log", method = "LME4", distance = "kern", cfunc = 'E')
null_distribution <- c(null_distribution, counterfactual$pt_ests$effect_size)
}
null_distribution
analysis <- CRTanalysis(trial = trujillo, link = "log", method = "LME4", distance = "kern", cfunc = 'E')
analysis$pt_ests$effect_size
cor(counterfactual$trial$kern,analysis$trial$kern)
table(counterfactual$trial$arm,analysis$trial$arm)
cor(counterfactual$trial$nearestDiscord,analysis$trial$nearestDiscord)
head(analysis$trial$nearestDiscord)
analysis <- CRTanalysis(trial = trujillo, link = "log", method = "LME4", distance = "disc", cfunc = 'E')
analysis$pt_ests$effect_size
analysis$int_ests$effect_size
disc_distribution <- analysis$pt_ests$effect_size
hdep_analysis <- CRTanalysis(trial = trujillo, link = "log", method = "LME4", distance = "hdep")
summary(hdep_analysis)
hdep_distribution <- hdep_analysis$pt_ests$effect_size
for(randomisation in 1:20) {
CRT_new <- randomizeCRT(trial = trujillo, matchedPair = FALSE)
hdep_counterfactual <- CRTanalysis(trial = CRT_new, link = "log", method = "LME4", distance = "hdep")
hdep_distribution <- c(hdep_distribution, hdep_counterfactual$pt_ests$effect_size)
disc_counterfactual <- CRTanalysis(trial = CRT_new, link = "log", method = "LME4", distance = "disc", cfunc = 'E')
disc_distribution <- c(disc_distribution, disc_counterfactual$pt_ests$effect_size)
}
disc_distribution
plot(disc_distribution, hdep_distribution)
plot(disc_distribution[disc_distribution > 0], hdep_distribution[disc_distribution > 0])
cor(disc_distribution[disc_distribution > 0], hdep_distribution[disc_distribution > 0])
head(trial)
dist_trial <- as.matrix(dist(cbind(trial$x, trial$y), method = "euclidean"))
colSums(dnorm(dist_trial, mean = 0, sd = scale_par)
)
scale_par = 0.15
colSums(dnorm(dist_trial, mean = 0, sd = scale_par))
weighted_neighbours <- colSums(dnorm(dist_trial, mean = 0, sd = scale_par))
trial$kern <- (weighted_neighbours * matrix(data = (trial$arm == 'intervention'),
nrow = nrow(trial), ncol = nrow(trial)))
trial$kern <- (weighted_neighbours * matrix(data = (trial$arm == 'intervention'),
nrow = nrow(trial), ncol = nrow(trial)))/weighted_neighbours
junk <- (matrix(data = (trial$arm == 'intervention'),
nrow = nrow(trial), ncol = nrow(trial)))
plot(trial$kern,trial$disc)
plot(trial$kern[trial$disc < 1],trial$disc[trial$disc < 1])
hist(trial$kern)
hist(trial$disc)
neighbours <- colSums(dist_trial <= scale_par)
intervened_neighbours <- colSums(trial$arm =='intervention' & (dist_trial <= scale_par))
trial$disc <- intervened_neighbours/neighbours
trial$disc <- intervened_neighbours/neighbours
hist(trial$disc)
hist(trial$kern)
head(trial)
junk <- (weighted_neighbours * matrix(data = (trial$arm == 'intervention'),
nrow = nrow(trial), ncol = nrow(trial)))
junk <- (weighted_neighbours %*% matrix(data = (trial$arm == 'intervention'),
nrow = nrow(trial), ncol = nrow(trial)))
head(junk)
weighted_neighbours
junk <- (matrix(data = (trial$arm == 'intervention'),
nrow = nrow(trial), ncol = nrow(trial)))
head(junk)
ifelse(junk, 1, 0)
table(neighbours)
table(trial$arm)
trial$kern <- (colSums(dnorm(dist_trial, mean = 0, sd = scale_par)) * matrix(data = (trial$arm == 'intervention'),
nrow = nrow(trial), ncol = nrow(trial)))/weighted_neighbours
head(trial$kern)
(colSums(dnorm(dist_trial, mean = 0, sd = scale_par)) * matrix(data = (trial$arm == 'intervention'),
nrow = nrow(trial), ncol = nrow(trial)))
trial$kern <- NULL
head(trial)
trial$kern <- (colSums(dnorm(dist_trial, mean = 0, sd = scale_par)) * matrix(data = (trial$arm == 'intervention'),
nrow = nrow(trial), ncol = nrow(trial)))/weighted_neighbours
head(trial)
(colSums(dnorm(dist_trial, mean = 0, sd = scale_par)) * matrix(data = (trial$arm == 'intervention'),
nrow = nrow(trial), ncol = nrow(trial)))
trial$kern <- NULL
trial$kern <- as.vector(colSums(dnorm(dist_trial, mean = 0, sd = scale_par)) %*% matrix(data = (trial$arm == 'intervention'),
nrow = nrow(trial), ncol = nrow(trial)))/weighted_neighbours
head(trial)
trial$weighted_neighbours <- weighted_neighbours
head(trial)
trial$kern <- as.vector(colSums(dnorm(dist_trial, mean = 0, sd = scale_par)) %*% matrix(data = (trial$arm == 'intervention'),
nrow = nrow(trial), ncol = nrow(trial)))
head(trial)
trial$kern <- as.vector(colSums(dnorm(dist_trial, mean = 0, sd = scale_par)) * matrix(data = (trial$arm == 'intervention'),
nrow = nrow(trial), ncol = nrow(trial)))
trial$kern <- colSums(dnorm(dist_trial, mean = 0, sd = scale_par) * matrix(data = (trial$arm == 'intervention'),
nrow = nrow(trial), ncol = nrow(trial)))
head(trial)
weighted_neighbours <- colSums(dnorm(dist_trial, mean = 0, sd = scale_par))
weighted_intervened <- colSums(dnorm(dist_trial, mean = 0, sd = scale_par) %*% matrix(data = (trial$arm == 'intervention'),
nrow = nrow(trial), ncol = nrow(trial)))
weighted_intervened <- colSums(dnorm(dist_trial, mean = 0, sd = scale_par) * matrix(data = (trial$arm == 'intervention'),
nrow = nrow(trial), ncol = nrow(trial)))
trial$kern <- weighted_intervened/weighted_neighbours
weighted_neighbours <- colSums(dnorm(dist_trial, mean = 0, sd = scale_par))
weighted_intervened <- colSums(dnorm(dist_trial, mean = 0, sd = scale_par) * matrix(data = (trial$arm == 'intervention'),
nrow = nrow(trial), ncol = nrow(trial)))
trial$kern <- weighted_intervened/weighted_neighbours
plot(trial$disc,trial$kern)
scale_par = 2
neighbours <- colSums(dist_trial <= scale_par)
intervened_neighbours <- colSums(trial$arm =='intervention' & (dist_trial <= scale_par))
trial$disc <- intervened_neighbours/neighbours
weighted_neighbours <- colSums(dnorm(dist_trial, mean = 0, sd = scale_par))
weighted_intervened <- colSums(dnorm(dist_trial, mean = 0, sd = scale_par) * matrix(data = (trial$arm == 'intervention'),
nrow = nrow(trial), ncol = nrow(trial)))
trial$kern <- weighted_intervened/weighted_neighbours
plot(trial$disc,trial$kern)
library(CRTspat)
disc_analysis <- CRTanalysis(trial = trujillo, link = "log", method = "LME4", distance = "disc", cfunc = 'E')
plotCRT(disc_analysis)
kern_analysis <- CRTanalysis(trial = trujillo, link = "log", method = "LME4", distance = "kern", cfunc = 'E')
plotCRT(kern_analysis)
summary(kern_analysis)
head(trial)
trial$hdep <- distance_stats(trial, distance = "hdep")
devtools::load_all(".")
trial$hdep <- distance_stats(trial, distance = "hdep")
head(trial)
table(trial$cluster)
trial$hdep <- distance_stats(trial, distance = "hdep")
depthlist <- apply(trial, MARGIN = 1, FUN = depths, trial = trial)
depth_df <- as.data.frame(do.call(rbind, lapply(depthlist, as.data.frame)))
trial <- cbind(trial,depth_df)
depthlist <- apply(trial, MARGIN = 1, FUN = depths, trial = trial)
depth_df <- as.data.frame(do.call(rbind, lapply(depthlist, as.data.frame)))
trial <- cbind(trial,depth_df)
triali <- triali
triali <- trial
triali$arm <- "intervention"
depthilist <- apply(trial, MARGIN = 1, FUN = depths, trial = triali)
depthi_df <- as.data.frame(do.call(rbind, lapply(depthilist, as.data.frame)))
head(depthi_df)
plot(depth_df$hdep, depthi_df$hdep)
hist(depth_df$hdep/depthi_df$hdep)
plot(depth_df$sdep, depthi_df$sdep)
hist(depth_df$sdep/depthi_df$sdep)
hist(depth_df$sdep)
hist(depthi_df$sdep)
trial <- trujillo$trial
triali <- trial
triali$arm <- "intervention"
depthilist <- apply(trial, MARGIN = 1, FUN = depths, trial = triali)
depthi_df <- as.data.frame(do.call(rbind, lapply(depthilist, as.data.frame)))
depthlist <- apply(trial, MARGIN = 1, FUN = depths, trial = trial)
depth_df <- as.data.frame(do.call(rbind, lapply(depthlist, as.data.frame)))
depthlist <- apply(trial, MARGIN = 1, FUN = depths, trial = trial)
depth_df <- as.data.frame(do.call(rbind, lapply(depthlist, as.data.frame)))
CRT$design$hdep <- distance_stats(trial, distance = "hdep")
as.data.frame(do.call(rbind, lapply(depthlist, as.data.frame)))
depth_df <- as.data.frame(do.call(rbind, lapply(depthlist, as.data.frame)))
depth_df0 <- as.data.frame(do.call(rbind, lapply(depthlist, as.data.frame)))
depth_df <- depth_df0
depth_df
head(depth_df)
head(depth_df0)
plot(depth_df$sdep, depthi_df$sdep)
hist(depth_df$sdep/depthi_df$sdep)
hist(depthi_df$sdep/depth_df$sdep)
hist(depth_df$sdep/depthi_df$sdep)
hist(depth_df$hdep/depthi_df$hdep)
summary(depth_df$hdep/depthi_df$hdep)
triali <- trial
triali$arm <- 'control'
depthilist <- apply(trial, MARGIN = 1, FUN = depths, trial = triali)
devtools::load_all(".")
depthilist <- apply(trial, MARGIN = 1, FUN = depths, trial = triali)
triali$arm <- 'intervention'
depthilist <- apply(trial, MARGIN = 1, FUN = depths, trial = triali)
depthi_df <- as.data.frame(do.call(rbind, lapply(depthilist, as.data.frame)))
depth_df$hdep <- depth_df$hdep/depthi_df$hdep
depth_df$sdep <- depth_df$sdep/depthi_df$sdep
trial <- cbind(trial,depth_df)
CRT$design$hdep <- distance_stats(trial, distance = "hdep")
CRT$design$sdep <- distance_stats(trial, distance = "sdep")
trial$hdep <- trial$hdep/max(trial$hdep)
trial$sdep <- trial$sdep/max(trial$sdep)
library(CRTspat)
hdep_analysis <- CRTanalysis(trial = trujillo, link = "log", method = "LME4", distance = "hdep")
summary(hdep_analysis)
plotCRT(hdep_analysis)
for(randomisation in 1:20) {
CRT_new <- randomizeCRT(trial = trujillo, matchedPair = FALSE)
hdep_counterfactual <- CRTanalysis(trial = CRT_new, link = "log", method = "LME4", distance = "hdep")
hdep_distribution <- c(hdep_distribution, hdep_counterfactual$pt_ests$effect_size)
}
hdep_distribution <- hdep_analysis$pt_ests$effect_size
for(randomisation in 1:20) {
CRT_new <- randomizeCRT(trial = trujillo, matchedPair = FALSE)
hdep_counterfactual <- CRTanalysis(trial = CRT_new, link = "log", method = "LME4", distance = "hdep")
hdep_distribution <- c(hdep_distribution, hdep_counterfactual$pt_ests$effect_size)
}
hdep_distribution
hist(hdep_distribution)
summary(hdep_distribution)
? compute_distance()
library(CRTspat)
example <- readdata("exampleCRT.txt")
examples <- compute_distance(example, distance = "hdep")
examples <- compute_distance(examples, distance = "disc", scale_par = 0.15)
examples <- compute_distance(examples, distance = "kern", scale_par = 0.15)
ps1 <- plotCRT(examples, distance = "hdep", legend.position = c(0.8, 0.8))
ps2 <- plotCRT(examples, distance = "sdep")
ps3 <- plotCRT(examples, distance = "disc")
ps3 <- plotCRT(examples, distance = "disc")
examples <- compute_distance(example, distance = "hdep")
ps1 <- plotCRT(examples, distance = "hdep", legend.position = c(0.8, 0.8))
ps2 <- plotCRT(examples, distance = "sdep")
examples <- compute_distance(examples, distance = "disc", scale_par = 0.15)
ps3 <- plotCRT(examples, distance = "disc")
example$design
View(analysis)
View(example)
library(CRTspat)
examples <- compute_distance(example, distance = "hdep")
examples <- compute_distance(examples, distance = "disc", scale_par = 0.15)
examples <- compute_distance(examples, distance = "kern", scale_par = 0.15)
ps1 <- plotCRT(examples, distance = "hdep", legend.position = c(0.8, 0.8))
ps2 <- plotCRT(examples, distance = "sdep")
ps3 <- plotCRT(examples, distance = "disc")
ps4 <- plotCRT(examples, distance = "kern")
plot_grid(ps1, ps2, ps3, ps4, labels = c('hdep', 'sdep', 'disc', 'kern'), label_size = 10, ncol = 2)
library(cowplot)
plot_grid(ps1, ps2, ps3, ps4, labels = c('hdep', 'sdep', 'disc', 'kern'), label_size = 10, ncol = 2)
summary(examples$trial$hdep)
examples <- compute_distance(example, distance = "hdep")
examples <- compute_distance(example, distance = "hdep")
examples <- compute_distance(example, distance = "hdep")
head(depthlist)
examples <- compute_distance(example, distance = "hdep")
head(trial)
head(X)
u
v
table(trial$arm)
examples <- compute_distance(example, distance = "hdep")
depths(X = trial[1,], trial= trial)
depths(X = trial[1,], trial= trial)
trial[1,]
length(trial[1,])
depths(X = trial[4,], trial= trial)
library(CRTspat)
examples <- compute_distance(example, distance = "hdep")
examples <- compute_distance(example, distance = "hdep")
head(examples$trial)
examples <- compute_distance(example, distance = "hdep")
library(CRTspat)
examples <- compute_distance(example, distance = "hdep")
head(examples$trial)
examples <- compute_distance(example, distance = "hdep")
depths(X = trial[1,], trial= trial)
numh
ki
fval[1]
nn
numh
examples <- compute_distance(example, distance = "hdep")
head(examples$trial)
examples <- compute_distance(example, distance = "hdep")
depth_df <- as.data.frame(do.call(rbind, lapply(depthlist, as.data.frame)))
depth_df
triali <- trial
triali$arm <- 'intervention'
depthilist <- apply(trial, MARGIN = 1, FUN = depths, trial = triali)
depthi_df <- as.data.frame(do.call(rbind, lapply(depthilist, as.data.frame)))
summary(depthi_df)
hist(depthi_df$hdep - depth_df$hdep)
hist(depthi_df$hdep /depth_df$hdep)
hist(depth_df$hdep - depthi_df$hdep)
plot(depth_df$hdep , depthi_df$hdep)
plot(depth_df$sdep , depthi_df$sdep)
summary(depth_df$sdep * depthi_df$sdep)
summary(depth_df$hdep * depthi_df$hdep)
library(CRTspat)
examples <- compute_distance(example, distance = "hdep")
plot(depth_df$hdep , depthc_df$hdep)
depthc_df <- as.data.frame(do.call(rbind, lapply(depthclist, as.data.frame)))
plot(depth_df$hdep , depthc_df$hdep)
summary(depth_df$hdep * depthc_df$hdep)
hist(depth_df$hdep/(depth_df$hdep + depthc_df$hdep))
hist(depth_df$sdep/(depth_df$sdep + depthc_df$sdep))
plot(trial$nearestDiscord,(depth_df$sdep/(depth_df$sdep + depthc_df$sdep)))
library(CRTspat)
examples <- compute_distance(example, distance = "hdep")
examples <- compute_distance(examples, distance = "disc", scale_par = 0.15)
examples <- compute_distance(examples, distance = "kern", scale_par = 0.15)
ps1 <- plotCRT(examples, distance = "hdep", legend.position = c(0.8, 0.8))
ps2 <- plotCRT(examples, distance = "sdep")
ps3 <- plotCRT(examples, distance = "disc")
ps4 <- plotCRT(examples, distance = "kern")
plot_grid(ps1, ps2, ps3, ps4, labels = c('hdep', 'sdep', 'disc', 'kern'), label_size = 10, ncol = 2)
examples <- compute_distance(example, distance = "hdep")
library(CRTspat)
example <- readdata("exampleCRT.txt")
examples <- compute_distance(example, distance = "hdep")
library(CRTspat)
examples <- compute_distance(example, distance = "hdep")
examples <- compute_distance(examples, distance = "disc", scale_par = 0.5)
examples <- compute_distance(examples, distance = "kern", scale_par = 0.5)
ps1 <- plotCRT(examples, distance = "hdep", legend.position = c(0.8, 0.8))
ps2 <- plotCRT(examples, distance = "sdep")
ps3 <- plotCRT(examples, distance = "disc")
ps4 <- plotCRT(examples, distance = "kern")
plot_grid(ps1, ps2, ps3, ps4, labels = c('hdep', 'sdep', 'disc', 'kern'), label_size = 10, ncol = 2)
head(examples$trial)
library(CRTspat)
examples <- compute_distance(example, distance = "hdep")
examples <- compute_distance(examples, distance = "disc", scale_par = 0.5)
examples <- compute_distance(examples, distance = "kern", scale_par = 0.5)
ps1 <- plotCRT(examples, distance = "hdep", legend.position = c(0.8, 0.8))
ps2 <- plotCRT(examples, distance = "sdep")
ps3 <- plotCRT(examples, distance = "disc")
ps4 <- plotCRT(examples, distance = "kern")
plot_grid(ps1, ps2, ps3, ps4, labels = c('hdep', 'sdep', 'disc', 'kern'), label_size = 10, ncol = 2)
head(depthi_df)
summary(depthi_df)
summary(depthc_df)
depthi_df$hdep/(depthc_df$hdep + depthi_df$hdep)
summary(trial$hdep)
summary(trial$sdep)
which(is.na(trial$hdep))
depthc_df[which(is.na(trial$hdep))]
depthc_df$hdep[which(is.na(trial$hdep))]
depthi_df$hdep[which(is.na(trial$hdep))]
trial$x[which(is.na(trial$hdep))]
plot(trial$x[which(is.na(trial$hdep))],trial$y[which(is.na(trial$hdep))])
plot(trial$x,trial$y)
plot(trial$x[which(is.na(trial$hdep))],trial$y[which(is.na(trial$hdep))])
plot(trial$x,trial$y)
summary(trial$hdep)
summary(trial$sdep)
# replace NA with limiting value, depending which arm it is in (these points are on the outside of the cloud)
trial$hdep[is.na(trial$hdep)] <- ifelse(trial$arm[is.na(trial$hdep)] == 'intervention', 1, 0)
trial$sdep[is.na(trial$sdep)] <- ifelse(trial$arm[is.na(trial$sdep)] == 'intervention', 1, 0)
summary(trial$sdep)
summary(trial$hdep)
library(CRTspat)
examples <- compute_distance(example, distance = "hdep")
examples <- compute_distance(examples, distance = "disc", scale_par = 0.5)
examples <- compute_distance(examples, distance = "kern", scale_par = 0.5)
ps1 <- plotCRT(examples, distance = "hdep", legend.position = c(0.8, 0.8))
ps2 <- plotCRT(examples, distance = "sdep")
ps3 <- plotCRT(examples, distance = "disc")
ps4 <- plotCRT(examples, distance = "kern")
plot_grid(ps1, ps2, ps3, ps4, labels = c('hdep', 'sdep', 'disc', 'kern'), label_size = 10, ncol = 2)
library(CRTspat)
examples <- compute_distance(example, distance = "hdep")
examples <- compute_distance(examples, distance = "disc", scale_par = 0.5)
examples <- compute_distance(examples, distance = "kern", scale_par = 0.5)
ps1 <- plotCRT(examples, distance = "hdep", legend.position = c(0.8, 0.8))
ps2 <- plotCRT(examples, distance = "sdep")
ps3 <- plotCRT(examples, distance = "disc")
ps4 <- plotCRT(examples, distance = "kern")
plot_grid(ps1, ps2, ps3, ps4, labels = c('hdep', 'sdep', 'disc', 'kern'), label_size = 10, ncol = 2)
examples <- compute_distance(example, distance = "hdep")
examples <- compute_distance(examples, distance = "disc", scale_par = 0.5)
examples <- compute_distance(examples, distance = "kern", scale_par = 0.5)
ps1 <- plotCRT(examples, distance = "hdep", legend.position = c(0.6, 0.8))
ps2 <- plotCRT(examples, distance = "sdep")
ps3 <- plotCRT(examples, distance = "disc")
ps4 <- plotCRT(examples, distance = "kern")
plot_grid(ps1, ps2, ps3, ps4, labels = c('hdep', 'sdep', 'disc', 'kern'), label_size = 10, ncol = 2)
examples_hdep <- CRTanalysis(examples, method = "LME4", distance = "hdep", cfunc = 'R')
summary(examples_hdep)
ps4 <- plotCRT(examples_hdep,legend.position = c(0.8, 0.8))
examples_sdep <- CRTanalysis(examples, method = "LME4", distance = "sdep", cfunc = 'R')
summary(examples_sdep)
ps5 <- plotCRT(examples_sdep)
examples_disc <- CRTanalysis(examples, method = "LME4", distance = "disc", cfunc = 'R', scale_par = 0.15)
summary(examples_disc)
ps6 <- plotCRT(examples_disc)
examples_kern <- CRTanalysis(examples, method = "LME4", distance = "kern", cfunc = 'R', scale_par = 0.15)
summary(examples_kern)
ps7 <- plotCRT(examples_kern)
plot_grid(ps4, ps5, ps6, ps7, labels = c('hdep', 'sdep', 'disc', 'kern'), label_size = 10, ncol = 2)
library(CRTspat)
source("C:/git_repos/CRTspat/vignettes/runVignette.R")
devtools::document()
? compute_distance()
devtools::document()
source("C:/git_repos/CRTspat/vignettes/runVignette.R")
devtools::document()
? compute_distance()
source("C:/git_repos/CRTspat/vignettes/runVignette.R")
getwd()
setwd(data)
setwd(../data)
setwd('../data')
setwd('../inst/extdata')
setwd('inst/extdata')
getwd()
install.packages("BiocManager")
BiocManager::install("rhdf5")
library(rhdf5)
testmesh100 <- source(file = "testmesh100.txt")
getwd()
testmesh100 <- source(file = "/testmesh100.txt")
examplemesh100 <- source(file = "examplemesh100.txt")
View(examplemesh100)
h5save(examplemesh100, file="newfile2.h5")
rhdf5::h5save(examplemesh100, file="newfile2.h5")
rhdf5::h5closeAll()
rhdf5::h5save(examplemesh100, file="newfile2.h5")
browseVignettes("rhdf5")
h5createGroup("newfile2.h5","foo")
h5ls("newfile2.h5")
save(examplemesh100, file="newfile2.rds")
newfile2 <- readRDS("C:/git_repos/CRTspat/inst/extdata/newfile2.rds")
save(examplemesh100, file="newfile2.rData")
newfile2 <- readdata("C:/git_repos/CRTspat/inst/extdata/newfile2.rData")
newfile2 <- read("C:/git_repos/CRTspat/inst/extdata/newfile2.rData")
load("C:/git_repos/CRTspat/inst/extdata/newfile2.rData")
