sf::st_as_sf(coords = coords) %>%
sf::st_set_crs(4326)
sf::st_crs(pts)
tr <- sf::st_as_sf(trial, coords = coords)
# voronoi of pts
vor <- sf::st_voronoi(sf::st_combine(tr))
vor <- sf::st_collection_extract(vor, "POLYGON")
vor <- sf::st_as_sf(vor)
clusters <- vor %>%
sf::st_join(tr, sf::st_intersects) %>%
dplyr::group_by(cluster) %>%
dplyr::summarize()
if (!is.null(trial$cluster)) {
clusters <- vor %>%
sf::st_join(tr, sf::st_intersects) %>%
dplyr::group_by(cluster) %>%
dplyr::summarize()
}
tr <- sf::st_as_sf(trial, coords = coords)
# voronoi of pts
vor <- sf::st_voronoi(sf::st_combine(tr))
vor <- sf::st_collection_extract(vor, "POLYGON")
vor <- sf::st_as_sf(vor)
if (!is.null(trial$cluster)) {
clusters <- vor %>%
sf::st_join(tr, sf::st_intersects) %>%
dplyr::group_by(cluster) %>%
dplyr::summarize()
}
arms <- vor %>%
sf::st_join(tr, sf::st_intersects) %>%
group_by(arm) %>%
dplyr::summarize()
sf::st_crs(clusters)
# voronoi of pts
vor <- sf::st_voronoi(sf::st_combine(tr)) %>%
sf::st_collection_extract("POLYGON") %>%
sf::st_as_sf() %>%
sf::st_set_crs(crs)
View(vor)
sf::st_crs(vor)
clusters <- vor %>%
sf::st_join(tr, sf::st_intersects) %>%
dplyr::group_by(cluster) %>%
dplyr::summarize()
tr <- sf::st_as_sf(trial, coords = coords) %>%
sf::st_set_crs(crs)
# voronoi of pts
vor <- sf::st_voronoi(sf::st_combine(tr)) %>%
sf::st_collection_extract("POLYGON") %>%
sf::st_as_sf() %>%
sf::st_set_crs(crs)
library(CRTspat)
CRTwrite(exampleCRT,'junk.cdf', maskbuffer = 0.2)
library(CRTspat)
CRTwrite(exampleCRT,'junk.cdf', maskbuffer = 0.2)
CRTwrite(exampleCRT,'junk.cdf', ask = TRUE, maskbuffer = 0.2)
CRTwrite(exampleCRT,'junk.cdf', driver = `ESRI Shapefile', maskbuffer = 0.2)
)
)
CRTwrite(exampleCRT,'junk.cdf', driver = 'ESRI Shapefile', maskbuffer = 0.2)
CRTwrite(exampleCRT,'junk.pdf', driver = 'ESRI Shapefile', maskbuffer = 0.2)
exampleCRT <- readdata('exampleCRT.csv')
library(CRTspat)
library(CRTspat)
examplexy <- latlong_as_xy(readdata("example_latlong.csv"))
junk <- readdata("example_latlong.csv")
examplexy <- latlong_as_xy(readdata("example_latlong.csv"))
library(CRTspat)
examplexy <- latlong_as_xy(readdata("example_latlong.csv"))
View(examplexy)
example_simulated_CRT =  simulateCRT(trial=readdata('exampleCRT.csv'),
effect=0.25,
ICC_inp=0.05,
outcome0=0.5,
matchedPair = FALSE,
scale='proportion',
sd=0.6,
tol=0.05)
example_simulated_CRT =  simulateCRT(trial=examplexy,
effect=0.25,
ICC_inp=0.05,
outcome0=0.5,
tol=0.05)
specify_clusters(examplexy,k=4)
junk <- specify_clusters(examplexy,k=4)
View(junk)
library(CRTspat)
junk <- specify_clusters(examplexy,k=4)
View(junk)
junk <- specify_clusters(examplexy,k=4)
centroid
library(CRTspat)
junk <- specify_clusters(examplexy,k=4)
library(CRTspat)
junk <- specify_clusters(examplexy,k=4)
exampleCRT$geom_full$centroid <- junk$geom_full$centroid
dump(exampleCRT,file = 'inst/extdata/exampleCRT.txt')
? dump
dump('exampleCRT',file = 'inst/extdata/exampleCRT.txt')
junk <- readdata('exampleCRT.txt')
library(CRTspat)
junk <- readdata('exampleCRT.txt')
CRTwrite(exampleCRT,'clusters', driver = 'ESRI Shapefile', maskbuffer = 0.2)
library(CRTspat)
CRTwrite(exampleCRT,'clusters', driver = 'ESRI Shapefile', maskbuffer = 0.2)
CRTwrite(exampleCRT, dsn = 'arms', feature = 'arms', driver = 'ESRI Shapefile', maskbuffer = 0.2)
library(CRTspat)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
set.seed(1234)
test_locationsLatLong <- readdata("example_latlong.csv")
test_locationsxy <- latlong_as_xy(test_locationsLatLong) #test_site is simulated
test_anonymizedlocations <- anonymize_site(test_locationsxy)
test_clusters <- specify_clusters(test_anonymizedlocations,h = 50)
test_arms <- randomizeCRT(trial = test_clusters,matchedPair = FALSE)
test_buffer <- specify_buffer(trial = test_arms, buffer.width = 0.1)
trial <- test_buffer$trial
trial$cluster <- as.numeric(trial$cluster)
trial$arm <- as.character(trial$arm)
View(trial)
test_locationsLatLong <- readdata("example_latlong.csv")
test_locationsxy <- latlong_as_xy(test_locationsLatLong) #test_site is simulated
test_anonymizedlocations <- anonymize_site(test_locationsxy)
test_clusters <- specify_clusters(test_anonymizedlocations,h = 50)
test_arms <- randomizeCRT(trial = test_clusters,matchedPair = FALSE)
test_buffer <- specify_buffer(trial = test_arms, buffer.width = 0.1)
trial <- test_buffer$trial
trial$cluster <- as.numeric(trial$cluster)
trial$arm <- as.character(trial$arm)
test_arms <- randomizeCRT(trial = test_clusters,matchedPair = FALSE)
View(test_arms)
set.seed(1234)
test_locationsLatLong <- readdata("example_latlong.csv")
test_locationsxy <- latlong_as_xy(test_locationsLatLong) #test_site is simulated
test_anonymizedlocations <- anonymize_site(test_locationsxy)
test_clusters <- specify_clusters(test_anonymizedlocations,h = 50)
test_arms <- randomizeCRT(trial = test_clusters,matchedPair = FALSE)
test_buffer <- specify_buffer(trial = test_arms, buffer.width = 0.1)
trial <- test_buffer$trial
trial$cluster <- as.numeric(trial$cluster)
trial$arm <- as.character(trial$arm)
junk <- readdata("example_buffer.csv")
View(trial)
View(junk)
set.seed(1234)
test_locationsLatLong <- readdata("example_latlong.csv")
test_locationsxy <- latlong_as_xy(test_locationsLatLong) #test_site is simulated
test_anonymizedlocations <- anonymize_site(test_locationsxy)
test_clusters <- specify_clusters(test_anonymizedlocations,h = 5)
test_arms <- randomizeCRT(trial = test_clusters,matchedPair = FALSE)
test_buffer <- specify_buffer(trial = test_arms, buffer.width = 0.1)
trial <- test_buffer$trial
trial$cluster <- as.numeric(trial$cluster)
trial$arm <- as.character(trial$arm)
View(trial)
write.csv(trial, file = "inst/extdata/example_buffer.csv", row.names = FALSE)
library(CRTspat)
CRTwrite(readdata('exampleCRT.txt'), dsn = NULL, feature = 'arms',
driver = 'ESRI Shapefile', maskbuffer = 0.2)
? sf::st_write
devtools::document()
? CRTwrite
library(CRTspat)
devtools::document()
? CRTwrite
\dontrun{CRTwrite(readdata('exampleCRT.txt'), dsn = 'arms', feature = 'arms',
library(CRTspat)
? CRTwrite
? simulateCRT
devtools::document()
library(CRTspat)
? simulateCRT
devtools::document()
library(CRTspat)
devtools::document()
devtools::document()
library(CRTspat)
View(exampleCRT)
analysis <- CRTanalysis(exampleCRT,method='MLE4',cfunc = 'P')
analysis <- CRTanalysis(exampleCRT,method='LME4',cfunc = 'P')
analysis$contamination$contamination_limits
contamination_limits <-c(NULL, NULL)
contamination_limits <-c(NULL, NULL)
contamination_limits
contamination_limits <- list()
contamination_limits
buffer_width
buffer_width <- NULL
buffer_width
buffer_width > 0
contamination_limits
contamination_limits <- g <- NULL
contamination_limits
library(CRTspat)
devtools::document()
pkgload::dev_help('plotCRT')
devtools::document()
pkgload::dev_help('plotCRT')
devtools::document()
pkgload::dev_help('CRTwrite')
pkgload::dev_help('plotCRT')
library(CRTspat)
devtools::document()
pkgload::dev_help('plotCRT')
library(CRTspat)
plotCRT(analysis,fill = 'arms', showBuffer = TRUE, showClusterBoundaries=TRUE)
plotCRT(analysis, map = TRUE, fill = 'arms', showBuffer = TRUE, showClusterBoundaries=TRUE)
plotCRT(analysis,fill = 'arms', showBuffer = TRUE, buffer_width = 0.5, showClusterBoundaries=TRUE)
plotCRT(analysis,fill = 'arms', showBuffer = TRUE, buffer_width = 0.5, showClusterBoundaries=TRUE)
plotCRT(analysis, map = TRUE, fill = 'arms', showBuffer = TRUE, buffer_width = 0.5, showClusterBoundaries=TRUE)
library(CRTspat)
plotCRT(analysis, map = TRUE, fill = 'arms', showBuffer = TRUE, buffer_width = 0.5, showClusterBoundaries=TRUE)
plotCRT(analysis, map = TRUE, fill = 'arms', showBuffer = TRUE, buffer_width = 0.5, showClusterBoundaries=TRUE)
g <- ggplot2::ggplot() + ggplot2::theme(aspect.ratio = 1)
# augment the prediction grid with a classifier of
# whether the point is within the contamination
# interval
g <- g + ggplot2::geom_sf(data =  sf_objects$buffer, fill = "black", alpha = 0.2)
g
plotCRT(analysis, map = TRUE, fill = 'arms', showBuffer = TRUE, buffer_width = 0.5, showClusterBoundaries=TRUE)
sf::st_crs(clusters)
junk <- trial[trial$buffer,]
tr_buffer <- sf::st_as_sf(trial[trial$buffer,], coords = coords) %>%
sf::st_set_crs(crs)
buffer <- vor %>%
sf::st_join(tr_buffer, sf::st_intersects) %>%
dplyr::summarize()
View(buffer)
View(buffer[[1]][[1]])
library(CRTspat)
plotCRT(analysis, map = TRUE, fill = 'arms', showBuffer = TRUE, buffer_width = 0.5, showClusterBoundaries=TRUE)
library(CRTspat)
plotCRT(analysis, map = TRUE, fill = 'arms', showBuffer = TRUE, buffer_width = 0.5, showClusterBoundaries=TRUE)
plotCRT(exampleCRT, map = TRUE, fill = 'arms', showBuffer = TRUE, buffer_width = 0.5, showClusterBoundaries=TRUE)
plotCRT(examplexy, map = TRUE, fill = 'arms', showBuffer = TRUE, buffer_width = 0.5, showClusterBoundaries=TRUE)
plotCRT(examplexy, map = TRUE, fill = 'arms', showBuffer = TRUE, buffer_width = 0.5, showClusterBoundaries=TRUE)
plotCRT(test_clusters, map = TRUE, fill = 'arms', showBuffer = TRUE, buffer_width = 0.5, showClusterBoundaries=TRUE)
View(test_buffer)
View(exampleCRT)
plotCRT(exampleCRT, map = TRUE, fill = 'arms', showBuffer = TRUE, buffer_width = 0.5, showClusterBoundaries=TRUE)
View(exampleCRT)
plotCRT(exampleCRT, map = TRUE, fill = 'none', showLocations = TRUE, showClusterBoundaries=TRUE)
plotCRT(exampleCRT, map = TRUE, fill = 'none', showLocations = TRUE, showClusterBoundaries=TRUE)
plotCRT(exampleCRT, map = TRUE, fill = 'none', showLocations = TRUE, showClusterBoundaries=TRUE)
library(CRTspat)
library(CRTspat)
library(CRTspat)
library(CRTspat)
plotCRT(exampleCRT, map = TRUE, fill = 'none', showLocations = TRUE, showClusterBoundaries=TRUE)
sf::st_crs(pts)
pts <- tidyr::tibble(y = trial$y, x = trial$x) %>%
sf::st_as_sf(coords = coords)
sf::st_crs(pts)
tr <- sf::st_as_sf(trial, coords = coords) %>%
sf::st_set_crs(crs)
# voronoi of pts- if the coordinates are lat long this would generate a
# warning, but the issue is trivial if the area is small or near the equator
suppressWarnings(
vor <- sf::st_voronoi(sf::st_combine(tr)) %>%
sf::st_collection_extract("POLYGON") %>%
sf::st_as_sf() %>%
sf::st_set_crs(crs)
)
clusters <- vor %>%
sf::st_join(tr, sf::st_intersects) %>%
dplyr::group_by(cluster) %>%
dplyr::summarize()
g <- ggplot2::ggplot() + ggplot2::theme(aspect.ratio = 1)
g <- g + ggplot2::geom_sf(data =  sf_objects$clusters, color = "black", fill = NA)
g <- g + ggplot2::geom_sf(data =  clusters, color = "black", fill = NA)
g
g <- g + ggplot2::geom_point(data = trial, aes(x = x, y = y), size = 0.5)
g
#        coords <- c("y", "x")
coords <- c("x", "y")
xlim <- c(min(trial$x - maskbuffer), max(trial$x + maskbuffer))
ylim <- c(min(trial$y - maskbuffer), max(trial$y + maskbuffer))
# create pts
# TODO sf::st_set_crs("Euclidean") probably does nothing
pts <- tidyr::tibble(y = trial$y, x = trial$x) %>%
sf::st_as_sf(coords = coords) %>%
sf::st_set_crs("Euclidean")
tr <- sf::st_as_sf(trial, coords = coords) %>%
sf::st_set_crs(crs)
# voronoi of pts- if the coordinates are lat long this would generate a
# warning, but the issue is trivial if the area is small or near the equator
suppressWarnings(
vor <- sf::st_voronoi(sf::st_combine(tr)) %>%
sf::st_collection_extract("POLYGON") %>%
sf::st_as_sf() %>%
sf::st_set_crs(crs)
)
clusters <- vor %>%
sf::st_join(tr, sf::st_intersects) %>%
dplyr::group_by(cluster) %>%
dplyr::summarize()
g <- ggplot2::ggplot() + ggplot2::theme(aspect.ratio = 1)
g <- g + ggplot2::geom_point(data = trial, aes(x = x, y = y), size = 0.5)
g <- g + ggplot2::geom_sf(data =  clusters, color = "black", fill = NA)
g
library(CRTspat)
plotCRT(exampleCRT, map = TRUE, fill = 'none', showLocations = TRUE, showClusterBoundaries=TRUE)
library(CRTspat)
plotCRT(exampleCRT, map = TRUE, fill = 'none', showLocations = TRUE, showClusterBoundaries=TRUE)
plotCRT(exampleCRT, map = TRUE, fill = 'arms', showBuffer=TRUE)
plotCRT(exampleCRT, map = TRUE, fill = 'arms', showBuffer=TRUE, buffer_width = 0.5)
library(CRTspat)
plotCRT(exampleCRT, map = TRUE, fill = 'arms', showBuffer=TRUE, buffer_width = 0.5)
View(vor)
View(vor[[1]][[31]])
table(trial$buffer)
buffertrue <- buffer[[2]]
View(buffertrue)
View(buffer)
View(buffer)
buffertrue <- buffer[2][[]]
buffertrue <- buffer[2]
View(buffertrue)
buffertrue <- buffer[trial$buffer,]
buffertrue <- buffer[,trial$buffer]
View(tr)
buffer_tr <- tr[!tr$buffer,,drop=TRUE]
buffer_tr <- tr[tr$buffer,,drop=FALSE]
buffer <- sf::st_join(vor, tr, sf::st_intersects)
g <- ggplot2::ggplot() + ggplot2::theme(aspect.ratio = 1)
g <- g + ggplot2::geom_sf(data =  sf_objects$arms, aes(fill = arm))
# use standard colour-blind compatible palette
g <- g + ggplot2::scale_fill_manual(name = "Arms", values = c("#b2df8a",
"#1f78b4"), labels = c("Control", "Intervention"))
# whether the point is within the buffer
g <- g + ggplot2::geom_sf(data =  sf_objects$buffer, fill = "black", alpha = 0.2)
# whether the point is within the buffer
g <- g + ggplot2::geom_sf(data =  buffer, fill = "black", alpha = 0.2)
g
? ggplot2::geom_sf
plotCRT(exampleCRT, map = TRUE, fill = 'arms', showBuffer=TRUE, buffer_width = 0.5)
library(CRTspat)
plotCRT(exampleCRT, map = TRUE, fill = 'arms', showBuffer=TRUE, buffer_width = 0.5)
library(CRTspat)
plotCRT(exampleCRT, map = TRUE, fill = 'arms', showBuffer=TRUE, buffer_width = 0.5)
plotCRT(exampleCRT, map = TRUE, fill = 'arms', showBuffer=FALSE, buffer_width = 0.5)
plotCRT(exampleCRT, map = TRUE, fill = 'arms', showBuffer=TRUE, buffer_width = 0.5)
plotCRT(exampleCRT, map = TRUE, fill = 'none', showBuffer=TRUE, buffer_width = 0.5)
plotCRT(exampleCRT, map = TRUE, fill = 'none', showBuffer=TRUE, buffer_width = 0.5)
g <- ggplot2::ggplot() + ggplot2::theme(aspect.ratio = 1)
# whether the point is within the buffer
g <- g + ggplot2::geom_sf(data =  sf_objects$buffer, fill = "black", alpha = 0.2)
g
plotCRT(exampleCRT, map = TRUE, fill = 'none', showBuffer=TRUE, buffer_width = 0.5)
buffer <- sf::st_join(vor, buffer_tr, sf::st_intersects)
g <- ggplot2::ggplot() + ggplot2::theme(aspect.ratio = 1)
# whether the point is within the buffer
g <- g + ggplot2::geom_sf(data =  buffer, fill = "black", alpha = 0.2)
g
buffer_tr <- tr[tr$buffer,,drop=FALSE]
buffer <- sf::st_voronoi(sf::st_combine(buffer_tr)) %>%
sf::st_collection_extract("POLYGON") %>%
sf::st_union() %>%
sf::st_as_sf() %>%
sf::st_set_crs(crs)
g <- ggplot2::ggplot() + ggplot2::theme(aspect.ratio = 1)
# whether the point is within the buffer
g <- g + ggplot2::geom_sf(data =  buffer, fill = "black", alpha = 0.2)
g
buffer <- sf::st_voronoi(sf::st_combine(buffer_tr)) %>%
sf::st_collection_extract("POLYGON") %>%
sf::st_combine() %>%
sf::st_as_sf() %>%
sf::st_set_crs(crs)
# whether the point is within the buffer
g <- g + ggplot2::geom_sf(data =  buffer, fill = "black", alpha = 0.2)
g <- ggplot2::ggplot() + ggplot2::theme(aspect.ratio = 1)
# whether the point is within the buffer
g <- g + ggplot2::geom_sf(data =  buffer, fill = "black", alpha = 0.2)
g
plotCRT(exampleCRT, map = TRUE, fill = 'none', showBuffer=TRUE, buffer_width = 0.5)
library(CRTspat)
plotCRT(exampleCRT, map = TRUE, fill = 'none', showBuffer=TRUE, buffer_width = 0.5)
buffer <- vor %>%
sf::st_join(tr, sf::st_intersects) %>%
dplyr::group_by(buffer) %>%
dplyr::summarize()
library(tidyr)
library(tidyr)
library(CRTspat)
plotCRT(exampleCRT, map = TRUE, fill = 'none', showBuffer=TRUE, buffer_width = 0.5)
g <- ggplot2::ggplot() + ggplot2::theme(aspect.ratio = 1)
# whether the point is within the buffer
g <- g + ggplot2::geom_sf(data =  buffer, fill = "black", alpha = 0.2)
g
g <- g + ggplot2::geom_sf(data =  sf_objects$arms, aes(fill = arm))
# use standard colour-blind compatible palette
g <- g + ggplot2::scale_fill_manual(name = "Arms", values = c("#b2df8a",
"#1f78b4"), labels = c("Control", "Intervention"))
g <- ggplot2::ggplot() + ggplot2::theme(aspect.ratio = 1)
g <- g + ggplot2::geom_sf(data =  buffer, aes(fill = buffer))
# use standard colour-blind compatible palette
g <- g + ggplot2::scale_fill_manual(name = "Bugger", values = c("black",
NA))
g
# use standard colour-blind compatible palette
g <- g + ggplot2::scale_fill_manual(name = "Bugger", values = c("black",
NA), alpha = 0.2)
g <- g + ggplot2::geom_sf(data =  buffer, aes(fill = buffer), alpha = 0.2)
g <- ggplot2::ggplot() + ggplot2::theme(aspect.ratio = 1)
g <- g + ggplot2::geom_sf(data =  buffer, aes(fill = buffer), alpha = 0.2)
# use standard colour-blind compatible palette
g <- g + ggplot2::scale_fill_manual(name = "Bugger", values = c("black",
NA), alpha = 0.2)
# use standard colour-blind compatible palette
g <- g + ggplot2::scale_fill_manual(name = "Bugger", values = c("black",
NA))
g
library(CRTspat)
plotCRT(exampleCRT, map = TRUE, fill = 'arms', showBuffer=FALSE, buffer_width = 0.5)
plotCRT(exampleCRT, map = TRUE, fill = 'arms', showBuffer=TRUE, buffer_width = 0.5)
library(CRTspat)
plotCRT(exampleCRT, map = TRUE, fill = 'arms', showBuffer=TRUE, buffer_width = 0.5)
plotCRT(exampleCRT, map = TRUE, fill = 'arms', showBuffer=TRUE, buffer_width = 0.5)
library(CRTspat)
plotCRT(exampleCRT, map = TRUE, fill = 'arms', showBuffer=TRUE, buffer_width = 0.5)
plotCRT(exampleCRT, map = TRUE, fill = 'none', showBuffer=TRUE, buffer_width = 0.5)
library(CRTspat)
library(CRTspat)
plotCRT(exampleCRT, map = TRUE, fill = 'none', showBuffer=TRUE, buffer_width = 0.5)
plotCRT(exampleCRT, map = TRUE, fill = 'arms', showBuffer=TRUE, buffer_width = 0.5)
plotCRT(exampleCRT, map = TRUE, fill = 'arms', showBuffer=TRUE, buffer_width = 0.5)
# whether the point is within the buffer
g <- g + ggplot2::geom_sf(data =  sf_objects$buffer, aes(color = buffer),
show.legend = FALSE, alpha = 0.2)
g <- g + ggplot2::scale_color_manual(name = "Buffer", values = c(NA, "black"))
g
# whether the point is within the buffer
g <- g + ggplot2::geom_sf(data =  sf_objects$buffer, color = buffer,
show.legend = FALSE, alpha = 0.2)
# whether the point is within the buffer
g <- g + ggplot2::geom_sf(data =  sf_objects$buffer, color = c(NA, "black"),
show.legend = FALSE, alpha = 0.2)
g
# whether the point is within the buffer
g <- g + ggplot2::geom_sf(data =  sf_objects$buffer, aes(color = buffer,
show.legend = FALSE, alpha = 0.2)
g <- g + ggplot2::scale_color_manual(name = "Buffer", values = c(NA, "black"))
# whether the point is within the buffer
g <- g + ggplot2::geom_sf(data =  sf_objects$buffer, aes(alpha = buffer),
show.legend = FALSE)
g <- g + ggplot2::scale_alpha_manual(name = "Buffer", values = c(0, 0.2))
g
library(CRTspat)
plotCRT(exampleCRT, map = TRUE, fill = 'arms', showBuffer=TRUE, buffer_width = 0.5)
plotCRT(exampleCRT, map = TRUE, fill = 'arms', showBuffer=TRUE, showClusterBoundaries = FALSE, buffer_width = 0.5)
plotCRT(exampleCRT, map = TRUE, fill = 'arms', showBuffer=TRUE, showClusterBoundaries = FALSE, buffer_width = 0.5)
library(CRTspat)
plotCRT(exampleCRT, map = TRUE, fill = 'arms', showBuffer=TRUE, showClusterBoundaries = FALSE, buffer_width = 0.2)
plotCRT(exampleCRT, map = TRUE, fill = 'arms', showBuffer=TRUE, showClusterBoundaries = FALSE, buffer_width = 0.1)
plotCRT(exampleCRT, map = TRUE, fill = 'arms', showBuffer=TRUE, showClusterBoundaries = FALSE, buffer_width = 1.0)
plotCRT(exampleCRT, map = TRUE, fill = 'arms', showBuffer=TRUE, showClusterBoundaries = FALSE, buffer_width = 0.5)
View(analysis)
plotCRT(analysis, map = TRUE, fill = 'arms', showBuffer=TRUE, showClusterBoundaries = FALSE, buffer_width = 0.5)
plotCRT(analysis, map = TRUE, fill = 'arms', showBuffer=TRUE, showClusterBoundaries = FALSE)
plotCRT(analysis, map = TRUE, fill = 'arms', showBuffer=TRUE, showClusterBoundaries = TRUE)
plotCRT(analysis, map = TRUE, fill = 'none', showLocations=TRUE)
plotCRT(analysis, map = TRUE, fill = 'clusters', showLocations=TRUE)
plotCRT(analysis, map = TRUE, fill = 'arms', showLocations=TRUE)
plotCRT(analysis, map = TRUE, fill = 'arms')
plotCRT(analysis, map = TRUE, fill = 'clusters', showClusterLabels = TRUE)
plotCRT(analysis, map = TRUE, fill = 'clusters', showClusterLabels = TRUE, labelsize =2)
plotCRT(analysis, map = TRUE, fill = 'clusters', showClusterLabels = TRUE, labelsize =3)
plotCRT(analysis, map = TRUE, fill = 'arms')
plotCRT(analysis, map = TRUE, fill = 'arms', showBuffer=TRUE, showClusterBoundaries = FALSE, buffer_width = 0.5)
plotCRT(analysis, map = TRUE, fill = 'arms', showBuffer=TRUE, showClusterBoundaries = FALSE)
library(CRTspat)
plotCRT(analysis, map = TRUE, fill = 'arms', showBuffer=TRUE, showClusterBoundaries = FALSE)
plotCRT(analysis, map = TRUE, fill = 'arms', showBuffer=TRUE, showClusterBoundaries = FALSE, buffer_width = 0.5)
library(CRTspat)
plotCRT(analysis, map = TRUE, fill = 'arms', showBuffer=TRUE, showClusterBoundaries = FALSE, buffer_width = 0.5)
library(CRTspat)
plotCRT(analysis, map = TRUE, fill = 'arms', showBuffer=TRUE, showClusterBoundaries = FALSE, buffer_width = 0.5)
plotCRT(analysis, map = TRUE, fill = 'arms', showBuffer=TRUE, showClusterBoundaries = FALSE, buffer_width = 0.2)
plotCRT(analysis, map = TRUE, fill = 'arms', showBuffer=FALSE, showClusterBoundaries = FALSE, buffer_width = 0.2)
plotCRT(exampleCRT, map = TRUE, fill = 'arms', showBuffer=TRUE)
library(CRTspat)
library(CRTspat)
plotCRT(exampleCRT, map = TRUE, fill = 'arms', showBuffer=TRUE)
devtoolsdocument()
library(CRTspat)
devtools::document()
library(CRTspat)
analysis <- CRTanalysis(exampleCRT, cfunc = "P")
plotCRT(analysis, map = FALSE)
analysis <- CRTanalysis(exampleCRT, cfunc = "P", method = "LME4")
plotCRT(analysis, map = FALSE)
plotCRT(analysis, map = TRUE, fill = 'arms', showBuffer=TRUE, showClusterBoundaries = FALSE)
library(CRTspat)
# using the same dataset as for Use Case 1.
library(CRTspat)
exampleCRT <- readdata('exampleCRT.txt')
plotCRT(exampleCRT, map = TRUE, fill = 'none', showLocations=TRUE)
plotCRT(exampleCRT, map = TRUE, fill = 'clusters', showClusterLabels = TRUE, labelsize =3)
plotCRT(exampleCRT, map = TRUE, fill = 'arms', showLocations=TRUE)
plotCRT(exampleCRT, map = TRUE, fill = 'arms', showBuffer=TRUE,
showClusterBoundaries = FALSE, buffer_width = 0.5)
plotCRT(exampleCRT, map = FALSE)
analysis <- CRTanalysis(exampleCRT, cfunc = "P", method = "LME4")
plotCRT(analysis, map = FALSE)
plotCRT(analysis, map = TRUE, fill = 'arms', showBuffer=TRUE, showClusterBoundaries = FALSE)
summary(analysis)
source("C:/git_repos/CRTspat/vignettes/runVignette.R")
source("C:/git_repos/CRTspat/vignettes/runVignette.R")
