summary(example2aanalysis)
summary(example)
library(CRTspat)
summary(example2aanalysis)
summary(example)
output
object$geom_full$locations
geom_full$locations
object$geom_full
library(CRTspat)
library(CRTspat)
install.packages("dplry")
install.packages("C:/Users/smith/Downloads/dplyr_1.1.1.zip", repos = NULL, type = "win.binary")
library(CRTspat)
summary(example2aanalysis)
library(CRTspat)
example_locations <- readdata('example_site.csv')
# assign the denominator to the baseline data
example_locations$base_denom <- 1
# convert to a `CRTsp` object
exampleCRT <- CRTsp(example_locations)
summary(exampleCRT)
# Aggregate data for multiple observations for the same location Only the (x,y) co-ordinates and numerical
# auxiliary variables
example <- aggregateCRT(exampleCRT, auxiliaries = c("RDT_test_result", "base_denom"))
plot(example)
example
plot(example)
plot.CRTsp(example)
plot.(example)
plot(example)
library(CRTspat)
plot(example)
CRTspat::plot(example)
CRTspat::plot.CRTsp(example)
CRTspat::plot.CRTsp(example)
library(CRTspat)
CRTspat::plot.CRTsp(example)
CRTspat::plot(example)
plot(example)
summary(example)
? plot
? display
?? display
?? S3 GenericFunctions
?? GenericFunctions
methods(plot)
generics()
? generics()
?generics
? show
library(CRTspat)
library(CRTspat)
devtools::document()
devtools::document()
library(CRTspat)
show(example)
show(example)
show(example_locations)
show(exampleCRT)
show(exampleCRT)
library(CRTspat)
library(CRTspat)
show(readdata('exampleCRT.csv'), map = TRUE, fill = 'none', showLocations = TRUE,
showClusterBoundaries=FALSE, maskbuffer=0.2)
show.CRTsp(readdata('exampleCRT.csv'), map = TRUE, fill = 'none', showLocations = TRUE,
showClusterBoundaries=FALSE, maskbuffer=0.2)
rlang::last_trace()
library(CRTspat)
show.CRTsp(readdata('exampleCRT.csv'), map = TRUE, fill = 'none', showLocations = TRUE,
showClusterBoundaries=FALSE, maskbuffer=0.2)
devtools::document()
devtools::document()
library(CRTspat)
devtools::document()
devtools::document()
library(CRTspat)
show(readdata('exampleCRT.csv'))
show(CRTsp(readdata('exampleCRT.csv')))
junk <- CRTsp(readdata('exampleCRT.csv'))
junk <- readdata('exampleCRT.csv')
summary(readdata('exampleCRT.csv'))
show("rabbit")
? show
.S3PrimitiveGenerics
? summary
? base
library(help = "base")
show(object, map = FALSE, fill = "arms", showLocations = FALSE,
showClusterBoundaries = TRUE, showClusterLabels = FALSE, cpalette = NULL,
maskbuffer = 0.2, labelsize = 4, legend.position = NULL) ){
show <- function(object, map = FALSE, fill = "arms", showLocations = FALSE,
showClusterBoundaries = TRUE, showClusterLabels = FALSE, cpalette = NULL,
maskbuffer = 0.2, labelsize = 4, legend.position = NULL) ){
show <- function(object, map = FALSE, fill = "arms", showLocations = FALSE,
showClusterBoundaries = TRUE, showClusterLabels = FALSE, cpalette = NULL,
maskbuffer = 0.2, labelsize = 4, legend.position = NULL) {
UseMethod("show", object= object)
}
show(readdata('exampleCRT.csv'))
library(CRTsp)
library(CRTspat)
show(readdata('exampleCRT.csv'))
show <- function(object, map = FALSE, fill = "arms", showLocations = FALSE,
showClusterBoundaries = TRUE, showClusterLabels = FALSE, cpalette = NULL,
maskbuffer = 0.2, labelsize = 4, legend.position = NULL) {
UseMethod("summary", object= object)
}
show(readdata('exampleCRT.csv'))
library(CRTspat)
summary(readdata('exampleCRT.csv'))
show(readdata('exampleCRT.csv'))
NextMethod("show", object= object, ...)
show <- function(object, map = FALSE, fill = "arms", showLocations = FALSE,
showClusterBoundaries = TRUE, showClusterLabels = FALSE, cpalette = NULL,
maskbuffer = 0.2, labelsize = 4, legend.position = NULL) {
NextMethod("show", object= object, map = FALSE, fill = "arms", showLocations = FALSE,
showClusterBoundaries = TRUE, showClusterLabels = FALSE, cpalette = NULL,
maskbuffer = 0.2, labelsize = 4, legend.position = NULL)
}
show(readdata('exampleCRT.csv'))
devtools::document()
library(CRTspat)
show(readdata('exampleCRT.csv'))
summary(readdata('exampleCRT.csv'))
show.CRTsp(readdata('exampleCRT.csv'))
show(readdata('exampleCRT.csv'))
library(CRTspat)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(CRTspat)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(CRTspat)
plt(readdata('exampleCRT.csv'))
plt.CRTsp(readdata('exampleCRT.csv'))
library(CRTspat)
plt.CRTsp(readdata('exampleCRT.csv'))
plt(readdata('exampleCRT.csv'))
plt
plt()
plt <- function(object) {
UseMethod("plt")
}
plt(readdata('exampleCRT.csv'))
analysis <- CRTanalysis(readdata('exampleCRT.csv'))
plt(analysis, map = FALSE)
plt(analysis)
plt(analysis,...)
devtools::document()
devtools::document()
library(CRTspat)
plotCRT(readdata('exampleCRT.csv'))
#Map of locations only
plotCRT(readdata('exampleCRT.csv'), map = TRUE, fill = 'none', showLocations = TRUE,
showClusterBoundaries=FALSE, maskbuffer=0.2)
library(CRTspat)
plotCRT(readdata('exampleCRT.csv'))
#Map of locations only
plotCRT(readdata('exampleCRT.csv'), map = TRUE, fill = 'none', showLocations = TRUE,
showClusterBoundaries=FALSE, maskbuffer=0.2)
#show cluster boundaries and number clusters
plotCRT(readdata('exampleCRT.csv'), map = TRUE, fill ='none', showClusterBoundaries=TRUE,
showClusterLabels=TRUE, maskbuffer=0.2)
#show clusters in colour
plotCRT(readdata('exampleCRT.csv'), map = TRUE, fill = 'clusters', showClusterLabels = TRUE,
labelsize=2, maskbuffer=0.2)
#show arms
plotCRT(readdata('exampleCRT.csv'), map = TRUE,
fill = 'arms', maskbuffer=0.2, legend.position=c(0.2,0.8))
#contamination plot
analysis <- CRTanalysis(readdata('exampleCRT.csv')); plotCRT(analysis, map = FALSE)
? inherits
? isa
isa(analysis, what = 'CRTanalysis')
library(CRTspat)
library(CRTspat)
analysis <- CRTanalysis(readdata('exampleCRT.csv')); plotCRT(analysis, map = FALSE)
plotCRT(readdata('exampleCRT.csv'), map = TRUE, fill ='none', showClusterBoundaries=TRUE,
showClusterLabels=TRUE, maskbuffer=0.2)
plotCRT(readdata('exampleCRT.csv'), map = TRUE, fill ='none', showClusterBoundaries=TRUE,
showClusterLabels=TRUE, maskbuffer=0.2, labelsize = 2)
library(CRTspat)
library(CRTspat)
example_locations <- readdata('example_site.csv')
# assign the denominator to the baseline data
example_locations$base_denom <- 1
# convert to a `CRTsp` object
exampleCRT <- CRTsp(example_locations)
summary(exampleCRT)
# Aggregate data for multiple observations for the same location Only the (x,y) co-ordinates and numerical
# auxiliary variables
example <- aggregateCRT(exampleCRT, auxiliaries = c("RDT_test_result", "base_denom"))
summary(example)
# Plot map of locations
plotCRT(example, map = TRUE, showLocations = TRUE, maskbuffer = 0.2)
example_clustered <- specify_clusters(trial = example, h = 50, algorithm = 'NN')
summary(example_clustered)
plotCRT(example_clustered, map = TRUE, showClusterLabels = TRUE, maskbuffer = 0.2, labelsize = 2)
library(Matrix)
examplemesh100 <- readdata("examplemesh100.txt")
baselineanalysis <- CRTanalysis(trial=example_clustered,
method = 'INLA', link='logit', baselineOnly = TRUE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom",
clusterEffects = FALSE, spatialEffects = TRUE,
requireMesh = TRUE, inla_mesh = examplemesh100)
plotCRT(baselineanalysis, map = TRUE, fill = 'prediction')
object <- baselineanalysis
# raster map
contamination <- analysis$contamination
showDistance <- identical(fill, "distance")
fill = 'prediction'
# raster map
contamination <- analysis$contamination
showDistance <- identical(fill, "distance")
showPrediction <- identical(fill, "prediction")
if (showPrediction)
showdistance <- FALSE
# raster images derived from inla analysis
x <- y <- prediction <- nearestDiscord <- NULL
g <- ggplot2::ggplot() + ggplot2::theme(aspect.ratio = 1)
plotCRT(baselineanalysis, map = TRUE, fill = 'prediction')
example_randomized <- randomizeCRT(example_clustered, matchedPair = TRUE,
baselineNumerator = "RDT_test_result", baselineDenominator = "base_denom")
summary(example_randomized)
plotCRT(example_randomized, map = TRUE, maskbuffer=0.2, legend.position=c(0.8,0.8))
summary(baselineanalysis)
exampleT = CRTanalysis(readdata("exampleCRT.csv"), method = "T")
summary(exampleT)
plotCRT(exampleT, map = TRUE, maskbuffer=0.2, legend.position=c(0.8,0.8))
plotCRT(exampleT, map = TRUE, fill = 'arm', maskbuffer=0.2, legend.position=c(0.8,0.8))
plotCRT(exampleT, map = TRUE, fill = 'arm', maskbuffer=0.2, legend.position=c(0.8,0.8))
head(exampleT$trial)
plotCRT(exampleT, map = TRUE, fill = 'arm', maskbuffer=0.2, legend.position=c(0.8,0.8))
fill
colourClusters <- identical(fill, "clusters")
showArms <- identical(fill, "arms")
# The plotting routines require unique locations
CRT <- aggregateCRT(trial)
# The plotting routines use (x,y) coordinates
if (is.null(CRT$trial$x)) {
CRT <- latlong_as_xy(CRT)
}
# remove any buffer zones
if (!is.null(trial$buffer)) {
trial <- trial[!trial$buffer, ]
}
if (is.null(trial$cluster)) {
trial$cluster <- rep(1, nrow(trial))
showClusterBoundaries <- FALSE
showClusterLabels <- FALSE
colourClusters <- FALSE
}
is.null(trial$arm)
showArms
showArms <- identical(fill, "arms")
showArms
fill
plotCRT(exampleT, map = TRUE, fill = 'arms', maskbuffer=0.2, legend.position=c(0.8,0.8))
devtools::document()
? summary.CRTsp
? summary.CRTanalysis
devtools::document()
summary(exampleT)
summary(exampleT)
summary(exampleT)
source("C:/git_repos/CRTspat/vignettes/runVignette.R")
knitr::knit("vignettes/Usecase7.Rmd.orig", output = "vignettes/Usecase7.Rmd")
rmarkdown.html_vignette.check_title = FALSE
devtools::install(build_vignettes = TRUE)
browseVignettes(package = "CRTspat")
knitr::knit("vignettes/Usecase5.Rmd.orig", output = "vignettes/Usecase5.Rmd")
knitr::knit("vignettes/Usecase5.Rmd.orig", output = "vignettes/Usecase5.Rmd")
knitr::knit("vignettes/Usecase5.Rmd.orig", output = "vignettes/Usecase5.Rmd")
library(CRTspat)
library(CRTspat)
knitr::knit("vignettes/Usecase5.Rmd.orig", output = "vignettes/Usecase5.Rmd")
rmarkdown.html_vignette.check_title = FALSE
devtools::install(build_vignettes = TRUE)
install.packages(c("cli", "ps", "fs", "digest", "fastmap", "cachem", "stringi"))
source("C:/git_repos/CRTspat/vignettes/runVignette.R")
knitr::knit("vignettes/Usecase5.Rmd.orig", output = "vignettes/Usecase5.Rmd")
knitr::knit("vignettes/Usecase5.Rmd.orig", output = "vignettes/Usecase5.Rmd")
knitr::knit("vignettes/Usecase5.Rmd.orig", output = "vignettes/Usecase5.Rmd")
library(CRTspat)
library(CRTspat)
exampleGEE = CRTanalysis(readdata("exampleCRT.csv"), method = "GEE")
View(fit)
fit$model_object$data$y1
View(fit)
View(trial)
library(CRTspat)
library(CRTspat)
exampleLME4 = CRTanalysis(readdata("exampleCRT.csv"), method = "LME4")
library(CRTspat)
library(CRTspat)
exampleLME4 = CRTanalysis(readdata("exampleCRT.csv"), method = "LME4")
View(analysis)
ftext
View(options)
formula <- stats::as.formula(options$ftext)
analysis <- CRTanalysis(readdata("exampleCRT.csv"),method = 'GEE',link='log')
library(CRTspat)
set.seed(1234)
example_locations <- readdata('example_site.csv')
example_locations$base_denom <- 1
library(dplyr)
example_randomized <- CRTsp(example_locations) %>%
aggregateCRT(auxiliaries = c("RDT_test_result", "base_denom")) %>%
specify_clusters(h = 50, algorithm = 'NN') %>%
randomizeCRT(matchedPair = FALSE)
example2a <- simulateCRT(example_randomized,
effect = 0.8,
outcome0 = 0.5,
generateBaseline = FALSE,
baselineNumerator = "RDT_test_result",
baselineDenominator = "base_denom",
ICC_inp = NULL, theta_inp = 0.8)
# Reading in the inla.mesh functions when run outside the check but not as part of a check
library(Matrix)
inla_mesh <- readdata("examplemesh100.txt")
analysis <- CRTanalysis(trial=example2a,
method = 'INLA', link='logit', cfunc='P',
localisedEffects = TRUE, clusterEffects= TRUE,
requireMesh = TRUE, inla_mesh = inla_mesh)
FUN <- function(return(3*x))
FUN <- function(x) {3*x}
eval(parse(text = FUN))
rubbish <- function(x) {3*x}
FUN = 'rubbish'
x = 5
eval(parse(text = FUN))
eval(parse(text = rubbish))
eval(parse(text = 'rubbish'))
library(CRTspat)
analysis <- CRTanalysis(trial=readdata('exampleCRT.csv'),
method = 'INLA', link='logit', cfunc='P',
spatialEffects= TRUE, requireMesh = TRUE, inla_mesh = readdata('examplemesh100.txt'))
trial=readdata('exampleCRT.csv')
analysis <- CRTanalysis(trial=example2a,
method = 'INLA', link='logit', cfunc='P',
spatialEffects= TRUE, requireMesh = TRUE, inla_mesh = readdata('examplemesh100.txt'))
? switch (object,
case = action
)
analysis <- CRTanalysis(trial=example2a,
method = 'LME4', link='logit', cfunc='P')
analysis <- CRTanalysis(trial=example2a,
method = 'LME4', link='logit', cfunc='P')
analysis <- CRTanalysis(trial=example2a,
method = 'LME4', link='logit', cfunc='P')
library(CRTspat)
analysis <- CRTanalysis(trial=example2a,
method = 'LME4', link='logit', cfunc='P')
analysis <- CRTanalysis(trial=example2a,
method = 'LME4', link='logit', cfunc='P')
formula
library(CRTspat)
analysis <- CRTanalysis(trial=example2a,
method = 'LME4', link='logit', cfunc='P')
library(CRTspat)
analysis <- CRTanalysis(trial=example2a,
method = 'LME4', link='logit', cfunc='P')
analysis <- CRTanalysis(trial=example2a,
method = 'LME4', link='logit', cfunc='P')
formula()
formula
model_object <-lme4::glmer(formula = formula, data = trial,
family = binomial)
View(trial)
formula
library(CRTspat)
library(CRTspat)
library(CRTspat)
set.seed(1234)
example_locations <- readdata('example_site.csv')
example_locations$base_denom <- 1
library(dplyr)
example_randomized <- CRTsp(example_locations) %>%
aggregateCRT(auxiliaries = c("RDT_test_result", "base_denom")) %>%
specify_clusters(h = 50, algorithm = 'NN') %>%
randomizeCRT(matchedPair = FALSE)
example2a <- simulateCRT(example_randomized,
effect = 0.8,
outcome0 = 0.5,
generateBaseline = FALSE,
baselineNumerator = "RDT_test_result",
baselineDenominator = "base_denom",
ICC_inp = NULL, theta_inp = 0.8)
# Reading in the inla.mesh functions when run outside the check but not as part of a check
library(Matrix)
inla_mesh <- readdata("examplemesh100.txt")
analysis <- CRTanalysis(trial=example2a,
method = 'INLA', link='logit', cfunc='P',
localisedEffects = TRUE, clusterEffects= TRUE,
requireMesh = TRUE, inla_mesh = inla_mesh)
value <- round(analysis$model_object$dic$dic)
library(CRTspat)
set.seed(1234)
example_locations <- readdata('example_site.csv')
example_locations$base_denom <- 1
library(dplyr)
example_randomized <- CRTsp(example_locations) %>%
aggregateCRT(auxiliaries = c("RDT_test_result", "base_denom")) %>%
specify_clusters(h = 50, algorithm = 'NN') %>%
randomizeCRT(matchedPair = FALSE)
example2a <- simulateCRT(example_randomized,
effect = 0.8,
outcome0 = 0.5,
generateBaseline = FALSE,
baselineNumerator = "RDT_test_result",
baselineDenominator = "base_denom",
ICC_inp = NULL, theta_inp = 0.8)
# Reading in the inla.mesh functions when run outside the check but not as part of a check
library(Matrix)
inla_mesh <- readdata("examplemesh100.txt")
analysis <- CRTanalysis(trial=example2a,
method = 'INLA', link='logit', cfunc='P',
localisedEffects = TRUE, clusterEffects= TRUE,
requireMesh = TRUE, inla_mesh = inla_mesh)
value <- round(analysis$model_object$dic$dic)
formula
loss
beta()
beta
loss = 0
loss
loss <- 0
2 == 2
library(CRTspat)
set.seed(1234)
example_locations <- readdata('example_site.csv')
example_locations$base_denom <- 1
library(dplyr)
example_randomized <- CRTsp(example_locations) %>%
aggregateCRT(auxiliaries = c("RDT_test_result", "base_denom")) %>%
specify_clusters(h = 50, algorithm = 'NN') %>%
randomizeCRT(matchedPair = FALSE)
example2a <- simulateCRT(example_randomized,
effect = 0.8,
outcome0 = 0.5,
generateBaseline = FALSE,
baselineNumerator = "RDT_test_result",
baselineDenominator = "base_denom",
ICC_inp = NULL, theta_inp = 0.8)
# Reading in the inla.mesh functions when run outside the check but not as part of a check
library(Matrix)
inla_mesh <- readdata("examplemesh100.txt")
analysis <- CRTanalysis(trial=example2a,
method = 'INLA', link='logit', cfunc='P',
localisedEffects = TRUE, clusterEffects= TRUE,
requireMesh = TRUE, inla_mesh = inla_mesh)
value <- round(analysis$model_object$dic$dic)
beta
library(CRTspat)
set.seed(1234)
example_locations <- readdata('example_site.csv')
example_locations$base_denom <- 1
library(dplyr)
example_randomized <- CRTsp(example_locations) %>%
aggregateCRT(auxiliaries = c("RDT_test_result", "base_denom")) %>%
specify_clusters(h = 50, algorithm = 'NN') %>%
randomizeCRT(matchedPair = FALSE)
example2a <- simulateCRT(example_randomized,
effect = 0.8,
outcome0 = 0.5,
generateBaseline = FALSE,
baselineNumerator = "RDT_test_result",
baselineDenominator = "base_denom",
ICC_inp = NULL, theta_inp = 0.8)
# Reading in the inla.mesh functions when run outside the check but not as part of a check
library(Matrix)
inla_mesh <- readdata("examplemesh100.txt")
analysis <- CRTanalysis(trial=example2a,
method = 'INLA', link='logit', cfunc='P',
localisedEffects = TRUE, clusterEffects= TRUE,
requireMesh = TRUE, inla_mesh = inla_mesh)
value <- round(analysis$model_object$dic$dic)
formula
set.seed(1234)
example_locations <- readdata('example_site.csv')
example_locations$base_denom <- 1
library(dplyr)
example_randomized <- CRTsp(example_locations) %>%
aggregateCRT(auxiliaries = c("RDT_test_result", "base_denom")) %>%
specify_clusters(h = 50, algorithm = 'NN') %>%
randomizeCRT(matchedPair = FALSE)
example2a <- simulateCRT(example_randomized,
effect = 0.8,
outcome0 = 0.5,
generateBaseline = FALSE,
baselineNumerator = "RDT_test_result",
baselineDenominator = "base_denom",
ICC_inp = NULL, theta_inp = 0.8)
# Reading in the inla.mesh functions when run outside the check but not as part of a check
library(Matrix)
inla_mesh <- readdata("examplemesh100.txt")
analysis <- CRTanalysis(trial=example2a,
method = 'INLA', link='logit', cfunc='P',
localisedEffects = TRUE, clusterEffects= TRUE,
requireMesh = TRUE, inla_mesh = inla_mesh)
value <- round(analysis$model_object$dic$dic)
head(sample)
library(CRTspat)
