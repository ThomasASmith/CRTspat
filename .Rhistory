GEElower <- function(x){
GEElower <- as.numeric(poweranalyses[poweranalyses$simulationID == x['simulationID']
& poweranalyses$baselineOnly == FALSE,'lowerBound'])
ifelse(!is.null(GEElower),GEElower,NA)
return(GEElower)}
allresults$GEElower <- apply(allresults,1,FUN=GEElower)
allresults$positive <- ifelse(allresults$GEElower > 0,1,0)
library(ggplot2)
ggplot(data=allresults[allresults$efficacy != 0 & allresults$pw > 0.9,],
aes(x=controlP.FALSE,y=positive)) +
geom_smooth( ) + theme_bw()
ggplot(data=allresults[allresults$efficacy != 0,],
aes(x=pw,y=positive)) +
geom_smooth( ) + theme_bw()
ggplot(data=allresults[allresults$efficacy != 0,],
aes(x=efficacy,y=efficacy.TRUE)) +
geom_smooth( ) + theme_bw()
ggplot(data=allresults[allresults$efficacy != 0,],
aes(x=efficacy,y=efficacy.TRUE)) +
geom_point( ) + theme_bw()
ggplot(data=allresults[allresults$efficacy != 0,],
aes(x=efficacy,y=efficacy.FALSE)) +
geom_point( ) + theme_bw()
ggplot(data=allresults[allresults$efficacy != 0,],
aes(x=efficacy,y=efficacy.FALSE)) +
geom_smooth( ) + theme_bw()
ggplot(data=allresults[allresults$efficacy != 0,],
aes(x=efficacy,y=efficacy.FALSE)) +
geom_point( ) + theme_bw()
allresults$bias <- allresult$efficacy.FALSE - allresults$efficacy
allresults$bias <- allresults$efficacy.FALSE - allresults$efficacy
ggplot(data=allresults[allresults$efficacy != 0,],
aes(x=efficacy,y=bias)) +
geom_point( ) + theme_bw()
l
l
ggplot(data=allresults[allresults$efficacy != 0 & allresults$simulationID>200,],
aes(x=efficacy,y=bias)) +
geom_point( ) + theme_bw()
ggplot(data=allresults[allresults$efficacy != 0,],
aes(x=clustersAssigned,y=bias)) +
geom_point( ) + theme_bw()
ggplot(data=allresults[allresults$efficacy != 0,],
aes(x=ICC.FALSE,y=bias)) +
geom_point( ) + theme_bw()
ggplot(data=allresults[allresults$efficacy != 0,],
aes(x=efficacy,y=bias)) +
geom_point( ) + theme_bw()
ggplot(data=allresults[allresults$efficacy != 0,],
aes(x=pw,y=bias)) +
geom_point( ) + theme_bw()
allresults$bias <- (allresults$efficacy.FALSE - allresults$efficacy)/allresults$efficacy
ggplot(data=allresults[allresults$efficacy != 0,],
aes(x=clustersAssigned,y=bias)) +
geom_point( ) + theme_bw()
ggplot(data=allresults[allresults$efficacy != 0,],
aes(x=pw,y=bias)) +
geom_point( ) + theme_bw()
ggplot(data=allresults[allresults$efficacy != 0,],
aes(x=efficacy,y=bias)) +
geom_point( ) + theme_bw()
ggplot(data=allresults[allresults$efficacy != 0 & allresults$simulationID>200,],
aes(x=efficacy,y=bias)) +
geom_point( ) + theme_bw()
allresults$bias <- (allresults$efficacy.FALSE - allresults$efficacy)
? summarize
library(CRTspillover)
trial=test_Analyse_CRT
data = data.frame(trial %>%
group_by(cluster) %>%
dplyr::summarize(positives = sum(y1),
total = sum(y_off),
arm = median(arm)))
devtools::load_all(".")
data = data.frame(trial %>%
group_by(cluster) %>%
dplyr::summarize(positives = sum(y1),
total = sum(y_off),
arm = median(arm)))
library(dplyr)
data = data.frame(trial %>%
group_by(cluster) %>%
dplyr::summarize(positives = sum(y1),
total = sum(y_off),
arm = median(arm)))
library('%>%')
library(magrittr)
data = data.frame(trial %>%
group_by(cluster) %>%
dplyr::summarize(positives = sum(y1),
total = sum(y_off),
arm = median(arm)))
library(dplyr)
trial=test_Simulate_CRT
data = data.frame(trial %>%
group_by(cluster) %>%
dplyr::summarize(positives = sum(y1),
total = sum(y_off),
arm = median(arm)))
trial$y1=trial$num
trial$y_off=trial$denom
data = data.frame(trial %>%
group_by(cluster) %>%
dplyr::summarize(positives = sum(y1),
total = sum(y_off),
arm = median(arm)))
data = data.frame(trial %>%
group_by(cluster) %>%
dplyr::summarize(positives = sum(y1),
total = sum(y_off),
arm = arm))
data
data = data.frame(trial %>%
group_by(cluster) %>%
dplyr::summarize(positives = sum(y1),
total = sum(y_off),
arm = arm[1]))
data
table(data$arm)
? t.test
clusterSum$lp <- logit(clusterSum$positives/clusterSum$total)
clusterSum <- data.frame(trial %>%
group_by(cluster) %>%
dplyr::summarize(positives = sum(y1),
total = sum(y_off),
arm = arm[1]))
clusterSum$lp <- logit(clusterSum$positives/clusterSum$total)
formula <- stats::as.formula('cbind(y1,y0) ~ arm')
stats::t.test(formula=formula, data=clusterSum,
alternative="two-sided",conf.level=1-alpha,var.equal = FALSE)
formula <- stats::as.formula('lp ~ arm')
stats::t.test(formula=formula, data=clusterSum,
alternative="two-sided",conf.level=1-alpha,var.equal = FALSE)
stats::t.test(formula=formula, data=clusterSum,
alternative="two.sided",conf.level=1-alpha,var.equal = FALSE)
alpha=0.05
stats::t.test(formula=formula, data=clusterSum,
alternative="two.sided",conf.level=1-alpha,var.equal = FALSE)
stats::t.test(formula=formula, data=clusterSum,
alternative="two.sided",conf.level=1-alpha,var.equal = TRUE)
model.object = stats::t.test(formula=formula, data=clusterSum,
alternative="two.sided",conf.level=1-alpha,var.equal = TRUE)
View(model.object)
pt.ests = list()
pt.ests$controlP <- model.object$estimate[1]
pt.ests$interventionP <- model.object$estimate[2]
pt.ests$p.value <- model.object$p.value
pt.ests$efficacy <- model.object$conf.int
pt.ests$controlP <- invlogit(model.object$estimate[1])
pt.ests$interventionP <- invlogit(model.object$estimate[2])
pt.ests$p.value <- model.object$p.value
View(model.object)
int.ests=list(controlP=NA,interventionP=NA,efficacy=NA)
int.ests$efficacy <- model.object$conf.int
stats::t.test(clusterSum$lp[clusterSum$arm=='control'], conf.level = 1-alpha)
analysisC <- stats::t.test(clusterSum$lp[clusterSum$arm=='control'], conf.level = 1-alpha)
View(analysisC)
int.ests$controlP <- invlogit(analysisC$conf.int)
analysisI <- stats::t.test(clusterSum$lp[clusterSum$arm=='intervention'], conf.level = 1-alpha)
int.ests$interventionP <- invlogit(analysisI$conf.int)
junk <- Analyse_CRT(trial=test_Simulate_CRT,method='GEE')
View(junk)
? geepack::geese
? geepack::geese.fit
analysisC
analysisC$estimate
library(CRTspillover)
junk <- Analyse_CRT(trial=test_Simulate_CRT,method='GEE')
junk <- Analyse_CRT(trial=test_Simulate_CRT,method='HM')
matrix(2,0,3,0,dim=c(2,2))
matrix(2,0,3,0,nrow=2,ncol=2)
matrix(data=c(2,0,3,0),nrow=2,ncol=2)
matrix(data=c(2,0,0,3),nrow=2,ncol=2)
? MASS::mvrnorm
library(CRTspillover)
junk <- Analyse_CRT(trial=test_Simulate_CRT,method='GEE')
junk <- Analyse_CRT(trial=test_Simulate_CRT,method='HM')
trial=test_Simulate_CRT
devtools::load_all(".")
clusterSum <- data.frame(trial %>%
group_by(cluster) %>%
dplyr::summarize(positives = sum(y1),
total = sum(y_off),
arm = arm[1]))
library(CRTspillover)
library(CRTspillover)
junk <- Analyse_CRT(trial=test_Simulate_CRT,method='HM')
library(CRTspillover)
junk <- Analyse_CRT(trial=test_Simulate_CRT,method='HM')
junk <- Analyse_CRT(trial=test_Simulate_CRT,method='GEE')
library(CRTspillover)
junk <- Analyse_CRT(trial=test_Simulate_CRT,method='GEE')
library(CRTspillover)
junk <- Analyse_CRT(trial=test_Simulate_CRT,method='GEE')
junk <- Analyse_CRT(trial=test_Simulate_CRT,method='HM')
library(CRTspillover)
library(CRTspillover)
junk <- Analyse_CRT(trial=test_Simulate_CRT,method='GEE')
? readr
library(CRTspillover)
source("C:/git_repos/CRTspillover/inst/extdata/examples.R")
test1 <- read.csv(file * 'C:/git_repos/trialdesign/RCode_data/BagamoyoTrial.csv')
source("C:/git_repos/CRTspillover/inst/extdata/examples.R")
test1 <- read.csv(file = 'C:/git_repos/trialdesign/RCode_data/BagamoyoTrial.csv')
test2 <- Convert_LatLong(test1)
test3 <- Anonymise_TrialSite(trial = test2)
test4 <- Randomize_CRT(test2)
install.packages("formatR")
? formatR
?? formatR
library(formatR)
formatR::tidy_source()
formatR::tidy_source(source='utils.R')
formatR::tidy_source(source='R/utils.R')
formatR::tidy_source(source='R/utils.R')
utils.R <- formatR::tidy_source(source='R/utils.R')
formatR::tidy_source(source='R/utils.R')
library(CRTspillover)
formatR::tidy_source(source='R/Analyse_CRT.R')
formatR::tidy_source(source='R/utils.R',arrow=getOption('format.Rarrow'=TRUE))
formatR::tidy_source(source='R/utils.R',arrow=getOption('formatR.arrow'=TRUE))
formatR::tidy_source(source='R/utils.R',arrow=getOption('format.Rarrow',TRUE))
formatR::tidy_source(source='R/Analyse_CRT.R',arrow=getOption('format.Rarrow',TRUE))
formatR::tidy_source(source='R/Design_CRT.R',arrow=getOption('format.Rarrow',TRUE))
formatR::tidy_source(source='vignettes/CRTspillover.Rmd',arrow=getOption('format.Rarrow',TRUE))
formatR::tidy_source(source='junk.r',arrow=getOption('format.Rarrow',TRUE))
formatR::tidy_source(source='R/Plot_CRT.r',arrow=getOption('format.Rarrow',TRUE))
library(CRTspillover)
Plot_DataByDistance(trial=test_Simulate_CRT)
? ggthemes
? ggplot::ggthemes
? ggplot2::ggthemes
? ggplot2::themes
?? themes
library(CRTspillover)
devtools::document()
library(CRTspillover)
library(CRTspillover)
? ggplot2::theme
library(CRTspillover)
library(CRTspillover)
example_locations <- read.csv(file = system.file("extdata", file = "example_baseline.csv", package = "CRTspillover",
mustWork = TRUE))
example_xy <- Convert_LatLong(df = example_locations)
# Aggregate data for multiple observations for the same location Only the (x,y) co-ordinates and numerical
# auxiliary variables
example_xy$base_num <- example_xy$RDT_test_result
example_xy <- with(example_xy, example_xy[, c("x", "y", "base_num")])
example_xy$base_denom <- 1
example_aggregated <- Aggregate_CRT(trial = example_xy, auxiliaries = c("base_num", "base_denom"))
# Plot map of locations
Plot_CRTmap(example_aggregated, maskbuffer = 0.5)
example_clustered <- DefineClusters(trial = example_aggregated, h = 50, algo = 'NN')
```r
example_randomized <- Randomize_CRT(trial = example_clustered, matchedPair = TRUE)
Plot_CRTmap(trial <- example_randomized,maskbuffer=0.5,legend.position="bottom")
Plot_CRTmap(trial <- example_randomized,maskbuffer=0.5,legend.position=c(0.2,0.8))
library(CRTspillover)
Plot_CRTmap(trial <- example_randomized,maskbuffer=0.5,legend.position=c(0.2,0.8))
library(CRTspillover)
Plot_CRTmap(trial <- example_randomized,maskbuffer=0.5,legend.position=c(0.2,0.8))
library(CRTspillover)
Plot_CRTmap(trial <- example_randomized,maskbuffer=0.5,legend.position=c(0.2,0.8))
library(CRTspillover)
Plot_CRTmap(trial <- example_randomized,maskbuffer=0.5,legend.position=c(0.2,0.8))
Plot_CRTmap(trial <- example_randomized,maskbuffer=0.5,legend.position=c(0.2,0.8))
library(CRTspillover)
library(CRTspillover)
Plot_CRTmap(trial <- example_randomized,maskbuffer=0.5,legend.position=c(0.2,0.8))
Plot_CRTmap(trial <- example_randomized,maskbuffer=0.5,legend.position=c(0.2,0.8))
knitr::knit("vignettes/Usecase1.Rmd.orig", output = "vignettes/Usecase1.Rmd")
rmarkdown.html_vignette.check_title = FALSE
devtools::install(build_vignettes = TRUE)
browseVignettes(package="CRTspillover")
? system.file
knitr::knit("vignettes/Usecase1.Rmd.orig", output = "vignettes/Usecase1.Rmd")
knitr::knit("vignettes/Usecase1.Rmd.orig", output = "vignettes/Usecase1.Rmd")
rmarkdown.html_vignette.check_title = FALSE
devtools::install(build_vignettes = TRUE)
knitr::knit("vignettes/Usecase1.Rmd.orig", output = "vignettes/Usecase1.Rmd")
knitr::knit("vignettes/CRTspillover.Rmd", output = "vignettes/CRTspillover.Rmd")
knitr::knit("vignettes/Usecase1.Rmd.orig", output = "vignettes/Usecase1.Rmd")
files <- lapply(list.files(system.file('extdata', package = 'CRTspillover'), full.names = TRUE), read.csv)
files <- system.file('instextdata', package = 'CRTspillover'), full.names = TRUE), read.csv)
files <- lapply(list.files(system.file('inst/extdata', package = 'CRTspillover'), full.names = TRUE), read.csv)
files
View(files)
system.file('inst/extdata', package = 'CRTspillover'), full.names = TRUE)
system.file('inst/extdata', package = 'CRTspillover')
system.file('inst/extdata', package = 'CRTspillover') <- "example_baseline.csv"
system.file('inst/extdata', package = 'CRTspillover') "example_baseline.csv"
example_baseline <- system.file("extdata", "example_baseline.csv", package = "CRTspillover")
example_path <- system.file("extdata", "example_baseline.csv", package = "CRTspillover")
read.csv(example_path)
example_baseline_path <- system.file("extdata", "example_baseline.csv", package = "CRTspillover")
example_baseline <- read.csv(example_baseline_path)
head(example_baseline)
devtools::document()
knitr::knit("vignettes/CRTspillover.Rmd.orig", output = "vignettes/CRTspillover.Rmd")
devtools::document()
rmarkdown.html_vignette.check_title = FALSE
devtools::document()
knitr::knit("vignettes/Usecase1.Rmd.orig", output = "vignettes/Usecase1.Rmd")
devtools::document()
rmarkdown.html_vignette.check_title = FALSE
devtools::install(build_vignettes = TRUE)
library(CRTspillover)
devtools::load_all(".")
library(CRTspillover)
devtools::document()
knitr::knit("vignettes/CRTspillover.Rmd.orig", output = "vignettes/CRTspillover.Rmd")
rmarkdown.html_vignette.check_title = FALSE
knitr::knit("vignettes/Usecase1.Rmd.orig", output = "vignettes/Usecase1.Rmd")
rmarkdown.html_vignette.check_title = FALSE
devtools::install(build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
get_example_baseline()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(CRTspillover)
devtools::document()
knitr::knit("vignettes/CRTspillover.Rmd.orig", output = "vignettes/CRTspillover.Rmd")
devtools::document()
rmarkdown.html_vignette.check_title = FALSE
devtools::document()
devtools::document()
library(CRTspillover)
devtools::document()
knitr::knit("vignettes/CRTspillover.Rmd.orig", output = "vignettes/CRTspillover.Rmd")
source("C:/git_repos/CRTspillover/vignettes/runVignette.R")
rmarkdown.html_vignette.check_title = FALSE
devtools::install(build_vignettes = TRUE)
# to build package website
usethis::use_pkgdown()
library(CRTspillover)
# to build package website
usethis::use_pkgdown()
? CRTspillover
browseVignettes(package="CRTspillover")
source("C:/git_repos/CRTspillover/vignettes/runVignette.R")
? knitr::opts_knit
opts_knit$set(base.dir = 'vignettes')
knitr::opts_knit$set(base.dir = 'vignettes')
knitr::knit("vignettes/CRTspillover.Rmd.orig", output = "vignettes/CRTspillover.Rmd")
knitr::knit("vignettes/Usecase1.Rmd.orig", output = "vignettes/Usecase1.Rmd")
knitr::knit("vignettes/Usecase2.Rmd.orig", output = "vignettes/Usecase2.Rmd")
knitr::knit("vignettes/Usecase3.Rmd.orig", output = "vignettes/Usecase3.Rmd")
rmarkdown.html_vignette.check_title = FALSE
devtools::install(build_vignettes = TRUE)
library(CRTspillover)
knitr::opts_knit$set(base.dir = 'vignettes')
knitr::knit("vignettes/CRTspillover.Rmd.orig", output = "vignettes/CRTspillover.Rmd")
knitr::knit("vignettes/Usecase1.Rmd.orig", output = "vignettes/Usecase1.Rmd")
knitr::knit("vignettes/Usecase2.Rmd.orig", output = "vignettes/Usecase2.Rmd")
knitr::knit("vignettes/Usecase3.Rmd.orig", output = "vignettes/Usecase3.Rmd")
rmarkdown.html_vignette.check_title = FALSE
devtools::install(build_vignettes = TRUE)
# to build package website
usethis::use_pkgdown()
pkgdown::build_site()
library(CRTspillover)
knitr::opts_knit$set(base.dir = 'vignettes')
knitr::knit("vignettes/CRTspillover.Rmd.orig", output = "CRTspillover.Rmd")
knitr::knit("vignettes/Usecase1.Rmd.orig", output = "Usecase1.Rmd")
knitr::knit("vignettes/Usecase2.Rmd.orig", output = "Usecase2.Rmd")
knitr::knit("vignettes/Usecase3.Rmd.orig", output = "Usecase3.Rmd")
rmarkdown.html_vignette.check_title = FALSE
devtools::install(build_vignettes = TRUE)
knitr::opts_knit$set(base.dir = 'vignettes')
knitr::knit("vignettes/CRTspillover.Rmd.orig", output = "CRTspillover.Rmd")
knitr::knit("vignettes/Usecase1.Rmd.orig", output = "Usecase1.Rmd")
knitr::knit("vignettes/Usecase2.Rmd.orig", output = "Usecase2.Rmd")
knitr::knit("vignettes/Usecase3.Rmd.orig", output = "Usecase3.Rmd")
rmarkdown.html_vignette.check_title = FALSE
devtools::install(build_vignettes = TRUE)
library(CRTspillover)
knitr::opts_knit$set(base.dir = 'vignettes')
knitr::knit("vignettes/CRTspillover.Rmd.orig", output = "CRTspillover.Rmd")
knitr::knit("vignettes/Usecase1.Rmd.orig", output = "Usecase1.Rmd")
knitr::knit("vignettes/Usecase2.Rmd.orig", output = "Usecase2.Rmd")
knitr::knit("vignettes/Usecase3.Rmd.orig", output = "Usecase3.Rmd")
rmarkdown.html_vignette.check_title = FALSE
devtools::install(build_vignettes = TRUE)
set.seed(1234)
#   use co-ordinates, cluster and arm assignments, and baseline data from `test5`
test6b = Simulate_CRT(trial= test5,
efficacy=0.4,
initialPrevalence = 0.5,
generateBaseline=FALSE,
baselineNumerator='base_num',
baselineDenominator='base_denom',
ICC_inp=NULL,
theta_inp=0.8)
library(CRTspillover)
set.seed(1234)
#   use co-ordinates, cluster and arm assignments, and baseline data from `test5`
test6b = Simulate_CRT(trial= test5,
efficacy=0.4,
initialPrevalence = 0.5,
generateBaseline=FALSE,
baselineNumerator='base_num',
baselineDenominator='base_denom',
ICC_inp=NULL,
theta_inp=0.8)
library(CRTspillover)
example_locations <- get_example_baseline()
example_xy <- Convert_LatLong(df = example_locations)
# Aggregate data for multiple observations for the same location Only the (x,y) co-ordinates and numerical
# auxiliary variables
example_xy$base_num <- example_xy$RDT_test_result
example_xy <- with(example_xy, example_xy[, c("x", "y", "base_num")])
example_xy$base_denom <- 1
example_aggregated <- Aggregate_CRT(trial = example_xy, auxiliaries = c("base_num", "base_denom"))
# Plot map of locations
Plot_CRTmap(example_aggregated, maskbuffer = 0.5)
example_clustered <- DefineClusters(trial = example_aggregated, h = 50, algo = 'NN')
Plot_CRTmap(example_clustered, maskbuffer = 0.5)
example_randomized <- Randomize_CRT(trial = example_clustered, matchedPair = TRUE)
Plot_CRTmap(trial <- example_randomized,maskbuffer=0.5,legend.position=c(0.2,0.8))
library(CRTspillover)
knitr::opts_knit$set(base.dir = 'vignettes')
knitr::knit("vignettes/CRTspillover.Rmd.orig", output = "CRTspillover.Rmd")
knitr::knit("vignettes/Usecase1.Rmd.orig", output = "Usecase1.Rmd")
knitr::knit("vignettes/Usecase2.Rmd.orig", output = "Usecase2.Rmd")
knitr::knit("vignettes/Usecase3.Rmd.orig", output = "Usecase3.Rmd")
rmarkdown.html_vignette.check_title = FALSE
devtools::install(build_vignettes = TRUE)
# to build package website
usethis::use_pkgdown()
pkgdown::build_site()
library(CRTspillover)
knitr::opts_knit$set(base.dir = 'vignettes')
knitr::knit("vignettes/CRTspillover.Rmd.orig", output = "CRTspillover.Rmd")
knitr::knit("vignettes/Usecase1.Rmd.orig", output = "Usecase1.Rmd")
library(CRTspillover)
restart()
restart
knitr::opts_knit$set(base.dir = 'vignettes')
knitr::knit("vignettes/CRTspillover.Rmd.orig", output = "CRTspillover.Rmd")
knitr::knit("vignettes/Usecase1.Rmd.orig", output = "Usecase1.Rmd")
knitr::knit("vignettes/Usecase2.Rmd.orig", output = "Usecase2.Rmd")
knitr::knit("vignettes/Usecase3.Rmd.orig", output = "Usecase3.Rmd")
rmarkdown.html_vignette.check_title = FALSE
devtools::install(build_vignettes = TRUE)
# to build package website
usethis::use_pkgdown()
pkgdown::build_site()
#Plot locations only
Plot_CRTmap(trial=testArms,showArms=FALSE,showClusterBoundaries=FALSE,
colourClusters=FALSE, maskbuffer=0.2)
#Plot locations only
Plot_CRTmap(trial=testArms,showArms=FALSE,showClusterBoundaries=FALSE,
colourClusters=FALSE, maskbuffer=0.2)
#Plot clusters in colour
Plot_CRTmap(trial=testArms, showArms=FALSE, colourClusters=TRUE, labelsize=2, maskbuffer=0.2)
#Plot arms
Plot_CRTmap(trial=testArms, maskbuffer=0.2, legend.position=c(0.2,0.8))
#Plot distance to nearest discordant location
library(CRTspillover)
Plot_CRTmap(trial=testArms,showClusterBoundaries=FALSE,
+             colourClusters=FALSE, maskbuffer=0.2)
Plot_CRTmap(trial=testArms,showClusterBoundaries=FALSE,
colourClusters=FALSE, maskbuffer=0.2)
source("C:/git_repos/CRTspillover/vignettes/runVignette.R")
source("C:/git_repos/CRTspillover/vignettes/runVignette.R")
source("C:/git_repos/CRTspillover/vignettes/runVignette.R")
source("C:/git_repos/CRTspillover/vignettes/runVignette.R")
library(CRTspillover)
source("C:/git_repos/CRTspillover/vignettes/runVignette.R")
library(CRTspillover)
source("C:/git_repos/CRTspillover/vignettes/runVignette.R")
plot(pressure)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
library(CRTspillover)
## Example generation of default assignments for a test dataset
testDesign = Design_CRT()
library(CRTspillover)
knitr::knit("vignettes/CRTspillover.Rmd.orig", output = "vignettes/CRTspillover.Rmd")
knitr::knit("vignettes/Usecase1.Rmd.orig", output = "vignettes/Usecase1.Rmd")
rmarkdown.html_vignette.check_title = FALSE
devtools::install(build_vignettes = TRUE)
library(CRTspillover)
library(CRTspillover)
knitr::knit("vignettes/CRTspillover.Rmd.orig", output = "vignettes/CRTspillover.Rmd")
knitr::knit("vignettes/Usecase1.Rmd.orig", output = "vignettes/Usecase1.Rmd")
knitr::knit("vignettes/Usecase2.Rmd.orig", output = "vignettes/Usecase2.Rmd")
knitr::knit("vignettes/Usecase3.Rmd.orig", output = "vignettes/Usecase3.Rmd")
rmarkdown.html_vignette.check_title = FALSE
devtools::install(build_vignettes = TRUE)
library(CRTspillover)
source("C:/git_repos/CRTspillover/vignettes/runVignette.R")
source("C:/git_repos/CRTspillover/vignettes/runVignette.R")
library(CRTspillover)
source("C:/git_repos/CRTspillover/vignettes/runVignette.R")
library(CRTspillover)
library(CRTspillover)
knitr::opts_chunk$set(error=FALSE)
knitr::knit("vignettes/CRTspillover.Rmd.orig", output = "vignettes/CRTspillover.Rmd")
knitr::knit("vignettes/Usecase1.Rmd.orig", output = "vignettes/Usecase1.Rmd")
rmarkdown.html_vignette.check_title = FALSE
devtools::install(build_vignettes = TRUE)
browseVignettes(package='CRTspillover')
browseVignettes(package='CRTspillover')
browseVignettes(package='CRTspillover')
browseVignettes(package='CRTspillover')
