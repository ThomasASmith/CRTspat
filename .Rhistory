output[2, 1] <- "(x, y)"
} else if(!identical(object$trial$lat,numeric(0)) & !identical(object$trial$lat,numeric(0))) {
output[2, 1] <- "Lat-Long"
} else {
output[2, 1] <- "No coordinates in dataset"
}
if (identical(output[2, 1],"(x, y)")) {
cat("\nSummary of coordinates\n----------------------\n")
coordinate.summary <- with(object$trial, summary(cbind(x, y)))
rownames(coordinate.summary) <- substr(coordinate.summary[, 1], 1, 8)
coordinate.summary[, ] <- substr(coordinate.summary[, ], 9, 13)
print(t(coordinate.summary))
xycoords <- data.frame(cbind(x=object$trial$x,y=object$trial$y))
tr <- sf::st_as_sf(xycoords, coords = c("x","y"))
buf1 <- sf::st_buffer(tr, maskbuffer)
buf2 <- sf::st_union(buf1)
area <- sf::st_area(buf2)
cat("Total area (within ", maskbuffer,"km of a location) : ", format(area, digits = 3), "sq.km\n\n")
}
identical(output[2, 1],"(x, y)")
output[2, 1]
identical(unlist(output[2, 1]),"(x, y)")
unlist(output[2, 1])
unname(output[2, 1])
identical(unname(output[2, 1]),"(x, y)")
library(CRTspat)
summary(example)
summary(example_locations)
summary(example_randomized)
library(CRTspat)
summary(example_randomized)
summary(example_randomized)
library(CRTspat)
summary(example_randomized)
object <- example_randomized
object <- example_randomized
cat("===============================CLUSTER RANDOMISED TRIAL ===========================\n")
output <- matrix("  ", nrow = 22, ncol = 2)
rownames(output) <- paste0("row ", 1:nrow(output))
rownames(output)[1] <- "Locations and Clusters\n----------------------                                "
output[1, 1] <- "-"
summary(example_randomized)
object <- example_randomized
output <- matrix("  ", nrow = 22, ncol = 2)
rownames(output) <- paste0("row ", 1:nrow(output))
rownames(output)[1] <- "Locations and Clusters\n----------------------                                "
output[1, 1] <- "-"
rownames(output)[2] <- "Coordinate system            "
if (!identical(object$trial$x,numeric(0)) & !identical(object$trial$y,numeric(0))) {
output[2, 1] <- "(x, y)"
} else if(!identical(object$trial$lat,numeric(0)) & !identical(object$trial$lat,numeric(0))) {
output[2, 1] <- "Lat-Long"
} else {
output[2, 1] <- "No coordinates in dataset"
}
if (identical(unname(output[2, 1]),"(x, y)")) {
cat("\nSummary of coordinates\n----------------------\n")
coordinate.summary <- with(object$trial, summary(cbind(x, y)))
rownames(coordinate.summary) <- substr(coordinate.summary[, 1], 1, 8)
coordinate.summary[, ] <- substr(coordinate.summary[, ], 9, 13)
print(t(coordinate.summary))
xycoords <- data.frame(cbind(x=object$trial$x,y=object$trial$y))
tr <- sf::st_as_sf(xycoords, coords = c("x","y"))
buf1 <- sf::st_buffer(tr, maskbuffer)
buf2 <- sf::st_union(buf1)
area <- sf::st_area(buf2)
cat("Total area (within ", maskbuffer,"km of a location) : ", format(area, digits = 3), "sq.km\n\n")
}
maskbuffer = 0.2
if (identical(unname(output[2, 1]),"(x, y)")) {
cat("\nSummary of coordinates\n----------------------\n")
coordinate.summary <- with(object$trial, summary(cbind(x, y)))
rownames(coordinate.summary) <- substr(coordinate.summary[, 1], 1, 8)
coordinate.summary[, ] <- substr(coordinate.summary[, ], 9, 13)
print(t(coordinate.summary))
xycoords <- data.frame(cbind(x=object$trial$x,y=object$trial$y))
tr <- sf::st_as_sf(xycoords, coords = c("x","y"))
buf1 <- sf::st_buffer(tr, maskbuffer)
buf2 <- sf::st_union(buf1)
area <- sf::st_area(buf2)
cat("Total area (within ", maskbuffer,"km of a location) : ", format(area, digits = 3), "sq.km\n\n")
}
# order coordinates
coordinates$order <- seq(1:nrow(coordinates))
cat("===============================CLUSTER RANDOMISED TRIAL ===========================\n")
output <- matrix("  ", nrow = 22, ncol = 2)
rownames(output) <- paste0("row ", 1:nrow(output))
rownames(output)[1] <- "Locations and Clusters\n----------------------                                "
output[1, 1] <- "-"
rownames(output)[2] <- "Coordinate system            "
if (!identical(object$trial$x,numeric(0)) & !identical(object$trial$y,numeric(0))) {
output[2, 1] <- "(x, y)"
} else if(!identical(object$trial$lat,numeric(0)) & !identical(object$trial$lat,numeric(0))) {
output[2, 1] <- "Lat-Long"
} else {
output[2, 1] <- "No coordinates in dataset"
}
if (identical(unname(output[2, 1]),"(x, y)")) {
cat("\nSummary of coordinates\n----------------------\n")
coordinate.summary <- with(object$trial, summary(cbind(x, y)))
rownames(coordinate.summary) <- substr(coordinate.summary[, 1], 1, 8)
coordinate.summary[, ] <- substr(coordinate.summary[, ], 9, 13)
print(t(coordinate.summary))
xycoords <- data.frame(cbind(x=object$trial$x,y=object$trial$y))
tr <- sf::st_as_sf(xycoords, coords = c("x","y"))
buf1 <- sf::st_buffer(tr, maskbuffer)
buf2 <- sf::st_union(buf1)
area <- sf::st_area(buf2)
cat("Total area (within ", maskbuffer,"km of a location) : ", format(area, digits = 3), "sq.km\n\n")
}
rownames(output)[5] <- "Available clusters (across both arms)                 "
if (is.null(object$geom_full$mean_h) | is.na(object$geom_full$mean_h)) {
output[5, 1] <- "Not assigned"
} else {
clustersAvailableFull <- with(object$geom_full, floor(locations/mean_h))
output[5, 1] <- clustersAvailableFull
rownames(output)[6] <- "  Per cluster mean number of points                   "
output[6, 1] <- round(object$geom_full$mean_h, digits = 1)
rownames(output)[7] <- "  Per cluster s.d. number of points                   "
if (!is.null(object$geom_full$sd_h))
output[7, 1] <- round(object$geom_full$sd_h, digits = 1)
}
object$geom_full$mean_h
object$geom_full
head(object$trial)
object <- example_randomized
head(object$trial)
object <- example
object$geom_full$mean_h
head(object$trial)
summary(exampleCRT)
examplePower = CRTpower(trial = readdata('example_site.csv'), desiredPower = 0.8,
effect=0.4, yC=0.35, outcome_type = 'd', ICC = 0.05, k = 20)
summary(examplePower)
object <- examplePower
cat("===============================CLUSTER RANDOMISED TRIAL ===========================\n")
output <- matrix("  ", nrow = 22, ncol = 2)
rownames(output) <- paste0("row ", 1:nrow(output))
rownames(output)[1] <- "Locations and Clusters\n----------------------                                "
output[1, 1] <- "-"
rownames(output)[2] <- "Coordinate system            "
if (!identical(object$trial$x,numeric(0)) & !identical(object$trial$y,numeric(0))) {
output[2, 1] <- "(x, y)"
} else if(!identical(object$trial$lat,numeric(0)) & !identical(object$trial$lat,numeric(0))) {
output[2, 1] <- "Lat-Long"
} else {
output[2, 1] <- "No coordinates in dataset"
}
if (identical(unname(output[2, 1]),"(x, y)")) {
cat("\nSummary of coordinates\n----------------------\n")
coordinate.summary <- with(object$trial, summary(cbind(x, y)))
rownames(coordinate.summary) <- substr(coordinate.summary[, 1], 1, 8)
coordinate.summary[, ] <- substr(coordinate.summary[, ], 9, 13)
print(t(coordinate.summary))
xycoords <- data.frame(cbind(x=object$trial$x,y=object$trial$y))
tr <- sf::st_as_sf(xycoords, coords = c("x","y"))
buf1 <- sf::st_buffer(tr, maskbuffer)
buf2 <- sf::st_union(buf1)
area <- sf::st_area(buf2)
cat("Total area (within ", maskbuffer,"km of a location) : ", format(area, digits = 3), "sq.km\n\n")
}
unname(output[2, 1])
maskbuffer = 0.2
cat("===============================CLUSTER RANDOMISED TRIAL ===========================\n")
output <- matrix("  ", nrow = 22, ncol = 2)
rownames(output) <- paste0("row ", 1:nrow(output))
rownames(output)[1] <- "Locations and Clusters\n----------------------                                "
output[1, 1] <- "-"
rownames(output)[2] <- "Coordinate system            "
if (!identical(object$trial$x,numeric(0)) & !identical(object$trial$y,numeric(0))) {
output[2, 1] <- "(x, y)"
} else if(!identical(object$trial$lat,numeric(0)) & !identical(object$trial$lat,numeric(0))) {
output[2, 1] <- "Lat-Long"
} else {
output[2, 1] <- "No coordinates in dataset"
}
if (identical(unname(output[2, 1]),"(x, y)")) {
cat("\nSummary of coordinates\n----------------------\n")
coordinate.summary <- with(object$trial, summary(cbind(x, y)))
rownames(coordinate.summary) <- substr(coordinate.summary[, 1], 1, 8)
coordinate.summary[, ] <- substr(coordinate.summary[, ], 9, 13)
print(t(coordinate.summary))
xycoords <- data.frame(cbind(x=object$trial$x,y=object$trial$y))
tr <- sf::st_as_sf(xycoords, coords = c("x","y"))
buf1 <- sf::st_buffer(tr, maskbuffer)
buf2 <- sf::st_union(buf1)
area <- sf::st_area(buf2)
cat("Total area (within ", maskbuffer,"km of a location) : ", format(area, digits = 3), "sq.km\n\n")
}
rownames(output)[5] <- "Available clusters (across both arms)                 "
if (is.null(object$geom_full$mean_h) | is.na(object$geom_full$mean_h)) {
output[5, 1] <- "Not assigned"
} else {
clustersAvailableFull <- with(object$geom_full, floor(locations/mean_h))
output[5, 1] <- clustersAvailableFull
rownames(output)[6] <- "  Per cluster mean number of points                   "
output[6, 1] <- round(object$geom_full$mean_h, digits = 1)
rownames(output)[7] <- "  Per cluster s.d. number of points                   "
if (!is.null(object$geom_full$sd_h))
output[7, 1] <- round(object$geom_full$sd_h, digits = 1)
}
rownames(output)[4] <- "Locations:                                            "
if(identical(object$geom_full$locations,object$geom_full$records)){
output[4, 1] <- object$geom_full$locations
} else {
if(!is.null(object$geom_full$records)) {
rownames(output)[4] <- paste0("Not aggregated. Total records: ",
object$geom_full$records,". Unique locations:")
}
output[4, 1] <- object$geom_full$locations
}
if (object$geom_core$locations > 0) {
output[1, 1] <- "Full"
output[1, 2] <- "Core"
output[4, 2] <- object$geom_core$locations
if (!is.na(object$geom_core$mean_h)) {
clustersAvailableCore <- with(object$geom_core, floor(locations/mean_h))
output[5, 2] <- clustersAvailableCore
output[6, 2] <- round(object$geom_core$mean_h, digits = 1)
}
if (!is.null(object$geom_core$sd_h))
output[7, 2] <- round(object$geom_core$sd_h, digits = 1)
}
if (!identical(object$trial$arm,character(0))) {
sd1 <- ifelse(is.null(object$geom_full$sd_distance), NA, object$geom_full$sd_distance)
sd2 <- ifelse(is.null(object$geom_core$sd_distance), NA, object$geom_core$sd_distance)
rownames(output)[8] <- "S.D. of distance to nearest discordant location (km): "
output[8, 1] <- ifelse(is.na(sd1), "", round(sd1, digits = 2))
output[8, 2] <- ifelse(is.na(sd2), "", round(sd2, digits = 2))
rownames(output)[9] <- "Cluster randomization:            "
if (is.null(object$trial$pair)) {
output[9, 1] <- "Independently randomized"
} else {
output[9, 1] <- "Matched pairs randomized"
}
} else {
if (is.null(object$trial$x)) {
rownames(output)[9] <- "No locations to randomize"
} else {
rownames(output)[9] <- "No randomization"
}
output[9, 1] <- "-"
}
if (!is.null(object$design$alpha)) {
rownames(output)[10] <- "\nSpecification of Requirements\n-----------------------------"
output[10, 1] <- "-"
rownames(output)[11] <- "Significance level (2-sided):    "
output[11, 1] <- object$design$alpha
rownames(output)[12] <- "Type of Outcome                   "
output[12, 1] <- switch(object$design$outcome_type,
'y' = "continuous",
"n" = "count",
"e" = "event rate",
'p' = "proportion",
'd' = "dichotomous")
rownames(output)[13] <- "Expected outcome in control arm:  "
output[13, 1] <- object$design$yC
link <- switch(object$design$outcome_type,
'y' = "identity",
"n" = "log",
"e" = "log",
'p' = "logit",
'd' = "logit")
rownames(output)[14] <- switch(link,
"identity" = "Expected variance of outcome:     ",
"log" = "Expected overdispersion:          ",
"logit" = "Mean denominator:                 ")
output[14, 1] <- switch(link,
"identity" =  object$design$sigma2,
"log" = object$design$phi,
"logit" = object$design$N)
if (identical(object$design$outcome_type, 'd')) output[14, 1] <- ""
rownames(output)[15] <- "Required effect size:             "
output[15, 1] <- object$design$effect
rownames(output)[16] <- "Intra-cluster correlation:        "
output[16, 1] <- object$design$ICC
if (!is.null(object$design$buffer.width)) {
rownames(output)[3] <- "Buffer width :               "
if (object$design$buffer.width > 0) {
output[3, 1] <- paste0(object$design$buffer.width,
" km.")
} else {
output[3, 1] <- "No buffer"
}
}
}
output[17, 1] <- "-"
if (is.null(object$design$effect)) {
rownames(output)[17] <- "No power calculations to report"
} else {
rownames(output)[17] <- "\nPower calculations (ignoring contamination)\n------------------                    "
sufficient <- ifelse(clustersAvailableFull >= object$geom_full$clustersRequired,
"Yes", "No")
rownames(output)[18] <- "Design effect:                         "
output[18, 1] <- round(object$geom_full$DE, digits = 1)
rownames(output)[19] <- "Nominal power (%)                      "
output[19, 1] <- round(object$geom_full$power * 100, digits = 1)
rownames(output)[20] <- paste0("Clusters required for power of ",
object$design$desiredPower * 100, "%:     ")
output[20, 1] <- object$geom_full$clustersRequired
rownames(output)[21] <- "Sufficient clusters for required power?"
output[21, 1] <- sufficient
if (is.null(object$geom_core$power)) {
output <- subset(output, select = -c(2))
} else {
output[17, 1] <- "Full"
output[17, 2] <- "Core"
clustersAvailableCore <- with(object$geom_core, floor(locations/mean_h))
sufficientCore <- ifelse(clustersAvailableCore >= object$geom_core$clustersRequired,
"Yes", "No")
output[18, 2] <- round(object$geom_core$DE, digits = 1)
output[19, 2] <- round(object$geom_core$power * 100, digits = 1)
output[20, 2] <- object$geom_core$clustersRequired
output[21, 2] <- sufficientCore
}
}
standard.names <- c("x", "y", "cluster", "arm", "buffer", "nearestDiscord",
"geom_full", "geom_core", "design")
with(object$geom_full, floor(locations/mean_h))
with(object$geom_full, floor(locations))
with(object$geom_full, mean_h)
object$geom_full
with(object$geom_trial
object$geom_trial
head(object$geom_trial)
View(object)
head(object$geom_full)
library(CRTspat)
summary(exampleCRT)
summary(exampleCRT)
summary(examplePower)
object <-examplePower
cat("===============================CLUSTER RANDOMISED TRIAL ===========================\n")
output <- matrix("  ", nrow = 22, ncol = 2)
rownames(output) <- paste0("row ", 1:nrow(output))
rownames(output)[1] <- "Locations and Clusters\n----------------------                                "
output[1, 1] <- "-"
rownames(output)[2] <- "Coordinate system            "
if (!identical(object$trial$x,numeric(0)) & !identical(object$trial$y,numeric(0))) {
output[2, 1] <- "(x, y)"
} else if(!identical(object$trial$lat,numeric(0)) & !identical(object$trial$lat,numeric(0))) {
output[2, 1] <- "Lat-Long"
} else {
output[2, 1] <- "No coordinates in dataset"
}
if (identical(unname(output[2, 1]),"(x, y)")) {
cat("\nSummary of coordinates\n----------------------\n")
coordinate.summary <- with(object$trial, summary(cbind(x, y)))
rownames(coordinate.summary) <- substr(coordinate.summary[, 1], 1, 8)
coordinate.summary[, ] <- substr(coordinate.summary[, ], 9, 13)
print(t(coordinate.summary))
xycoords <- data.frame(cbind(x=object$trial$x,y=object$trial$y))
tr <- sf::st_as_sf(xycoords, coords = c("x","y"))
buf1 <- sf::st_buffer(tr, maskbuffer)
buf2 <- sf::st_union(buf1)
area <- sf::st_area(buf2)
cat("Total area (within ", maskbuffer,"km of a location) : ", format(area, digits = 3), "sq.km\n\n")
}
rownames(output)[5] <- "Available clusters (across both arms)                 "
if (is.null(object$geom_full$mean_h) | is.na(object$geom_full$mean_h)) {
output[5, 1] <- "Not assigned"
} else {
clustersAvailableFull <- with(object$geom_full, floor(locations/mean_h))
output[5, 1] <- clustersAvailableFull
rownames(output)[6] <- "  Per cluster mean number of points                   "
output[6, 1] <- round(object$geom_full$mean_h, digits = 1)
rownames(output)[7] <- "  Per cluster s.d. number of points                   "
if (!is.null(object$geom_full$sd_h))
output[7, 1] <- round(object$geom_full$sd_h, digits = 1)
}
rownames(output)[4] <- "Locations:                                            "
if(identical(object$geom_full$locations,object$geom_full$records)){
output[4, 1] <- object$geom_full$locations
} else {
if(!is.null(object$geom_full$records)) {
rownames(output)[4] <- paste0("Not aggregated. Total records: ",
object$geom_full$records,". Unique locations:")
}
output[4, 1] <- object$geom_full$locations
}
if (object$geom_core$locations > 0) {
output[1, 1] <- "Full"
output[1, 2] <- "Core"
output[4, 2] <- object$geom_core$locations
if (!is.na(object$geom_core$mean_h)) {
clustersAvailableCore <- with(object$geom_core, floor(locations/mean_h))
output[5, 2] <- clustersAvailableCore
output[6, 2] <- round(object$geom_core$mean_h, digits = 1)
}
if (!is.null(object$geom_core$sd_h))
output[7, 2] <- round(object$geom_core$sd_h, digits = 1)
}
clustersAvailableFull <- with(object$geom_full, floor(locations/mean_h))
with(object$geom_full, mean_h)
View(examplePower)
object$trial
object$trial$cluster
object$geom_full$k
library(CRTspat)
summary(examplePower)
summary(examplePower)
examplePower <- CRTspat(examplePower)
summary(examplePower)
c
library(CRTspat)
summary(examplePower)
examplePower$geom_full
object$design$effect
object$design$effect
object$geom_full
object$design
summary(examplePower)
examplePower <- CRTspat(examplePower)
examplePower <- CRTspat(examplePower)
CRTspat(trial = NULL)
CRTspat(trial = data.frame())
? CRTspat()
library(CRTspat)
CRTspat()
library(CRTspat)
CRTspat()
CRTspat()
CRTspat()
library(CRTspat)
examplePower = CRTpower(locations = 3000, ICC=0.10, effect=0.4, alpha = 0.05,
outcome_type = 'd', desiredPower = 0.8, yC=0.35, k = 20, sd_h=5)
summary(examplePower)
examplePower = CRTpower(trial = readdata('example_site.csv'), desiredPower = 0.8,
effect=0.4, yC=0.35, outcome_type = 'd', ICC = 0.05, k = 20)
summary(examplePower)
examplePower = CRTpower(locations = 3000, ICC=0.10, effect=0.4, alpha = 0.05,
outcome_type = 'd', desiredPower = 0.8, yC=0.35, k = 20, sd_h=5)
summary(examplePower)
object <- examplePower
object$trial$lat
library(CRTspat)
summary(examplePower)
examplePower <- CRTspat(examplePower)
library(CRTspat)
examplePower <- CRTspat(examplePower)
examplePower <- CRTspat(examplePower)
nrow(values$trial)
values$geom_full$records
identical(nrow(values$trial),values$geom_full$records)
(nrow(values$trial) == values$geom_full$records)
library(CRTspat)
examplePower <- CRTspat(examplePower)
library(CRTspat)
examplePower <- CRTspat(examplePower)
summary(examplePower)
examplePower$geom_full$mean_h
examplePower$design
examplePower = CRTpower(locations = 3000, ICC=0.10, effect=0.4, alpha = 0.05,
outcome_type = 'd', desiredPower = 0.8, yC=0.35, k = 20, sd_h=5)
summary(examplePower)
examplePower <- CRTspat(examplePower)
summary(examplePower)
library(CRTspat)
examplePower = CRTpower(locations = 3000, ICC=0.10, effect=0.4, alpha = 0.05,
outcome_type = 'd', desiredPower = 0.8, yC=0.35, k = 20, sd_h=5)
summary(examplePower)
examplePower <- CRTspat(examplePower)
summary(examplePower)
examplePower$geom_full
library(CRTspat)
examplePower = CRTpower(locations = 3000, ICC=0.10, effect=0.4, alpha = 0.05,
outcome_type = 'd', desiredPower = 0.8, yC=0.35, k = 20, sd_h=5)
summary(examplePower)
library(CRTspat)
examplePower = CRTpower(locations = 3000, ICC=0.10, effect=0.4, alpha = 0.05,
outcome_type = 'd', desiredPower = 0.8, yC=0.35, k = 20, sd_h=5)
summary(examplePower)
examplePower$geom_full
examplePower$design
examplePower = CRTpower(locations = 3000, ICC=0.10, effect=0.4, alpha = 0.05,
outcome_type = 'd', desiredPower = 0.8, yC=0.35, k = 20, sd_h=5)
nrow(trial)
library(CRTspat)
examplePower = CRTpower(locations = 3000, ICC=0.10, effect=0.4, alpha = 0.05,
outcome_type = 'd', desiredPower = 0.8, yC=0.35, k = 20, sd_h=5)
examplePower$design
examplePower$geom_full
examplePower = CRTpower(locations = 3000, ICC=0.10, effect=0.4, alpha = 0.05,
outcome_type = 'd', desiredPower = 0.8, yC=0.35, k = 20, sd_h=5)
examplePower = CRTpower(locations = 3000, ICC=0.10, effect=0.4, alpha = 0.05,
outcome_type = 'd', desiredPower = 0.8, yC=0.35, k = 20, sd_h=5)
examplePower = CRTpower(locations = 3000, ICC=0.10, effect=0.4, alpha = 0.05,
outcome_type = 'd', desiredPower = 0.8, yC=0.35, k = 20, sd_h=5)
View(design)
design <- ifelse(is.null(CRT$design), list(), CRT$design)
is.null(CRT$design)
design <- ifelse(is.null(CRT$design$locations), list(), CRT$design)
design$locations <- ifelse(identical(nrow(CRT$trial),0), locations, nrow(CRT$trial))
identical(nrow(CRT$trial),0)
nrow(CRT$trial) == 0
design$locations <- ifelse((nrow(CRT$trial) == 0), locations, nrow(CRT$trial))
parnames <- c("alpha", "desiredPower", "effect", "yC", "outcome_type",
"sigma2", "phi", "N", "ICC", "k", "sd_h")
# Identify which variables to retrieve from the pre-existing design
from_old <- lapply(mget(parnames), FUN = is.null)
design[parnames] <- ifelse(from_old, design[parnames], mget(parnames))
CRT$trial$buffer
CRT$trial[CRT$trial$buffer == FALSE, ]
library(CRTspat)
examplePower = CRTpower(locations = 3000, ICC=0.10, effect=0.4, alpha = 0.05,
outcome_type = 'd', desiredPower = 0.8, yC=0.35, k = 20, sd_h=5)
summary(examplePower)
library(CRTspat)
summary(examplePower)
examplePower = CRTpower(trial = readdata('example_site.csv'), desiredPower = 0.8,
effect=0.4, yC=0.35, outcome_type = 'd', ICC = 0.05, k = 20)
summary(examplePower)
