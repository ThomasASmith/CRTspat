kdat$index = 1:nrow(kdat)
working = kdat
for(i in 1:nrow(kdat)){
j = if(i %% k == 0) k else (i %% k)
itemloc =
working$index[which(working[,(paste0("D", j))] ==
min(working[,(paste0("D",j))]))[1]]
kdat$assigned[kdat$index == itemloc] = j
working %<>% filter(!index == itemloc)
}
#    for(i in 1:nrow(working)){
#      #these leftover points get assigned to whoever's closest, without regard to k
#      kdat$assigned[kdat$index ==
#                      working$index[i]] =
#        which(working[i,4:(3+k)] == min(working[i, 4:(3+k)]))
#    }
# remove records for dummies
kdat = kdat[!is.na(kdat$assigned0),]
# recalculate the centroids using k-means with k = 1.
centers <- kdat %>% filter(assigned == 1) %>%
select(x, y) %>%
kmeans(1) %$% centers
for(j in 2:k){
centers %<>% rbind(kdat %>%
filter(assigned == j) %>%
select(x, y) %>%
kmeans(1) %$% centers)
}
centers %<>% as.data.frame()
}
return(kdat$assigned)}
assignment = kmeansAdj(trial=test3,k=15)
View(dummies)
kmeansAdj = function(trial, k){
kdat = trial %>% select(c(x, y))
kdat %>% kmeans(k) -> kclust
centers = as.data.frame(kclust$centers)
colnames(centers)<- c("x","y")
kdat$index = 1:nrow(kdat)
kdat$assigned0 = -9
kdat$assigned = 0
while(!setequal(kdat$assigned,  kdat$assigned0)){
kdat$assigned0=kdat$assigned
# calculate cluster size
clusterSize = ceiling(nrow(kdat)/k)
# dummy points at cluster centroids are added to achieve same numbers per cluster
ndummies = clusterSize * k - nrow(kdat)
dummies = data.frame(centers[1:ndummies,])
dummies$index =  as.vector(seq(1:ndummies) + nrow(kdat))
dummies$assigned = dummies$assigned0 = NA
kdat = rbind(kdat,dummies)
for(j in 1:k){
kdat[, paste0("D", j)] = kdist(kdat$x,kdat$y, centers[j,1], centers[j,2])
}
working = kdat
for(i in 1:nrow(kdat)){
j = if(i %% k == 0) k else (i %% k)
itemloc =
working$index[which(working[,(paste0("D", j))] ==
min(working[,(paste0("D",j))]))[1]]
kdat$assigned[kdat$index == itemloc] = j
working %<>% filter(!index == itemloc)
}
#    for(i in 1:nrow(working)){
#      #these leftover points get assigned to whoever's closest, without regard to k
#      kdat$assigned[kdat$index ==
#                      working$index[i]] =
#        which(working[i,4:(3+k)] == min(working[i, 4:(3+k)]))
#    }
# remove records for dummies
kdat = kdat[!is.na(kdat$assigned0),]
# recalculate the centroids using k-means with k = 1.
centers <- kdat %>% filter(assigned == 1) %>%
select(x, y) %>%
kmeans(1) %$% centers
for(j in 2:k){
centers %<>% rbind(kdat %>%
filter(assigned == j) %>%
select(x, y) %>%
kmeans(1) %$% centers)
}
centers %<>% as.data.frame()
}
return(kdat$assigned)}
assignment = kmeansAdj(trial=test3,k=15)
kdat = trial %>% select(c(x, y))
kdat %>% kmeans(k) -> kclust
centers = as.data.frame(kclust$centers)
colnames(centers)<- c("x","y")
kdat$index = 1:nrow(kdat)
kdat$assigned0 = -9
kdat$assigned = 0
while(!setequal(kdat$assigned,  kdat$assigned0)){
kdat$assigned0=kdat$assigned
# calculate cluster size
clusterSize = ceiling(nrow(kdat)/k)
# dummy points at cluster centroids are added to achieve same numbers per cluster
ndummies = clusterSize * k - nrow(kdat)
dummies = data.frame(centers[1:ndummies,])
dummies$index =  as.vector(seq(1:ndummies) + nrow(kdat))
dummies$assigned = dummies$assigned0 = NA
kdat = rbind(kdat,dummies)
for(j in 1:k){
kdat[, paste0("D", j)] = kdist(kdat$x,kdat$y, centers[j,1], centers[j,2])
}
working = kdat
for(i in 1:nrow(kdat)){
j = if(i %% k == 0) k else (i %% k)
itemloc =
working$index[which(working[,(paste0("D", j))] ==
min(working[,(paste0("D",j))]))[1]]
kdat$assigned[kdat$index == itemloc] = j
working %<>% filter(!index == itemloc)
}
#    for(i in 1:nrow(working)){
#      #these leftover points get assigned to whoever's closest, without regard to k
#      kdat$assigned[kdat$index ==
#                      working$index[i]] =
#        which(working[i,4:(3+k)] == min(working[i, 4:(3+k)]))
#    }
# remove records for dummies
kdat = kdat[!is.na(kdat$assigned0),]
# recalculate the centroids using k-means with k = 1.
centers <- kdat %>% filter(assigned == 1) %>%
select(x, y) %>%
kmeans(1) %$% centers
for(j in 2:k){
centers %<>% rbind(kdat %>%
filter(assigned == j) %>%
select(x, y) %>%
kmeans(1) %$% centers)
}
centers %<>% as.data.frame()
}
kdat$assigned0=kdat$assigned
# calculate cluster size
clusterSize = ceiling(nrow(kdat)/k)
# dummy points at cluster centroids are added to achieve same numbers per cluster
ndummies = clusterSize * k - nrow(kdat)
dummies = data.frame(centers[1:ndummies,])
dummies$index =  as.vector(seq(1:ndummies) + nrow(kdat))
dummies$assigned = dummies$assigned0 = NA
kdat = rbind(kdat,dummies)
View(kdat)
kmeansAdj = function(trial, k){
kdat = trial %>% select(c(x, y))
kdat %>% kmeans(k) -> kclust
centers = as.data.frame(kclust$centers)
colnames(centers)<- c("x","y")
kdat$index = 1:nrow(kdat)
kdat$assigned0 = -9
kdat$assigned = 0
while(!setequal(kdat$assigned,  kdat$assigned0)){
kdat$assigned0=kdat$assigned
# calculate cluster size
clusterSize = ceiling(nrow(kdat)/k)
# dummy points at cluster centroids are added to achieve same numbers per cluster
ndummies = clusterSize * k - nrow(kdat)
dummies = data.frame(centers[1:ndummies,])
dummies$index =  as.vector(seq(1:ndummies) + nrow(kdat))
dummies$assigned = dummies$assigned0 = NA
for(j in 1:k){
dummies[, paste0("D", j)] = NA
}
kdat = rbind(kdat,dummies)
for(j in 1:k){
kdat[, paste0("D", j)] = kdist(kdat$x,kdat$y, centers[j,1], centers[j,2])
}
working = kdat
for(i in 1:nrow(kdat)){
j = if(i %% k == 0) k else (i %% k)
itemloc =
working$index[which(working[,(paste0("D", j))] ==
min(working[,(paste0("D",j))]))[1]]
kdat$assigned[kdat$index == itemloc] = j
working %<>% filter(!index == itemloc)
}
#    for(i in 1:nrow(working)){
#      #these leftover points get assigned to whoever's closest, without regard to k
#      kdat$assigned[kdat$index ==
#                      working$index[i]] =
#        which(working[i,4:(3+k)] == min(working[i, 4:(3+k)]))
#    }
# remove records for dummies
kdat = kdat[!is.na(kdat$assigned0),]
# recalculate the centroids using k-means with k = 1.
centers <- kdat %>% filter(assigned == 1) %>%
select(x, y) %>%
kmeans(1) %$% centers
for(j in 2:k){
centers %<>% rbind(kdat %>%
filter(assigned == j) %>%
select(x, y) %>%
kmeans(1) %$% centers)
}
centers %<>% as.data.frame()
}
return(kdat$assigned)}
assignment = kmeansAdj(trial=test3,k=15)
test1 = read.csv(file='../data-raw/Solarmal_baseline.csv')
test2  = Convert_LatLong(df=test1)
test2$num=test2$RDT_test_result
test2=with(test2,test2[,c('x','y','num')])
test1 = read.csv(file='../data-raw/Solarmal_baseline.csv')
test1 = read.csv(file='../data-raw/Solarmal_baseline.csv')
test1 = read.csv(file='../data-raw/Solarmal_baseline.csv')
library(CRTspillover)
library(CRTspillover)
library(CRTspillover)
library(CRTspillover)
library(CRTspillover)
library(CRTspillover)
devtools::load_all(".")
library(CRTspillover)
devtools::document()
#to create test results for Analyse_CRT():
set.seed(1234)
test_Analyse_CRT=Analyse_CRT(trial=test_Simulate_CRT,method='GEE',
requireBootstrap=FALSE,
alpha=0.2)
save(test_Analyse_CRT,file='data/test_Analyse_CRT.RData')
library(CRTspillover)
library(CRTspillover)
library(CRTspillover)
library(CRTspillover)
library(CRTspillover)
test1 = read.csv(file=system.file("extdata", "Solarmal_baseline.csv",
package = "CRTspillover", mustWork = TRUE))
test2  = Convert_LatLong(df=test1)
# Aggregate data for multiple observations for the same location
# Only the (x,y) co-ordinates and numerical auxiliary variables
#
test2$base_num = test2$RDT_test_result
test2=with(test2,test2[,c('x','y','base_num')])
test2$base_denom = 1
test3 = Aggregate_CRT(trial=test2,auxiliaries=c('base_num','base_denom'))
View(test3)
test3$x = round(test3$x,digits=1)
test3$y = round(test3$y,digits=1)
test2$x = round(test2$x,digits=1)
test2$y = round(test2$y,digits=1)
test3 = Aggregate_CRT(trial=test2,auxiliaries=c('base_num','base_denom'))
minx = min(test3$x)
maxx = max(test3$x)
miny = min(test3$y)
maxy = max(test3$y)
test2$x = round(test2$x,digits=1)
test2$y = round(test2$y,digits=1)
test3 = Aggregate_CRT(trial=test2,auxiliaries=c('base_num','base_denom'))
minx = min(test3$x)
maxx = max(test3$x)
miny = min(test3$y)
maxy = max(test3$y)
nrows = 10*(maxy - miny) + 1
ncols = 10*(maxx - minx) + 1
Z = matrix(data=NA,nrow=nrows,ncol=ncols)
Z = matrix(data=NA,nrow=nrows,ncol=ncols)
for (row in 1:nrow(test3)) {
z1 = 10*(test3$x - minx) + 1
z2 = 10*(test3$y - miny) + 1
Z[z1,z2] = 1
}
View(Z)
for (row in 1:nrow(test3)) {
z1 = 10*(test3$x[row] - minx) + 1
z2 = 10*(test3$y[row] - miny) + 1
Z[z1,z2] = 1
}
z1 = 10*(test3$x - minx) + 1
summary(z1)
for (row in 1:nrow(test3)) {
z1 = 10*(test3$x[row] - minx) + 1
z2 = 10*(test3$y[row] - miny) + 1
Z[z2,z1] = 1
}
X = seq(1:118)
Y = seq(1:74)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
library(ggplot2)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
X = matrix(data=seq(minx:maxx),nrow=nrows,ncol=ncols)
X = matrix(data=seq((10*minx):(10*maxx))/10,nrow=nrows,ncol=ncols)
X
y = matrix(data=seq((10*miny):(10*maxy))/10,nrow=nrows,ncol=ncols)
Y = matrix(data=seq((10*miny):(10*maxy))/10,nrow=nrows,ncol=ncols)
X = matrix(data=seq((10*minx):(10*maxx))/10,nrow=nrows,ncol=ncols)
Y = matrix(data=seq((10*miny):(10*maxy))/10,nrow=nrows,ncol=ncols)
X[2,]
X[,2]
X = matrix(data=seq((10*minx):(10*maxx))/10,nrow=nrows,ncol=ncols,byrow=TRUE)
X[,2]
X[2,]
Y = matrix(data=seq((10*miny):(10*maxy))/10,nrow=nrows,ncol=ncols)
Y[2,]
for (row in 1:nrow(test3)) {
z1 = 10*(test3$x[row] - minx) + 1
z2 = 10*(test3$y[row] - miny) + 1
Z[z2,z1] = 1
}
data=data.frame(X=as.vector(X),Y=as.vector(Y),Z=as.vector(Z))
library(ggplot2)
ggplot( aes(X, Y, fill= Z)) +
geom_tile()
ggplot(data=data,aes(X, Y, fill= Z)) +
geom_tile()
test2$x = round(test2$x/2,digits=1)
test2$y = round(test2$y/2,digits=1)
test3 = Aggregate_CRT(trial=test2,auxiliaries=c('base_num','base_denom'))
minx = min(test3$x)
maxx = max(test3$x)
miny = min(test3$y)
maxy = max(test3$y)
nrows = 10*(maxy - miny) + 1
ncols = 10*(maxx - minx) + 1
Z = matrix(data=NA,nrow=nrows,ncol=ncols)
X = matrix(data=seq((10*minx):(10*maxx))/10,nrow=nrows,ncol=ncols,byrow=TRUE)
Y = matrix(data=seq((10*miny):(10*maxy))/10,nrow=nrows,ncol=ncols)
for (row in 1:nrow(test3)) {
z1 = 10*(test3$x[row] - minx) + 1
z2 = 10*(test3$y[row] - miny) + 1
Z[z2,z1] = 1
}
data=data.frame(X=as.vector(X),Y=as.vector(Y),Z=as.vector(Z))
library(ggplot2)
ggplot(data=data,aes(X, Y, fill= Z)) +
geom_tile()
ggplot(data=data,aes(X, Y, fill= Z)) +
geom_tile() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank())
ggplot(data=data,aes(X, Y, fill= Z)) + theme_bw() +
geom_tile() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank())
Z = matrix(data=0,nrow=nrows,ncol=ncols)
X = matrix(data=seq((10*minx):(10*maxx))/10,nrow=nrows,ncol=ncols,byrow=TRUE)
Y = matrix(data=seq((10*miny):(10*maxy))/10,nrow=nrows,ncol=ncols)
for (row in 1:nrow(test3)) {
z1 = 10*(test3$x[row] - minx) + 1
z2 = 10*(test3$y[row] - miny) + 1
Z[z2,z1] = 1
}
data=data.frame(X=as.vector(X),Y=as.vector(Y),Z=as.vector(Z))
library(ggplot2)
ggplot(data=data,aes(X, Y, fill= Z)) +
geom_tile() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank())
totalClusters=1
cpalette = sample(rainbow(totalClusters))
totalClusters=1
cpalette = sample(rainbow(totalClusters))
ggplot(data=data,aes(X, Y, fill= Z)) +
geom_tile() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank())
+ scale_fill_manual("",values=cpalette)
ggplot(data=data,aes(X, Y, fill= Z)) +
geom_tile() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank()
+ scale_fill_manual("",values=cpalette))
ggplot(data=data,aes(X, Y, fill= Z)) +
geom_tile() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank()) +
scale_fill_manual("",values=cpalette))
ggplot(data=data,aes(X, Y, fill= Z)) +
geom_tile() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_blank()) +
scale_fill_manual("",values=cpalette)
ggplot(data=data,aes(X, Y, fill= Z)) +
geom_tile() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_blank()) +
scale_fill_discrete("",values=cpalette)
ggplot(data=data,aes(X, Y, fill= Z)) +
geom_tile() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_blank()) +
scale_fill_discrete("")
ggplot(data=data,aes(X, Y, fill= factor(Z)) +
theme(panel.grid.major = element_blank(),
panel.background = element_blank(),
scale_fill_discrete("")
ggplot(data=data,aes(X, Y, fill= factor(Z)) +
geom_tile() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_blank()) +
scale_fill_discrete(""))
ggplot(data=data,aes(X, Y, fill= factor(Z)) +
geom_tile() +
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
ggplot(data=data,aes(X, Y, fill= factor(Z))) +
geom_tile() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_blank()) +
scale_fill_discrete("")
ggplot(data=data,aes(X, Y, fill= factor(Z))) +
geom_tile() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_blank()) +
scale_fill_discrete("",cpalette=cpalette)
cpalette
cpalette = c('white',sample(rainbow(totalClusters)))
ggplot(data=data,aes(X, Y, fill= factor(Z))) +
geom_tile() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_blank()) +
scale_fill_manual(values=cpalette)
ggplot(data=data,aes(X, Y, fill= factor(Z))) +
geom_tile() +
theme(legend.position="none") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_blank()) +
scale_fill_manual(values=cpalette)
test4 = DefineClusters(trial=test3, nclusters=10, algo='NN')
is.null(test3$cluster)
plotPixels = function(trial){
minx = min(trial$x)
maxx = max(trial$x)
miny = min(trial$y)
maxy = max(trial$y)
nrows = 10*(maxy - miny) + 1
ncols = 10*(maxx - minx) + 1
Z = matrix(data=0,nrow=nrows,ncol=ncols)
X = matrix(data=seq((10*minx):(10*maxx))/10,nrow=nrows,ncol=ncols,byrow=TRUE)
Y = matrix(data=seq((10*miny):(10*maxy))/10,nrow=nrows,ncol=ncols)
for (row in 1:nrow(trial)) {
z1 = 10*(trial$x[row] - minx) + 1
z2 = 10*(trial$y[row] - miny) + 1
Z[z2,z1] = ifelse(is.null(trial$cluster[row]),1,trial$cluster[row])
}
data=data.frame(X=as.vector(X),Y=as.vector(Y),Z=as.vector(Z))
library(ggplot2)
totalClusters=1
cpalette = c('white',sample(rainbow(totalClusters)))
ggplot(data=data,aes(X, Y, fill= factor(Z))) +
geom_tile() +
theme(legend.position="none") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_blank()) +
scale_fill_manual(values=cpalette)
}
plotPixels(test3)
plotPixels(test4)
nlevels(test4$cluster)
nlevels(as.factor(test4$cluster))
plotPixels = function(trial){
minx = min(trial$x)
maxx = max(trial$x)
miny = min(trial$y)
maxy = max(trial$y)
nrows = 10*(maxy - miny) + 1
ncols = 10*(maxx - minx) + 1
Z = matrix(data=0,nrow=nrows,ncol=ncols)
X = matrix(data=seq((10*minx):(10*maxx))/10,nrow=nrows,ncol=ncols,byrow=TRUE)
Y = matrix(data=seq((10*miny):(10*maxy))/10,nrow=nrows,ncol=ncols)
for (row in 1:nrow(trial)) {
z1 = 10*(trial$x[row] - minx) + 1
z2 = 10*(trial$y[row] - miny) + 1
Z[z2,z1] = ifelse(is.null(trial$cluster[row]),1,trial$cluster[row])
}
data=data.frame(X=as.vector(X),Y=as.vector(Y),Z=as.vector(Z))
library(ggplot2)
totalClusters= ifelse(is.null(trial$cluster),1,nlevels(as.factor(trial$cluster)))
cpalette = c('white',sample(rainbow(totalClusters)))
ggplot(data=data,aes(X, Y, fill= factor(Z))) +
geom_tile() +
theme(legend.position="none") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_blank()) +
scale_fill_manual(values=cpalette)
}
plotPixels(test3)
plotPixels(test4)
test5 = DefineClusters(trial=test3, nclusters=10, algo='TSP')
plotPixels(test5)
test6 = DefineClusters(trial=test3, nclusters=10, algo='kmeans')
plotPixels(test6)
test4 = DefineClusters(trial=test3, nclusters=10, algo='NN')
plotPixels(test4)
browseVignettes(package='CRTspillover')
browseVignettes(package='CRTSpillover')
browseVignettes(package='CRTspillover')
table(test4$cluster)
table(test5$cluster)
table(test6$cluster)
