formula <- stats::as.formula(paste(fterms, collapse = "+"))
if (link == "log") {
model_object <- geepack::geeglm(
formula = formula, id = cluster, data = trial, family = poisson(link = "log"),
corstr = "exchangeable", scale.fix = FALSE)
} else if (link == "cloglog") {
model_object <- geepack::geeglm(
formula = formula, id = cluster, data = trial, family = binomial(link = "cloglog"),
corstr = "exchangeable", scale.fix = FALSE)
} else if (link == "logit") {
model_object <- geepack::geeglm(
formula = formula, id = cluster, corstr = "exchangeable",
data = trial, family = binomial(link = "logit"))
} else if (link == "identity") {
model_object <- geepack::geeglm(
formula = formula, id = cluster, corstr = "exchangeable",
data = trial, family = gaussian)
}
model_object <- geepack::geeglm(
formula = formula, id = cluster, data = trial, family = binomial(link = "cloglog"),
corstr = "exchangeable", scale.fix = FALSE)
library(CRTspat)
analysisGEE <- CRTanalysis(trial=example10a, method = 'GEE', link='cloglog')
summary(analysisGEE)
plotCRT(analysisGEE)
analysisGEE <- CRTanalysis(trial=example10a, method = 'LME4', link='cloglog')
plotCRT(analysisGEE)
analysisINLA <- CRTanalysis(trial=example10a, method = 'INLA', link='cloglog')
plotCRT(analysisINLA)
analysisT <- CRTanalysis(trial=example10a, method = 'T', link='cloglog')
plotCRT(analysisT)
analysisP <- CRTanalysis(trial=example10a, method = 'LME4', cfunc= 'P', link='cloglog')
plotCRT(analysisP)
analysisHDEP <- CRTanalysis(trial=example10a, method = 'LME4', distance = 'hdep', link='cloglog')
plotCRT(analysisHDEP)
analysisHDEP <- CRTanalysis(trial=example10a, method = 'LME4', distance = 'kern', scalepar = 0.2, link='cloglog')
analysisHDEP <- CRTanalysis(trial=example10a, method = 'LME4', distance = 'kern', scalepar = 0.2, cfunc = 'R', link='cloglog')
analysisHDEP <- CRTanalysis(trial=example10a, method = 'LME4', distance = 'kern', scale_par = 0.2, cfunc = 'R', link='cloglog')
plotCRT(analysisHDEP)
analysiskern <- CRTanalysis(trial=example10a, method = 'LME4', distance = 'kern', scale_par = 0.2, cfunc = 'E', link='cloglog')
plotCRT(analysiskern)
summary(analysiskern)
analysiskern <- CRTanalysis(trial=example10a, method = 'LME4', distance = 'kern', cfunc = 'E', link='cloglog')
summary(analysiskern)
plotCRT(analysiskern)
library(CRTspat)
library(CRTspat)
exampleCRT <- readdata('exampleCRT.txt')
simulation <- simulateCRT(exampleCRT,
effect = 0.25,
ICC_inp = 0.05,
outcome0 = 0.5,
matchedPair = FALSE,
scale = 'proportion',
sd = 0.6,
tol = 0.05)
exampleCRT$trial$denom <- sample(x = seq(1:5), size= 1181, replacement = TRUE)
exampleCRT$trial$denom <- sample(x = seq(1:5), size= 1181, replace = TRUE)
summary(exampleCRT$trial$denom)
simulation <- simulateCRT(exampleCRT,
effect = 0.25,
ICC_inp = 0.05,
outcome0 = 0.5,
matchedPair = FALSE,
scale = 'count',
sd = 0.6,
tol = 0.05)
summary(simulation$trial$num)
head(simulation$trial)
scales <- c("continuous","count","proportion")
which('rabbit' %in% scales)
which('count' %in% scales)
which('proportion' %in% scales)
match('proportion' %in% scales)
which('proportion' == scales)
which('count' == scales)
map_scale_to_link <- function(scale) {
scales <- c("continuous","count","proportion")
links <- c("logit","log","identity")
link <-  links[which(scale == scales)]
return(link)}
map_scale_to_link('continuous')
map_scale_to_link <- function(scale) {
scales <- c("proportion", "count", "continuous")
links <- c("logit","log","identity")
link <-  links[which(scale == scales)]
return(link)}
map_scale_to_link('continuous')
map_scale_to_link('count')
map_scale_to_link('proportion')
library(CRTspat)
simulation <- simulateCRT(exampleCRT,
effect = 0.25,
ICC_inp = 0.05,
outcome0 = 0.5,
matchedPair = FALSE,
scale = 'count',
sd = 0.6,
tol = 0.05)
simulation <- simulateCRT(exampleCRT,
effect = 0.25,
ICC_inp = 0.05,
outcome0 = 0.5,
matchedPair = FALSE,
scale = 'continuous',
sd = 0.6,
tol = 0.05)
? gauss()
? rnorm()
rnorm(3, c(1,2,3),0.4)
rnorm(1, c(1,2,3),0.4)
rnorm(3, c(1,2,3),0.4)
library(CRTspat)
simulation <- simulateCRT(exampleCRT,
effect = 0.25,
ICC_inp = 0.05,
outcome0 = 0.5,
matchedPair = FALSE,
scale = 'continuous',
sd = 0.6,
tol = 0.05)
head(simulation$trial)
with(simulation$trial,plot(num,denom))
with(simulation$trial,cor(num,denom))
CRTanalysis(simulation,method='GEE')
CRTanalysis(simulation,method='GEE',link='identity')
CRTanalysis(simulation,method='GEE',link='identity')
junk <- CRTanalysis(simulation,method='GEE',link='identity')
summary(junk)
simulation <- simulateCRT(exampleCRT,
effect = 0.25,
ICC_inp = 0.05,
outcome0 = 0.5,
matchedPair = FALSE,
scale = 'continuous',
sd = 0.6,
tol = 0.05)
junk <- CRTanalysis(simulation,method='GEE',link='identity')
summary(junk)
plotCRT(junk)
plotCRT(junk)
library(CRTspat)
junk <- CRTanalysis(simulation,method='GEE',link='identity')
plotCRT(junk)
devtools::document()
plotCRT(simulation)
{example <- readdata('exampleCRT.txt')
#Plot of data by distance
plotCRT(example)
#Map of locations only
plotCRT(example, map = TRUE, fill = 'none', showLocations = TRUE,
showClusterBoundaries=FALSE, maskbuffer=0.2)
#show cluster boundaries and number clusters
tol = 0.05)}
example <- readdata('exampleCRT.txt')
plotCRT(example)
#Map of locations only
plotCRT(example, map = TRUE, fill = 'none', showLocations = TRUE,
showClusterBoundaries=FALSE, maskbuffer=0.2)
#show cluster boundaries and number clusters
plotCRT(example, map = TRUE, fill ='none', showClusterBoundaries=TRUE,
showClusterLabels=TRUE, maskbuffer=0.2, labelsize = 2)
#show clusters in colour
plotCRT(example, map = TRUE, fill = 'clusters', showClusterLabels = TRUE,
labelsize=2, maskbuffer=0.2)
#show arms
plotCRT(example, map = TRUE,
fill = 'arms', maskbuffer=0.2, legend.position=c(0.8,0.8))
#contamination plot
analysis <- CRTanalysis(example)
plotCRT(analysis, map = FALSE)
View(analysis)
plotCRT(analysis, map = FALSE)
library(CRTspat)
plotCRT(analysis, map = FALSE)
plotCRT(analysis, map = FALSE)
plotCRT(analysis, map = FALSE)
plotCRT(analysis, map = FALSE)
plotCRT(analysis, map = FALSE)
data
library(CRTspat)
plotCRT(analysis, map = FALSE)
plotCRT(example, map = FALSE)
plotCRT(simulation, map = FALSE)
plotCRT(simulation, map = FALSE)
data <- group_data(analysis = analysis, distance = distance, grouping = "equalwidth")
data
library(CRTspat)
plotCRT(simulation, map = FALSE)
? dplyr::summarize()
plotCRT(simulation, map = FALSE)
library(CRTspat)
library(CRTspat)
plotCRT(simulation, map = FALSE)
plotCRT(simulation, map = FALSE)
ggplot2::ggplot(data = data, aes(x = dcat)) +
ggplot2::theme_bw() + ggplot2::geom_bar(y = locations, stat = "identity")
ggplot2::ggplot(data = data, aes(x = dcat)) +
ggplot2::theme_bw() + ggplot2::geom_bar(aes(y = locations), stat = "identity")
ggplot2::ggplot(data = data) +
ggplot2::theme_bw() + ggplot2::geom_bar(aes(x = dcat, y = locations), stat = "identity")
ggplot2::ggplot(data = data) +
ggplot2::theme_bw() + ggplot2::geom_bar(aes(x = dcat, y = locations), stat = "identity")
ggplot2::ggplot(data = data, aes(x = dcat, y = locations)) +
ggplot2::theme_bw() + ggplot2::geom_bar(stat = "identity")
ggplot2::ggplot(data = data, aes(x = dcat, y = locations)) +
ggplot2::theme_bw() + ggplot2::geom_bar(x = dcat, stat = "identity")
ggplot2::ggplot(data = data) +
ggplot2::theme_bw() + ggplot2::geom_bar(aes(x = cat, y = locations), stat = "identity")
data$negatives <- with(data, total - positives)
data$dcat <- with(analysis, min(trial[[distance]]) +
(data$cat - 0.5) * (max(trial[[distance]]) - min(trial[[distance]]))/10)
data <- tidyr::gather(data[, c("dcat", "negatives",
"positives")], outcome, frequency, positives:negatives, factor_key = TRUE)
data
data <- tidyr::gather(data[, c("dcat", "locations", "total",
"positives")], outcome, frequency, positives:negatives, factor_key = TRUE)
data <- tidyr::gather(data[, c("dcat", "locations", "total",
"positives")], outcome, frequency, factor_key = TRUE)
data <- tidyr::gather(data[, c("dcat", "locations", "total",
"positives")], frequency, factor_key = TRUE)
data <- tidyr::gather(data[, c("dcat", "locations", "total",
"positives")], factor_key = TRUE)
data
data
data <- group_data(analysis = analysis, distance = distance, grouping = "equalwidth")
data$dcat <- with(analysis, min(trial[[distance]]) +
(data$cat - 0.5) * (max(trial[[distance]]) - min(trial[[distance]]))/10)
data <- tidyr::gather(data[, c("dcat", "locations", "total",
"positives")], factor_key = TRUE)
data
data <- group_data(analysis = analysis, distance = distance, grouping = "equalwidth")
data$negatives <- with(data, total - positives)
data$dcat <- with(analysis, min(trial[[distance]]) +
(data$cat - 0.5) * (max(trial[[distance]]) - min(trial[[distance]]))/10)
data <- tidyr::gather(data[, c("dcat", "locations", "total",
"positives")], key = "dcat", factor_key = TRUE)
data
data <- group_data(analysis = analysis, distance = distance, grouping = "equalwidth")
data$negatives <- with(data, total - positives)
data$dcat <- with(analysis, min(trial[[distance]]) +
(data$cat - 0.5) * (max(trial[[distance]]) - min(trial[[distance]]))/10)
data <- tidyr::gather(data[, c(-"dcat", "locations", "total",
"positives")], factor_key = TRUE)
data <- tidyr::gather(data[, c("dcat", "locations", "total",
"positives")], factor_key = TRUE, -dcat)
data <- tidyr::gather(data[, c("dcat", "locations", "total",
"positives")], factor_key = TRUE, -"dcat")
data <- tidyr::gather(data[, c("dcat", "locations", "total",
"positives")], -dcat)
data <- tidyr::gather(data[, c("dcat", "locations", "total",
"positives")], key = 'variable', -dcat)
data <- tidyr::gather(data[, c("dcat", "locations", "total",
"positives")], key = 'variable', value = 'value' -dcat)
data <- tidyr::gather(data[, c("dcat", "locations", "total",
"positives")], key = 'variable', value = 'value', -dcat)
data
ggplot2::ggplot(data = data) +
ggplot2::theme_bw() + ggplot2::geom_bar(aes(x = cat, y = value), stat = "identity")
ggplot2::ggplot(data = data) +
ggplot2::theme_bw() + ggplot2::geom_bar(aes(x = dcat, y = value), stat = "identity")
g1 <- ggplot2::ggplot(data = data[data$variable == "locations"]) +
ggplot2::theme_bw() + ggplot2::geom_bar(aes(x = dcat, y = value), stat = "identity")
g1 <- ggplot2::ggplot(data = data[data$variable == "locations"]) +
ggplot2::theme_bw() + ggplot2::geom_bar(aes(x = dcat, y = value), stat = "identity")
g2 <- ggplot2::ggplot(data = data[data$variable == "positives"]) +
ggplot2::theme_bw() + ggplot2::geom_bar(aes(x = dcat, y = value), stat = "identity")
g3 <- ggplot2::ggplot(data = data[data$variable == "total"]) +
ggplot2::theme_bw() + ggplot2::geom_bar(aes(x = dcat, y = value), stat = "identity")
g <- g1 + g2 + g3 + ggplot2::plot_layout(ncol = 1)
if (isa(object, what = 'CRTanalysis')) {
# if the object is the output from analysisCRT
analysis <- object
if (is.null(analysis$contamination$FittedCurve))
stop("*** No fitted curve available ***")
d <- average <- upper <- lower <- contaminationFunction <- NULL
interval <- analysis$contamination$contamination_limits
range <- max(analysis$trial[[distance]]) - min(analysis$trial[[distance]])
data <- group_data(analysis = analysis, grouping = "quintiles")
FittedCurve <- analysis$contamination$FittedCurve
g <- ggplot2::ggplot() + ggplot2::theme_bw()
g <- g + ggplot2::geom_line(data = FittedCurve[!is.na(FittedCurve$control_curve), ],
ggplot2::aes(x = d, y = control_curve), linewidth = 2, colour = "#b2df8a")
g <- g + ggplot2::geom_line(data = FittedCurve[!is.na(FittedCurve$intervention_curve), ],
ggplot2::aes(x = d, y = intervention_curve), linewidth = 2, colour = "#0072A7")
g <- g + ggplot2::geom_point(data = data, ggplot2::aes(x = d, y = average,
shape=factor(arm)), size = 2)
g <- g + ggplot2::scale_shape_manual(name = "Arms", values = c(0, 16),
labels = c("Control", "Intervention"))
g <- g + ggplot2::theme(legend.position = legend.position)
g <- g + ggplot2::geom_errorbar(data = data, mapping = ggplot2::aes(x = d, ymin = upper,
ymax = lower), linewidth = 0.5, width = range/50)
if (identical(analysis$options$distance, "nearestDiscord")) {
g <- g + ggplot2::geom_vline(xintercept = 0, linewidth = 1, linetype = "dashed")
if (analysis$options$cfunc %in% c("L","P","S")) {
g <- g + ggplot2::geom_vline(xintercept = interval, linewidth = 1)
g <- g + ggplot2::geom_rect(data = NULL, ggplot2::aes(xmin = interval[1], xmax = interval[2],
ymin = -Inf, ymax = Inf), fill = alpha("#2C77BF", 0.2))
}
}
g <- g + ggplot2::xlab(distanceText)
g <- g + ggplot2::ylab("Outcome")
} else {
if (is.null(object$trial[[distance]])) {
stop(paste0("*** First use compute_distance() to calculate ", distance, "***"))
}
# Plot of frequency by distance
if (is.null(cpalette)) cpalette <- c("#D55E00", "#0072A7")
outcome <- positives <- negatives <- frequency <- dcat <- NULL
if (is.null(object$trial$num)) {
return(plot(object$trial))
}
analysis <- CRTanalysis(trial = object$trial, method = "EMP")
data <- group_data(analysis = analysis, distance = distance, grouping = "equalwidth")
data$negatives <- with(data, total - positives)
data$dcat <- with(analysis, min(trial[[distance]]) +
(data$cat - 0.5) * (max(trial[[distance]]) - min(trial[[distance]]))/10)
data <- tidyr::gather(data[, c("dcat", "locations", "total",
"positives")], outcome, frequency, positives:negatives, factor_key = TRUE)
g <- ggplot2::ggplot(data = data, aes(x = dcat, y = frequency, fill = outcome)) +
ggplot2::theme_bw() + ggplot2::geom_bar(stat = "identity") +
ggplot2::scale_fill_manual(values = cpalette, labels = c("Positive",
"Negative")) + ggplot2::geom_vline(xintercept = 0, linewidth = 1,
linetype = "dashed") + ggplot2::xlab(distanceText) +
ggplot2::ylab("Frequency") + ggplot2::theme(legend.position = legend.position)
data <- tidyr::gather(data[, c("dcat", "locations", "total",
"positives")], key = 'variable', value = 'value', -dcat)
g1 <- ggplot2::ggplot(data = data[data$variable == "locations"]) +
ggplot2::theme_bw() + ggplot2::geom_bar(aes(x = dcat, y = value), stat = "identity")
g2 <- ggplot2::ggplot(data = data[data$variable == "positives"]) +
ggplot2::theme_bw() + ggplot2::geom_bar(aes(x = dcat, y = value), stat = "identity")
g3 <- ggplot2::ggplot(data = data[data$variable == "total"]) +
ggplot2::theme_bw() + ggplot2::geom_bar(aes(x = dcat, y = value), stat = "identity")
g <- g1 + g2 + g3 + ggplot2::plot_layout(ncol = 1)
}
data <- group_data(analysis = analysis, distance = distance, grouping = "equalwidth")
data$negatives <- with(data, total - positives)
data$dcat <- with(analysis, min(trial[[distance]]) +
(data$cat - 0.5) * (max(trial[[distance]]) - min(trial[[distance]]))/10)
data <- tidyr::gather(data[, c("dcat", "locations", "total",
"positives")], key = 'variable', value = 'value', -dcat)
g1 <- ggplot2::ggplot(data = data[data$variable == "locations"]) +
ggplot2::theme_bw() + ggplot2::geom_bar(aes(x = dcat, y = value), stat = "identity")
g1 <- ggplot2::ggplot(data = data[data$variable == "locations",]) +
ggplot2::theme_bw() + ggplot2::geom_bar(aes(x = dcat, y = value), stat = "identity")
g2 <- ggplot2::ggplot(data = data[data$variable == "positives",]) +
ggplot2::theme_bw() + ggplot2::geom_bar(aes(x = dcat, y = value), stat = "identity")
g3 <- ggplot2::ggplot(data = data[data$variable == "total",]) +
ggplot2::theme_bw() + ggplot2::geom_bar(aes(x = dcat, y = value), stat = "identity")
g <- g1 + g2 + g3 + ggplot2::plot_layout(ncol = 1)
g
g1
g2
g32
g3
g1 + g2
g <- ggplot2::ggplot(data = data) +
ggplot2::theme_bw() + ggplot2::geom_bar(aes(x = dcat, y = value), stat = "identity") +
facet_wrap( ~ variable, ncol = 1)
g
ggplot2::ggplot(data = data) +
ggplot2::theme_bw() + ggplot2::geom_bar(aes(x = dcat, y = value), stat = "identity") +
facet_wrap( ~ variable, ncol = 1, scales = "free")
ggplot2::ggplot(data = data) +
ggplot2::theme_bw() + ggplot2::geom_bar(aes(x = dcat, y = value), stat = "identity") +
ggplot2::geom_vline(xintercept = 0, linewidth = 1, linetype = "dashed") +
ggplot2::xlab(distanceText) +
facet_wrap( ~ variable, ncol = 1, scales = "free")
plotCRT(simulation, map = FALSE)
library(CRTspat)
library(CRTspat)
plotCRT(simulation, map = FALSE)
library(CRTspat)
library(CRTspat)
plotCRT(simulation, map = FALSE)
#map levels of variable to c("locations", "denominators", "numerators")
g <- ggplot2::ggplot(data = data) +
ggplot2::theme_bw() + ggplot2::geom_bar(aes(x = dcat, y = value), stat = "identity") +
ggplot2::geom_vline(xintercept = 0, linewidth = 1, linetype = "dashed") +
ggplot2::xlab(distanceText) +
ggplot2::ylab("Frequency") +
facet_wrap( ~ variable, ncol = 1, scales = "free")
g
#map levels of variable to c("locations", "denominators", "numerators")
g <- ggplot2::ggplot(data = data) +
ggplot2::theme_bw() +
ggplot2::geom_bar(aes(x = dcat, y = value), colour = "lightgrey", stat = "identity") +
ggplot2::geom_vline(xintercept = 0, linewidth = 1, linetype = "dashed") +
ggplot2::xlab(distanceText) +
ggplot2::ylab("Frequency") +
facet_wrap( ~ variable, ncol = 1, scales = "free")
g
#map levels of variable to c("locations", "denominators", "numerators")
g <- ggplot2::ggplot(data = data) +
ggplot2::theme_bw() +
ggplot2::geom_bar(aes(x = dcat, y = value), colour = "red", stat = "identity") +
ggplot2::geom_vline(xintercept = 0, linewidth = 1, linetype = "dashed") +
ggplot2::xlab(distanceText) +
ggplot2::ylab("Frequency") +
facet_wrap( ~ variable, ncol = 1, scales = "free")
g
#map levels of variable to c("locations", "denominators", "numerators")
g <- ggplot2::ggplot(data = data) +
ggplot2::theme_bw() +
ggplot2::geom_bar(aes(x = dcat, y = value), colour = "none", fill = "lightgrey", stat = "identity") +
ggplot2::geom_vline(xintercept = 0, linewidth = 1, linetype = "dashed") +
ggplot2::xlab(distanceText) +
ggplot2::ylab("Frequency") +
facet_wrap( ~ variable, ncol = 1, scales = "free")
g
#map levels of variable to c("locations", "denominators", "numerators")
g <- ggplot2::ggplot(data = data) +
ggplot2::theme_bw() +
ggplot2::geom_bar(aes(x = dcat, y = value), colour = NULL, fill = "lightgrey", stat = "identity") +
ggplot2::geom_vline(xintercept = 0, linewidth = 1, linetype = "dashed") +
ggplot2::xlab(distanceText) +
ggplot2::ylab("Frequency") +
facet_wrap( ~ variable, ncol = 1, scales = "free")
g
#map levels of variable to c("locations", "denominators", "numerators")
g <- ggplot2::ggplot(data = data) +
ggplot2::theme_bw() +
ggplot2::geom_bar(aes(x = dcat, y = value), colour = NA, fill = "lightgrey", stat = "identity") +
ggplot2::geom_vline(xintercept = 0, linewidth = 1, linetype = "dashed") +
ggplot2::xlab(distanceText) +
ggplot2::ylab("Frequency") +
facet_wrap( ~ variable, ncol = 1, scales = "free")
g
is.null(object$design$scale)
levels(data$variable) <- c("Locations", "Sum of denominators", "Sum of numerators")
g <- ggplot2::ggplot(data = data) +
ggplot2::theme_bw() +
ggplot2::geom_bar(aes(x = dcat, y = value), colour = NA, fill = "lightgrey", stat = "identity") +
ggplot2::geom_vline(xintercept = 0, linewidth = 1, linetype = "dashed") +
ggplot2::xlab(distanceText) +
ggplot2::ylab("Frequency") +
facet_wrap( ~ variable, ncol = 1, scales = "free")
g
data
is.factor(data$variable)
? tidyr::gather
data <- group_data(analysis = analysis, distance = distance, grouping = "equalwidth")
data$dcat <- with(analysis, min(trial[[distance]]) +
(data$cat - 0.5) * (max(trial[[distance]]) - min(trial[[distance]]))/10)
data <- tidyr::gather(data[, c("dcat", "locations", "total",
"positives")], key = 'variable', value = 'value', -dcat, factor_key = TRUE)
levels(data$variable) <- c("Locations", "Sum of denominators", "Sum of numerators")
g <- ggplot2::ggplot(data = data) +
ggplot2::theme_bw() +
ggplot2::geom_bar(aes(x = dcat, y = value), colour = NA, fill = "lightgrey", stat = "identity") +
ggplot2::geom_vline(xintercept = 0, linewidth = 1, linetype = "dashed") +
ggplot2::xlab(distanceText) +
ggplot2::ylab("Frequency") +
facet_wrap( ~ variable, ncol = 1, scales = "free")
g
data
g <- ggplot2::ggplot(data = data) +
ggplot2::theme_bw() +
ggplot2::geom_bar(aes(x = dcat, y = value), colour = NA, fill = "lightgrey", stat = "identity") +
ggplot2::geom_vline(xintercept = 0, linewidth = 1, linetype = "dashed") +
ggplot2::xlab(distanceText) +
ggplot2::ylab(element_blank) +
facet_wrap( ~ variable, ncol = 1, scales = "free")
g
g <- ggplot2::ggplot(data = data) +
ggplot2::theme_bw() +
ggplot2::geom_bar(aes(x = dcat, y = value), colour = NA, fill = "lightgrey", stat = "identity") +
ggplot2::geom_vline(xintercept = 0, linewidth = 1, linetype = "dashed") +
ggplot2::xlab(distanceText) +
ggplot2::ylab(element_blank()) +
facet_wrap( ~ variable, ncol = 1, scales = "free")
g
summary(simulation)
library(CRTspat)
{example <- readdata('exampleCRT.txt')
#Plot of data by distance
plotCRT(example)
#Map of locations only
plotCRT(example, map = TRUE, fill = 'none', showLocations = TRUE,
showClusterBoundaries=FALSE, maskbuffer=0.2)
#show cluster boundaries and number clusters
plotCRT(example, map = TRUE, fill ='none', showClusterBoundaries=TRUE,
showClusterLabels=TRUE, maskbuffer=0.2, labelsize = 2)
#show clusters in colour
plotCRT(example, map = TRUE, fill = 'clusters', showClusterLabels = TRUE,
labelsize=2, maskbuffer=0.2)
#show arms
plotCRT(example, map = TRUE,
fill = 'arms', maskbuffer=0.2, legend.position=c(0.8,0.8))
#contamination plot
analysis <- CRTanalysis(example)
plotCRT(analysis, map = FALSE)
}
dplyr::n()
? dplyr::n()
library(CRTspat)
source("C:/git_repos/CRTspat/vignettes/runVignette.R")
# to build package website
usethis::use_pkgdown()
pkgdown::build_site()
plot_grid(ps1, ps2, ps3, ps4, labels = c('hdep', 'sdep', 'disc', 'kern'), label_size = 10, ncol = 2)
```r
```r
examples <- compute_distance(example, distance = "hdep")
ps1 <- plotCRT(examples, distance = "hdep", legend.position = c(0.6, 0.8))
ps2 <- plotCRT(examples, distance = "sdep")
examples <- compute_distance(examples, distance = "disc", scale_par = 0.5)
ps3 <- plotCRT(examples, distance = "disc")
examples <- compute_distance(examples, distance = "kern", scale_par = 0.5)
ps4 <- plotCRT(examples, distance = "kern")
plot_grid(ps1, ps2, ps3, ps4, labels = c('hdep', 'sdep', 'disc', 'kern'), label_size = 10, ncol = 2)
plotCRT(exampleCRT, map = FALSE)
