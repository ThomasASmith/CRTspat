#' @return R object corresponding to the text file
#' @export
readdata <- function(filename) {
extdata <- system.file("extdata",package = 'CRTspillover')
start <- tail(unlist(gregexpr('a', filename)), n=1)
extension <- substr(filename,start,length(filename))
robject  <- if (extension == '.txt') dget(file = paste0(extdata,'/',filename))
return(robject)
}
readdata('testBuffer.csv')
filename= 'testBuffer.csv'
extdata <- system.file("extdata",package = 'CRTspillover')
start <- tail(unlist(gregexpr('a', filename)), n=1)
? gregexpr
#' Read test dataset
#'
#' \code{readdata} reads a file from package library of .csv or .txt test datasets
#'
#' @param filename name of text file stored within the package
#' @return R object corresponding to the text file
#' @export
readdata <- function(filename) {
extdata <- system.file("extdata",package = 'CRTspillover')
start <- tail(unlist(gregexpr('.', filename)), n=1)
extension <- substr(filename,start,length(filename))
robject  <- if (extension == '.txt') dget(file = paste0(extdata,'/',filename))
return(robject)
}
readdata('testBuffer.csv')
extdata <- system.file("extdata",package = 'CRTspillover')
start <- tail(unlist(gregexpr('.', filename)), n=1)
extension <- substr(filename,start,length(filename))
? substr
extension <- substr(filename,start=start,stop=length(filename))
extension <- substr(x=filename,start=start,stop=length(filename))
stop <- length(filename)
extension <- substr(x=filename,start=start,stop=nchar(filename))
stop <- nchar(filename)
? gregexpr
start <- tail(unlist(gregexpr('.', as.text(filename))), n=1)
start <- tail(unlist(gregexpr('.', filename)), n=1)
start <- tail(unlist(gregexpr('v', filename)), n=1)
start <- tail(unlist(gregexpr('.', as.character(filename))), n=1)
grep('.', filename)
grep('txt', filename)
grepexpr('txt', filename)
gregexpr('txt', filename)
start <- tail(unlist(gregexpr('(.)', filename)), n=1)
start <- tail(unlist(gregexpr('(.)', filename)), n=1)
start <- tail(unlist(gregexpr('f', filename)), n=1)
start <- tail(unlist(gregexpr('.', eval(filename))), n=1)
start <- tail(unlist(gregexpr('.', eval(filename))), n=1)
eval(filename)
start <- tail(unlist(gregexpr('B', eval(filename))), n=1)
start <- tail(unlist(gregexpr('csv', eval(filename))), n=1)
start <- tail(unlist(gregexpr('.csv', eval(filename))), n=1)
start <- tail(unlist(gregexpr('.', eval(filename))), n=1)
start <- tail(unlist(gregexpr('.csv', eval(filename))), n=1)
start <- tail(unlist(gregexpr('.txt', eval(filename))), n=1)
grep('.txt', eval(filename))
grep('.csv', eval(filename))
is.null(grep('.csv', eval(filename)))
is.null(grep('.txt', eval(filename)))
is.na(grep('.txt', eval(filename)))
grep('.txt', eval(filename)) > 1)
grep('.txt', eval(filename)) > 1
grep('.csv', eval(filename)) > 1
grep('.csv', eval(filename))
fname <- eval(filename)
extdata <- system.file("extdata",package = 'CRTspillover')
start <- tail(unlist(gregexpr('.', fname)), n=1)
stop <- nchar(filename)
extension <- substr(x=filename,start=start,stop=nchar(fname))
gregexpr('.csv', fname)
unlist(gregexpr('.csv', fname)
)
#' Read test dataset
#'
#' \code{readdata} reads a file from package library of .csv or .txt test datasets
#'
#' @param filename name of text file stored within the package
#' @return R object corresponding to the text file
#' @export
readdata <- function(filename) {
fname <- eval(filename)
extdata <- system.file("extdata",package = 'CRTspillover')
if (unlist(gregexpr('.txt', fname)) > 0) dget(file = paste0(extdata,'/',fname))
if (unlist(gregexpr('.csv', fname)) > 0) read.csv(file = paste0(extdata,'/',fname))
return(robject)
}
readdata(filename=filename)
#' Read test dataset
#'
#' \code{readdata} reads a file from package library of .csv or .txt test datasets
#'
#' @param filename name of text file stored within the package
#' @return R object corresponding to the text file
#' @export
readdata <- function(filename) {
fname <- eval(filename)
extdata <- system.file("extdata",package = 'CRTspillover')
if (unlist(gregexpr('.txt', fname)) > 0) robject <- dget(file = paste0(extdata,'/',fname))
if (unlist(gregexpr('.csv', fname)) > 0) robject <- read.csv(file = paste0(extdata,'/',fname))
return(robject)
}
readdata(filename=filename)
Plot_Contamination(analysis = readdata('test_Analyse_CRT.txt'))
Plot_CRTmap(trial = readdata(test_CRT2.csv), showArms=FALSE,showClusterBoundaries=FALSE,
colourClusters=FALSE, maskbuffer=0.2)
Plot_CRTmap(trial = readdata('test_CRT2.csv'), showArms=FALSE,showClusterBoundaries=FALSE,
colourClusters=FALSE, maskbuffer=0.2)
Plot_CRTmap(trial=readdata('test_CRT2.csv'), showArms=FALSE, colourClusters=TRUE, labelsize=2, maskbuffer=0.2)
Plot_CRTmap(trial=readdata('test_CRT2.csv'), maskbuffer=0.2, legend.position=c(0.2,0.8))
example_simulated_CRT =  Simulate_CRT(trial=readdata('test_CRT2.csv'),
efficacy=0.25,
ICC_inp=0.05,
initialPrevalence=0.5,
matchedPair = TRUE,
sd=0.6,
tol=0.05)
#' @export
#'
#' @examples
#' example_simulated_CRT =  Simulate_CRT(trial=readdata('test_CRT2.csv'),
#'                                      efficacy=0.25,
#'                                      ICC_inp=0.05,
#'                                      initialPrevalence=0.5,
#'                                      matchedPair = TRUE,
#'                                      sd=0.6,
#'                                      tol=0.05)
Simulate_CRT <- function(trial = NULL, efficacy = 0, initialPrevalence = NULL,
generateBaseline = TRUE, matchedPair = TRUE, baselineNumerator = "base_num",
baselineDenominator = "base_denom", denominator = NULL,
ICC_inp = NULL, sd = NULL, theta_inp = NULL, tol = 1e-04) {
# Written by Tom Smith, July 2017. Adapted by Lea Multerer, September 2017
cat("\n=====================    SIMULATION OF CLUSTER RANDOMISED TRIAL    =================\n")
bw <- NULL
# set the denominator variable to be 'denom'
if(is.null(denominator)) denominator <- 'denom'
trial$denom <- trial[[denominator]]
if(denominator != 'denom') trial[[denominator]] <- NULL
# use contamination range if this is available
if (!is.null(theta_inp)) {
sd <- theta_inp/(sqrt(2) * qnorm(0.95))
}
if (is.null(sd)) {
print("Error: contamination range or s.d. of spatial kernel must be provided")
trial <- NULL
return(trial)
}
# trial needs to be ordered for GEE analyses (estimation of ICC)
trial <- trial[order(trial$cluster), ]
# For the smoothing step compute contributions to the relative
# effect size from other households as a function of distance to
# the other households
euclid <- distance_matrix(trial$x, trial$y)
# generate baseline data if required and exposure proxy if this is not provided
if (!"infectiousness_proxy" %in% colnames(trial) & baselineNumerator %in%
colnames(trial) & baselineDenominator %in% colnames(trial)) {
trial$infectiousness_proxy <- trial[[baselineNumerator]]/trial[[baselineDenominator]]
} else if ("infectiousness_proxy" %in% colnames(trial)) {
# create a baseline dataset using a pre-existing exposure
# proxy
trial <- syntheticBaseline(bw = NULL, trial = trial, sd = sd, euclid = euclid,
initialPrevalence = initialPrevalence)
} else if (generateBaseline) {
# determine the required smoothing bandwidth by fitting to
# the pre-specified ICC
# compute approximate diagonal of clusters
approx_diag <- sqrt((max(trial$x) - min(trial$x))^2 + (max(trial$y) -
min(trial$y))^2)/sqrt(length(unique(trial$cluster)))
cat("Estimating the smoothing required to achieve the target ICC of",
ICC_inp, "\n")
loss <- 999
while (loss > tol) {
ICC.loss <- OOR::StoSOO(par = NA, fn = ICCdeviation, lower = -5,
upper = 5, nb_iter = 20, trial = trial, ICC_inp = ICC_inp,
approx_diag = approx_diag, sd = sd, euclid = euclid, efficacy = efficacy,
initialPrevalence = initialPrevalence)
loss <- ICC.loss$value
}
logbw <- ICC.loss$par
# overprint the output that was recording progress
cat("\r                                                         \n")
# set the seed so that the same result is obtained for a
# specific bandwidth
bw <- exp(logbw)
set.seed(round(bw * 1e+06))
# create a baseline dataset using the optimized bandwidth
trial <- syntheticBaseline(bw = bw, trial = trial, sd = sd, euclid = euclid,
initialPrevalence = initialPrevalence)
}
trial <- assignPositives(trial = trial, euclid = euclid, sd = sd, efficacy = efficacy,
initialPrevalence = initialPrevalence, denominator = denominator)
return(trial)
}
View(trial)
trial=readdata('test_CRT2.csv')
View(trial)
trial$infectiousness_proxy <- NULL
example_simulated_CRT =  Simulate_CRT(trial=readdata('test_CRT2.csv'),
efficacy=0.25,
ICC_inp=0.05,
initialPrevalence=0.5,
matchedPair = TRUE,
sd=0.6,
tol=0.05)
View(trial)
View(test_Simulate_CRT)
View(trial)
library(CRTspillover)
trial$nearestDiscord = NULL
trial
head(trial)
trial <- trial[,c('x','y','cluster','arm','buffer','base_denom','base_num')]
write.csv(trial,file = paste0(extdata,'/','testArms.csv'))
trial$arm <- NULL
write.csv(trial,file = paste0(extdata,'/','testClusters.csv'))
example_simulated_CRT =  Simulate_CRT(trial=trial,
efficacy=0.25,
ICC_inp=0.05,
initialPrevalence=0.5,
matchedPair = TRUE,
sd=0.6,
tol=0.05)
example_simulated_CRT =  Simulate_CRT(trial=trial,
efficacy=0.25,
ICC_inp=0.05,
initialPrevalence=0.5,
matchedPair = TRUE,
sd=0.6,
tol=0.05)
library(CRTspillover)
# For the smoothing step compute contributions to the relative
warnings()
library(CRTspillover)
example_simulated_CRT =  Simulate_CRT(trial=readdata('test_CRT2.csv'),
efficacy=0.25,
ICC_inp=0.05,
initialPrevalence=0.5,
matchedPair = TRUE,
sd=0.6,
tol=0.05)
example_simulated_CRT =  Simulate_CRT(trial=readdata('test_CRT2.csv'),
efficacy=0.25,
ICC_inp=0.05,
initialPrevalence=0.5,
matchedPair = TRUE,
sd=0.6,
tol=0.05)
example_simulated_CRT =  Simulate_CRT(trial=readdata('test_CRT2.csv'),
efficacy=0.25,
ICC_inp=0.05,
initialPrevalence=0.5,
matchedPair = TRUE,
sd=0.6,
tol=0.05)
trial=readdata('test_CRT2.csv')
trial <- trial[,c('x','y','cluster','arm','buffer','base_denom','base_num')]
example_simulated_CRT =  Simulate_CRT(trial=trial,
efficacy=0.25,
ICC_inp=0.05,
initialPrevalence=0.5,
matchedPair = TRUE,
sd=0.6,
tol=0.05)
library(CRTspillover)
example_simulated_CRT =  Simulate_CRT(trial=trial,
efficacy=0.25,
ICC_inp=0.05,
initialPrevalence=0.5,
matchedPair = TRUE,
sd=0.6,
tol=0.05)
example_simulated_CRT =  Simulate_CRT(trial=trial,
efficacy=0.25,
ICC_inp=0.05,
initialPrevalence=0.5,
matchedPair = TRUE,
sd=0.6,
tol=0.05)
example_simulated_CRT =  Simulate_CRT(trial=trial,
efficacy=0.25,
ICC_inp=0.05,
initialPrevalence=0.5,
matchedPair = TRUE,
sd=0.6,
tol=0.05)
head(trial)
summary(trial$base_num/trial$base_denom)
efficacy=0.25
ICC_inp=0.05
initialPrevalence=0.5
matchedPair = TRUE
sd=0.6
tol=0.05
generateBaseline = TRUE
baselineNumerator = "base_num"
baselineDenominator = "base_denom"
denominator = NULL
theta_inp = NULL
# Written by Tom Smith, July 2017. Adapted by Lea Multerer, September 2017
cat("\n=====================    SIMULATION OF CLUSTER RANDOMISED TRIAL    =================\n")
bw <- NULL
# set the denominator variable to be 'denom'
if(is.null(denominator)) denominator <- 'denom'
trial$denom <- trial[[denominator]]
if(denominator != 'denom') trial[[denominator]] <- NULL
# use contamination range if this is available
if (!is.null(theta_inp)) {
sd <- theta_inp/(sqrt(2) * qnorm(0.95))
}
if (is.null(sd)) {
print("Error: contamination range or s.d. of spatial kernel must be provided")
trial <- NULL
return(trial)
}
# trial needs to be ordered for GEE analyses (estimation of ICC)
trial <- trial[order(trial$cluster), ]
euclid <- distance_matrix(trial$x, trial$y)
devtools::load_all("C:/git_repos/CRTspillover")
# trial needs to be ordered for GEE analyses (estimation of ICC)
trial <- trial[order(trial$cluster), ]
euclid <- distance_matrix(trial$x, trial$y)
if (!"infectiousness_proxy" %in% colnames(trial) & baselineNumerator %in%
colnames(trial) & baselineDenominator %in% colnames(trial)) {
trial$infectiousness_proxy <- trial[[baselineNumerator]]/trial[[baselineDenominator]]
} else if ("infectiousness_proxy" %in% colnames(trial)) {
# create a baseline dataset using a pre-existing exposure
# proxy
trial <- syntheticBaseline(bw = NULL, trial = trial, sd = sd, euclid = euclid,
initialPrevalence = initialPrevalence)
} else if (generateBaseline) {
# determine the required smoothing bandwidth by fitting to
# the pre-specified ICC
# compute approximate diagonal of clusters
approx_diag <- sqrt((max(trial$x) - min(trial$x))^2 + (max(trial$y) -
min(trial$y))^2)/sqrt(length(unique(trial$cluster)))
cat("Estimating the smoothing required to achieve the target ICC of",
ICC_inp, "\n")
loss <- 999
while (loss > tol) {
ICC.loss <- OOR::StoSOO(par = NA, fn = ICCdeviation, lower = -5,
upper = 5, nb_iter = 20, trial = trial, ICC_inp = ICC_inp,
approx_diag = approx_diag, sd = sd, euclid = euclid, efficacy = efficacy,
initialPrevalence = initialPrevalence)
loss <- ICC.loss$value
}
logbw <- ICC.loss$par
# overprint the output that was recording progress
cat("\r                                                         \n")
# set the seed so that the same result is obtained for a
# specific bandwidth
bw <- exp(logbw)
set.seed(round(bw * 1e+06))
# create a baseline dataset using the optimized bandwidth
trial <- syntheticBaseline(bw = bw, trial = trial, sd = sd, euclid = euclid,
initialPrevalence = initialPrevalence)
}
trial <- assignPositives(trial = trial, euclid = euclid, sd = sd, efficacy = efficacy,
initialPrevalence = initialPrevalence, denominator = denominator)
if (sd > 0) {
smoothedIntervened <- gauss(sd, euclid) %*% (trial$infectiousness_proxy *
(1 - efficacy * (as.numeric(trial$arm) - 1)))
} else {
smoothedIntervened <- trial$infectiousness_proxy * (1 - efficacy *
(as.numeric(trial$arm) - 1))
}
sd
efficacy
smoothedIntervened
if (sd > 0) {
smoothedIntervened <- gauss(sd, euclid) %*% (trial$infectiousness_proxy *
(1 - efficacy * (as.numeric(trial$arm) - 1)))
} else {
smoothedIntervened <- trial$infectiousness_proxy * (1 - efficacy *
(as.numeric(trial$arm) - 1))
}
View(euclid)
table(as.numeric(trial$arm) - 1)
trial$arm <- as.factor(trial$arm)
trial$cluster <- as.factor(trial$cluster)
if (sd > 0) {
smoothedIntervened <- gauss(sd, euclid) %*% (trial$infectiousness_proxy *
(1 - efficacy * (as.numeric(trial$arm) - 1)))
} else {
smoothedIntervened <- trial$infectiousness_proxy * (1 - efficacy *
(as.numeric(trial$arm) - 1))
}
library(CRTspillover)
example_simulated_CRT =  Simulate_CRT(trial=trial,
efficacy=0.25,
ICC_inp=0.05,
initialPrevalence=0.5,
matchedPair = TRUE,
sd=0.6,
tol=0.05)
example_simulated_CRT =  Simulate_CRT(trial=readdata('test_CRT2.csv'),
efficacy=0.25,
ICC_inp=0.05,
initialPrevalence=0.5,
matchedPair = TRUE,
sd=0.6,
tol=0.05)
Analyse_CRT(trial = example_simulated_CRT)                                                                         tol=0.05)
Analyse_CRT(trial = example_simulated_CRT)
Analyse_CRT(trial = example_simulated_CRT,method='GEE')
Analyse_CRT(trial = example_simulated_CRT,method='GEE')
Analyse_CRT(trial = example_simulated_CRT,method='GEE')
trial=readdata('test_CRT2.csv')
? write.csv
write.csv(trial,file = paste0(extdata,'/','test_CRT2.csv',row.names = FALSE)
)
extdata <- system.file("extdata",package = 'CRTspillover')
write.csv(trial,file = paste0(extdata,'/','test_CRT2.csv',row.names = FALSE))
trial=readdata('testArms.csv')
trial$X = NULL
write.csv(trial,file = paste0(extdata,'/','testArms.csv',row.names = FALSE))
trial=readdata('testClusters.csv')
write.csv(trial,file = paste0(extdata,'/','testClusters.csv',row.names = FALSE))
trial=readdata('testClusters.csv')
trial$X = NULL
write.csv(trial,file = paste0(extdata,'/','testClusters.csv',row.names = FALSE))
trial=readdata('testClusters.csv')
trial$X = NULL
write.csv(trial,file = paste0(extdata,'/','testClusters.csv',row.names = FALSE))
trial=readdata('testClusters.csv')
? read.csv
#' Read test dataset
#'
#' \code{readdata} reads a file from package library of .csv or .txt test datasets
#'
#' @param filename name of text file stored within the package
#' @return R object corresponding to the text file
#' @export
readdata <- function(filename) {
fname <- eval(filename)
extdata <- system.file("extdata",package = 'CRTspillover')
if (unlist(gregexpr('.txt', fname)) > 0) robject <- dget(file = paste0(extdata,'/',fname))
if (unlist(gregexpr('.csv', fname)) > 0) robject <- read.csv(file = paste0(extdata,'/',fname),
row.names = FALSE)
return(robject)
}
trial=readdata('testClusters.csv')
remove(readdata)
example_simulated_CRT =  Simulate_CRT(trial=readdata('testArms.csv'),
efficacy=0.25,
ICC_inp=0.05,
initialPrevalence=0.5,
matchedPair = TRUE,
sd=0.6,
tol=0.05)
Analyse_CRT(trial = example_simulated_CRT,method='GEE')
library(CRTspillover)
? CRTspillover
exampletrial <- Specify_CRTbuffer(testArms, bufferWidth = 0.2)
head(exampletrial)
example_locations <- readdata('example_baseline.csv')
write.csv(Solarmal_baseline, file = 'inst/extdata/example_baseline.csv', row.names = FALSE)
getwd
getwd()
write.csv(Solarmal_baseline, file = 'example_baseline.csv', row.names = FALSE)
devtools::document()
library(CRTspillover)
R CMD build --resave-data
build --resave-data
library(CRTspillover)
Solarmal_baseline <- read.csv(file = paste0(extdata,"/Solarmal_baseline.csv"))
extdata <- system.file("extdata",package = 'CRTspillover')
Solarmal_baseline <- read.csv(file = paste0(extdata,"/Solarmal_baseline.csv"))
testLocationsxy <- Convert_LatLong(Solarmal_baseline) #test_site is simulated
testClusters <- DefineClusters(testLocationsxy,h = 50)
testArms <- Randomize_CRT(trial = testClusters,matchedPair = TRUE)
test_Simulate_CRT <- Simulate_CRT(trial = testArms,
theta_inp = 1.2,initialPrevalence = 0.4,
ICC_inp = 0.05,efficacy = 0.4,tol = 0.05)
test_Simulate_CRT$cluster <- as.numeric(test_Simulate_CRT$cluster)
test_Simulate_CRT$arm <- as.character(test_Simulate_CRT$arm)
rownames(test_Simulate_CRT) <- NULL
junk <- read.csv(file = paste0(extdata,"/test_Simulate_CRT.csv"))
View(junk)
View(test_Simulate_CRT)
View(junk)
View(junk)
test_Simulate_CRT$RDT_test_result <- NULL
rownames(test_Simulate_CRT) <- NULL
test_Simulate_CRT$X <- NULL
Plot_CRTmap(junk)
Plot_CRTmap(test_Simulate_CRT)
save(junk,file = 'test_Simulate_CRT1.csv')
write.csv(junk,file = 'test_Simulate_CRT1.csv',row.names = FALSE)
write.csv(test_Simulate_CRT,file = 'test_Simulate_CRT1.csv',row.names = FALSE)
test_Simulate_CRT
set.seed(1234)
test_Simulate_CRT <- get_test3(extdata)
get_test3 = function(extdata){
Solarmal_baseline <- read.csv(file = paste0(extdata,"/Solarmal_baseline.csv"))
testLocationsxy <- Convert_LatLong(Solarmal_baseline) #test_site is simulated
testClusters <- DefineClusters(testLocationsxy,h = 50)
testArms <- Randomize_CRT(trial = testClusters,matchedPair = TRUE)
test_Simulate_CRT <- Simulate_CRT(trial = testArms,
theta_inp = 1.2,initialPrevalence = 0.4,
ICC_inp = 0.05,efficacy = 0.4,tol = 0.05)
test_Simulate_CRT$cluster <- as.numeric(test_Simulate_CRT$cluster)
test_Simulate_CRT$arm <- as.character(test_Simulate_CRT$arm)
test_Simulate_CRT$RDT_test_result <- NULL
test_Simulate_CRT$X <- NULL
rownames(test_Simulate_CRT) <- NULL
return(test_Simulate_CRT)}
test_Simulate_CRT <- get_test3(extdata)
write.csv(test_Simulate_CRT,file = 'test_Simulate_CRT1.csv',row.names = FALSE)
library(CRTspillover)
