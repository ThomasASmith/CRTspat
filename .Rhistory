? CRTanalysis
devtools::document()
? CRTanalysis
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
devtools::document()
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
devtools::document()
? specify_clusters
? specify_clusters
devtools::document()
? specify_clusters
devtools::document()
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
library(CRTspat)
source("C:/git_repos/CRTspat/vignettes/runVignette.R")
devtools::document()
devtools::document()
# To write pdf manual
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
library(CRTspat)
devtools::document()
devtools::document()
? CRTanalysis
devtools::document()
? CRTanalysis
devtools::document()
devtools::document()
? CRTanalysis
# To write pdf manual
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
# To write pdf manual
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
devtools::document()
devtools::document()
devtools::document()
? CRTanalysis
devtools::document()
? CRTanalysis
devtools::document()
? CRTanalysis
devtools::document()
? CRTanalysis
? anonymize_site
devtools::document()
? anonymize_site
? anonymize_site
? coef.CRTanalysis
? compute_distance
? compute_mesh
devtools::document()
devtools::document()
source("C:/git_repos/CRTspat.Rcheck/CRTspat-Ex.R")
pkgname <- "CRTspat"
source(file.path(R.home("share"), "R", "examples-header.R"))
options(warn = 1)
options(pager = "console")
library('CRTspat')
base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
cleanEx()
nameEx("CRTanalysis")
flush(stderr()); flush(stdout())
{example <- readdata('exampleCRT.txt')
# Analysis of test dataset by t-test
exampleT <- CRTanalysis(example, method = "T")
summary(exampleT)
# Standard GEE analysis of test dataset ignoring contamination
exampleGEE <- CRTanalysis(example, method = "GEE")
summary(exampleGEE)
# LME4 analysis with error function contamination function
exampleLME4 <- CRTanalysis(example, method = "LME4", cfunc = "P")
summary(exampleLME4)
}
cleanEx()
nameEx("CRTpower")
flush(stderr()); flush(stdout())
{# Example without input geolocations
examplePower1 = CRTpower(locations = 3000, ICC=0.10, effect=0.4, alpha = 0.05,
outcome_type = 'd', desiredPower = 0.8, yC=0.35, k = 20, sd_h=5)
summary(examplePower1)
# Example with input geolocations and randomisation
examplePower2 = CRTpower(trial = readdata('example_site.csv'), desiredPower = 0.8,
effect=0.4, yC=0.35, outcome_type = 'd', ICC = 0.05, k = 20)
summary(examplePower2)
}
cleanEx()
nameEx("CRTsp")
flush(stderr()); flush(stdout())
{# Generate a simulated area with 10,000 locations
example_area = CRTsp(geoscale = 1, locations=10000, kappa=3, mu=40)
summary(example_area)
}
cleanEx()
nameEx("CRTwrite")
flush(stderr()); flush(stdout())
## No test:
tmpdir = tempdir()
dsn <- paste0(tmpdir,'/arms')
CRTwrite(readdata('exampleCRT.txt'), dsn = dsn, feature = 'arms',
driver = 'ESRI Shapefile', maskbuffer = 0.2)
cleanEx()
nameEx("aggregateCRT")
flush(stderr()); flush(stdout())
{
trial <- readdata('example_site.csv')
trial$base_denom <- 1
aggregated <- aggregateCRT(trial, auxiliaries = c("RDT_test_result","base_denom"))
}
cleanEx()
nameEx("anonymize_site")
flush(stderr()); flush(stdout())
#Rotate and reflect test site locations
transformedTestlocations <- anonymize_site(trial =  readdata("exampleCRT.txt"))
cleanEx()
nameEx("coef.CRTanalysis")
flush(stderr()); flush(stdout())
{example <- readdata('exampleCRT.txt')
exampleGEE <- CRTanalysis(example, method = "GEE")
coef(exampleGEE)
}
cleanEx()
nameEx("compute_distance")
flush(stderr()); flush(stdout())
#Calculate the disc with a radius of 0.5 km
{exampletrial <- compute_distance(trial = readdata('exampleCRT.txt'),
distance = 'disc', scale_par = 0.5)}
cleanEx()
nameEx("compute_mesh")
flush(stderr()); flush(stdout())
{
# low resolution mesh for test dataset
library(Matrix)
example <- readdata('exampleCRT.txt')
exampleMesh=compute_mesh(example, pixel = 0.5)
## No test:
# 50m mesh for analyses of test dataset using \code{distance = "nearestDiscord"}.
library(Matrix)
example <- readdata('exampleCRT.txt')
exampleMesh=compute_mesh(example, pixel = 0.05)
## End(No test)
}
summary(CRTsp(readdata('exampleCRT.txt')))
summary(CRTsp(readdata('exampleCRT.txt')))
### * <FOOTER>
###
cleanEx()
options(digits = 7L)
base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
grDevices::dev.off()
###
### Local variables: ***
### mode: outline-minor ***
### outline-regexp: "\\(> \\)?### [*]+" ***
### End: ***
quit('no')
pkgname <- "CRTspat"
source(file.path(R.home("share"), "R", "examples-header.R"))
options(warn = 1)
options(pager = "console")
library('CRTspat')
base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
cleanEx()
nameEx("CRTanalysis")
flush(stderr()); flush(stdout())
{example <- readdata('exampleCRT.txt')
# Analysis of test dataset by t-test
exampleT <- CRTanalysis(example, method = "T")
summary(exampleT)
# Standard GEE analysis of test dataset ignoring contamination
exampleGEE <- CRTanalysis(example, method = "GEE")
summary(exampleGEE)
# LME4 analysis with error function contamination function
exampleLME4 <- CRTanalysis(example, method = "LME4", cfunc = "P")
summary(exampleLME4)
}
cleanEx()
nameEx("CRTpower")
flush(stderr()); flush(stdout())
{# Example without input geolocations
examplePower1 = CRTpower(locations = 3000, ICC=0.10, effect=0.4, alpha = 0.05,
outcome_type = 'd', desiredPower = 0.8, yC=0.35, k = 20, sd_h=5)
summary(examplePower1)
# Example with input geolocations and randomisation
examplePower2 = CRTpower(trial = readdata('example_site.csv'), desiredPower = 0.8,
effect=0.4, yC=0.35, outcome_type = 'd', ICC = 0.05, k = 20)
summary(examplePower2)
}
cleanEx()
nameEx("CRTsp")
flush(stderr()); flush(stdout())
{# Generate a simulated area with 10,000 locations
example_area = CRTsp(geoscale = 1, locations=10000, kappa=3, mu=40)
summary(example_area)
}
cleanEx()
nameEx("CRTwrite")
flush(stderr()); flush(stdout())
## No test:
tmpdir = tempdir()
dsn <- paste0(tmpdir,'/arms')
CRTwrite(readdata('exampleCRT.txt'), dsn = dsn, feature = 'arms',
driver = 'ESRI Shapefile', maskbuffer = 0.2)
cleanEx()
nameEx("aggregateCRT")
flush(stderr()); flush(stdout())
{
trial <- readdata('example_site.csv')
trial$base_denom <- 1
aggregated <- aggregateCRT(trial, auxiliaries = c("RDT_test_result","base_denom"))
}
cleanEx()
nameEx("anonymize_site")
flush(stderr()); flush(stdout())
#Rotate and reflect test site locations
transformedTestlocations <- anonymize_site(trial =  readdata("exampleCRT.txt"))
cleanEx()
nameEx("coef.CRTanalysis")
flush(stderr()); flush(stdout())
{example <- readdata('exampleCRT.txt')
exampleGEE <- CRTanalysis(example, method = "GEE")
coef(exampleGEE)
}
cleanEx()
nameEx("compute_distance")
flush(stderr()); flush(stdout())
{
# Calculate the disc with a radius of 0.5 km
exampletrial <- compute_distance(trial = readdata('exampleCRT.txt'),
distance = 'disc', scale_par = 0.5)
}
cleanEx()
nameEx("compute_mesh")
flush(stderr()); flush(stdout())
{
# low resolution mesh for test dataset
library(Matrix)
example <- readdata('exampleCRT.txt')
exampleMesh=compute_mesh(example, pixel = 0.5)
## No test:
# 50m mesh for analyses of test dataset using \code{distance = "nearestDiscord"}.
library(Matrix)
example <- readdata('exampleCRT.txt')
exampleMesh=compute_mesh(example, pixel = 0.05)
## End(No test)
}
exampleMesh=compute_mesh(example, pixel = 0.5)
library(CRTspat)
library(CRTspat)
{
# low resolution mesh for test dataset
library(Matrix)
example <- readdata('exampleCRT.txt')
exampleMesh=compute_mesh(example, pixel = 0.5)
}
cleanEx()
pkgname <- "CRTspat"
source(file.path(R.home("share"), "R", "examples-header.R"))
options(warn = 1)
options(pager = "console")
library('CRTspat')
base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
cleanEx()
nameEx("CRTanalysis")
flush(stderr()); flush(stdout())
{example <- readdata('exampleCRT.txt')
# Analysis of test dataset by t-test
exampleT <- CRTanalysis(example, method = "T")
summary(exampleT)
# Standard GEE analysis of test dataset ignoring contamination
exampleGEE <- CRTanalysis(example, method = "GEE")
summary(exampleGEE)
# LME4 analysis with error function contamination function
exampleLME4 <- CRTanalysis(example, method = "LME4", cfunc = "P")
summary(exampleLME4)
}
cleanEx()
nameEx("CRTpower")
flush(stderr()); flush(stdout())
{# Example without input geolocations
examplePower1 = CRTpower(locations = 3000, ICC=0.10, effect=0.4, alpha = 0.05,
outcome_type = 'd', desiredPower = 0.8, yC=0.35, k = 20, sd_h=5)
summary(examplePower1)
# Example with input geolocations and randomisation
examplePower2 = CRTpower(trial = readdata('example_site.csv'), desiredPower = 0.8,
effect=0.4, yC=0.35, outcome_type = 'd', ICC = 0.05, k = 20)
summary(examplePower2)
}
cleanEx()
nameEx("CRTsp")
flush(stderr()); flush(stdout())
{# Generate a simulated area with 10,000 locations
example_area = CRTsp(geoscale = 1, locations=10000, kappa=3, mu=40)
summary(example_area)
}
cleanEx()
nameEx("CRTwrite")
flush(stderr()); flush(stdout())
## No test:
tmpdir = tempdir()
dsn <- paste0(tmpdir,'/arms')
CRTwrite(readdata('exampleCRT.txt'), dsn = dsn, feature = 'arms',
driver = 'ESRI Shapefile', maskbuffer = 0.2)
cleanEx()
nameEx("aggregateCRT")
flush(stderr()); flush(stdout())
{
trial <- readdata('example_site.csv')
trial$base_denom <- 1
aggregated <- aggregateCRT(trial, auxiliaries = c("RDT_test_result","base_denom"))
}
cleanEx()
nameEx("anonymize_site")
flush(stderr()); flush(stdout())
#Rotate and reflect test site locations
transformedTestlocations <- anonymize_site(trial =  readdata("exampleCRT.txt"))
cleanEx()
nameEx("coef.CRTanalysis")
flush(stderr()); flush(stdout())
{example <- readdata('exampleCRT.txt')
exampleGEE <- CRTanalysis(example, method = "GEE")
coef(exampleGEE)
}
cleanEx()
nameEx("compute_distance")
flush(stderr()); flush(stdout())
{
# Calculate the disc with a radius of 0.5 km
exampletrial <- compute_distance(trial = readdata('exampleCRT.txt'),
distance = 'disc', scale_par = 0.5)
}
cleanEx()
nameEx("compute_mesh")
flush(stderr()); flush(stdout())
{
# low resolution mesh for test dataset
library(Matrix)
example <- readdata('exampleCRT.txt')
exampleMesh=compute_mesh(example, pixel = 0.5)
}
cleanEx()
nameEx("fitted.CRTanalysis")
flush(stderr()); flush(stdout())
{example <- readdata('exampleCRT.txt')
exampleGEE <- CRTanalysis(example, method = "GEE")
fitted_values <- fitted(exampleGEE)
}
cleanEx()
nameEx("latlong_as_xy")
flush(stderr()); flush(stdout())
examplexy <- latlong_as_xy(readdata("example_latlong.csv"))
cleanEx()
nameEx("plotCRT")
flush(stderr()); flush(stdout())
{example <- readdata('exampleCRT.txt')
#Plot of data by distance
plotCRT(example)
#Map of locations only
plotCRT(example, map = TRUE, fill = 'none', showLocations = TRUE,
showClusterBoundaries=FALSE, maskbuffer=0.2)
#show cluster boundaries and number clusters
plotCRT(example, map = TRUE, fill ='none', showClusterBoundaries=TRUE,
showClusterLabels=TRUE, maskbuffer=0.2, labelsize = 2)
#show clusters in colour
plotCRT(example, map = TRUE, fill = 'clusters', showClusterLabels = TRUE,
labelsize=2, maskbuffer=0.2)
## Not run:
##D     #show arms
##D     plotCRT(example, map = TRUE,
##D         fill = 'arms', maskbuffer=0.2, legend.position=c(0.8,0.8))
## End(Not run)
#contamination plot
analysis <- CRTanalysis(example)
plotCRT(analysis, map = FALSE)
}
cleanEx()
nameEx("predict.CRTanalysis")
flush(stderr()); flush(stdout())
{example <- readdata('exampleCRT.txt')
exampleGEE <- CRTanalysis(example, method = "GEE")
predictions <- predict(exampleGEE)
}#'
cleanEx()
nameEx("randomizeCRT")
flush(stderr()); flush(stdout())
# Randomize the clusters in an example trial
exampleCRT <- randomizeCRT(trial = readdata('exampleCRT.txt'), matchedPair = TRUE)
cleanEx()
nameEx("readdata")
flush(stderr()); flush(stdout())
exampleCRT <- readdata('exampleCRT.txt')
cleanEx()
nameEx("residuals.CRTanalysis")
flush(stderr()); flush(stdout())
{example <- readdata('exampleCRT.txt')
exampleGEE <- CRTanalysis(example, method = "GEE")
residuals <- residuals(exampleGEE)
}
cleanEx()
nameEx("simulateCRT")
flush(stderr()); flush(stdout())
### Name: simulateCRT
### Name: simulateCRT
### Title: Simulation of cluster randomized trial with contamination
### Aliases: simulateCRT
### ** Examples
{
cleanEx()
nameEx("specify_buffer")
flush(stderr()); flush(stdout())
#Specify a buffer of 200m
exampletrial <- specify_buffer(trial = readdata('exampleCRT.txt'), buffer_width = 0.2)
cleanEx()
nameEx("specify_clusters")
flush(stderr()); flush(stdout())
#Assign clusters of average size h = 40 to a test set of co-ordinates, using the kmeans algorithm
exampletrial <- specify_clusters(trial = readdata('exampleCRT.txt'),
h = 40, algorithm = 'kmeans', reuseTSP = FALSE)
quit
}
devtools::document()
library(CRTspat)
library(CRTspat)
{smalltrial <- readdata('smalltrial.txt')
simulation <- simulateCRT(smalltrial,
effect = 0.25,
ICC_inp = 0.05,
outcome0 = 0.5,
matchedPair = FALSE,
scale = 'proportion',
sd = 0.6,
tol = 0.05)
summary(simulation)
}
{smalltrial <- readdata('smalltrial.txt')
}
smalltrial <- readdata('smalltrial.txt')
readdata('smalltrial.txt')
smalltrial <- read.csv(file= 'inst/extdata/smalltrial.txt', sep = ' ')
View(smalltrial)
dump(smalltrial, file = "inst/extdata/smalltrial.txt")
dump(smalltrial, file = "inst/extdata/smalltrial.txt")
#define file name
sink("inst/extdata/smalltrial.txt")
#print my_list to file
print(smalltrial)
#close external connection to file
sink()
small <- readdata('smalltrial.txt')
library(CRTspat)
small <- readdata('smalltrial.txt')
#define file name
sink("inst/extdata/smalltrial.txt")
#print my_list to file
smalltrial
#close external connection to file
sink()
#define file name
sink("inst/extdata/smalltrial.txt")
#print my_list to file
smalltrial
#close external connection to file
sink()
smalltrial
#define file name
sink("inst/extdata/smalltrial.txt")
#print my_list to file
dump(smalltrial.R)
write.csv(smalltrial, file = 'smalltrial.csv')
{smalltrial <- readdata('smalltrial.csv')
simulation <- simulateCRT(smalltrial,
effect = 0.25,
ICC_inp = 0.05,
outcome0 = 0.5,
matchedPair = FALSE,
scale = 'proportion',
sd = 0.6,
tol = 0.05)
summary(simulation)
}
detach("package:CRTspat", unload = TRUE)
write.csv(smalltrial, file = 'smalltrial.csv')
library(cowplot)
library(CRTspat)
setwd("C:/Users/smith/Documents/documents/Current Projects/Multerer/biom13316-sup-0001-suppmat/R functions/")
df <- read.table(file = "Trujillo.txt")
trujillo <- with(df, data.frame(num = y, denom = L, x = EASTING - mean(EASTING), cluster = CLUSTER, pair = PAIR))
trujillo$y <- df$NORTHING - mean(df$NORTHING)
trujillo$arm <- ifelse(df$t == 1, "intervention","control")
trujillo <- CRTsp(trujillo)
trujillo$rand <- runif(nrow(trujillo))
setwd("C:/Users/smith/Documents/documents/Current Projects/Multerer/biom13316-sup-0001-suppmat/R functions/")
df <- read.table(file = "Trujillo.txt")
trujillo <- with(df, data.frame(num = y, denom = L, x = EASTING - mean(EASTING), cluster = CLUSTER, pair = PAIR))
trujillo$y <- df$NORTHING - mean(df$NORTHING)
trujillo$arm <- ifelse(df$t == 1, "intervention","control")
trujillo$rand <- runif(nrow(trujillo))
smalltrial <- trujillo[trujillo$rand + trujillo$num > 0.8,c('x','y','cluster','arm','denom','num']
smalltrial <- trujillo[trujillo$rand + trujillo$num > 0.8,c('x','y','cluster','arm','denom','num')]
smalltrial$num[smalltrial$num>1]<- 1
write.csv(smalltrial,file = 'inst/extdata/smalltrial.csv')
write.csv(smalltrial,file = 'extdata/smalltrial.csv')
setwd('c:/CRTspat/')
setwd('c:/git_repos/CRTspat/')
write.csv(smalltrial,file = 'inst/extdata/smalltrial.csv')
library(CRTspat)
exampleCRT <- randomizeCRT(trial = readdata('exampleCRT.txt'), matchedPair = TRUE)
library(CRTspat)
library(CRTspat)
source("C:/git_repos/CRTspat/vignettes/runVignette.R")
